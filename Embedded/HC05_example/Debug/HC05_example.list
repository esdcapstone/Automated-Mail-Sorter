
HC05_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003018  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080031b8  080031b8  000131b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003214  08003214  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003214  08003214  00013214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800321c  0800321c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800321c  0800321c  0001321c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003220  08003220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08003294  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003294  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aefc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000188b  00000000  00000000  0002af9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  0002c828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  0002cef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c8a  00000000  00000000  0002d530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008f65  00000000  00000000  000431ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000860c7  00000000  00000000  0004c11f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d21e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e58  00000000  00000000  000d223c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080031a0 	.word	0x080031a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080031a0 	.word	0x080031a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08e      	sub	sp, #56	; 0x38
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t msg[50] = {'\0'};
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	222e      	movs	r2, #46	; 0x2e
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f002 f9ca 	bl	8002934 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 faa6 	bl	8000af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f820 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f8dc 	bl	8000764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ac:	f000 f8b0 	bl	8000710 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005b0:	f000 f884 	bl	80006bc <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf((char *)msg, "Hello world\r\n");
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	490a      	ldr	r1, [pc, #40]	; (80005e0 <main+0x58>)
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 f9c3 	bl	8002944 <siprintf>
	  HAL_UART_Transmit_IT(&huart1, msg, strlen((const char *)msg));
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff fe0d 	bl	80001e0 <strlen>
 80005c6:	4603      	mov	r3, r0
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4619      	mov	r1, r3
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <main+0x5c>)
 80005d0:	f001 fb27 	bl	8001c22 <HAL_UART_Transmit_IT>
	  HAL_Delay(5000);
 80005d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80005d8:	f000 fafc 	bl	8000bd4 <HAL_Delay>
	  sprintf((char *)msg, "Hello world\r\n");
 80005dc:	e7ea      	b.n	80005b4 <main+0x2c>
 80005de:	bf00      	nop
 80005e0:	080031b8 	.word	0x080031b8
 80005e4:	20000098 	.word	0x20000098

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 f99c 	bl	8002934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a27      	ldr	r2, [pc, #156]	; (80006b4 <SystemClock_Config+0xcc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xd0>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000658:	2310      	movs	r3, #16
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800065c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000660:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000662:	2304      	movs	r3, #4
 8000664:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000666:	2304      	movs	r3, #4
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fe16 	bl	80012a0 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800067a:	f000 f8e1 	bl	8000840 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2102      	movs	r1, #2
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f878 	bl	8001790 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006a6:	f000 f8cb 	bl	8000840 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART1_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_USART1_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_USART1_UART_Init+0x4c>)
 80006c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART1_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART1_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART1_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART1_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART1_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART1_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART1_UART_Init+0x4c>)
 80006f4:	f001 fa48 	bl	8001b88 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f89f 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000098 	.word	0x20000098
 800070c:	40011000 	.word	0x40011000

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <MX_USART2_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_USART2_UART_Init+0x4c>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART2_UART_Init+0x4c>)
 8000748:	f001 fa1e 	bl	8001b88 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000752:	f000 f875 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200000dc 	.word	0x200000dc
 8000760:	40004400 	.word	0x40004400

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a2c      	ldr	r2, [pc, #176]	; (8000834 <MX_GPIO_Init+0xd0>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a25      	ldr	r2, [pc, #148]	; (8000834 <MX_GPIO_Init+0xd0>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b23      	ldr	r3, [pc, #140]	; (8000834 <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <MX_GPIO_Init+0xd0>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a17      	ldr	r2, [pc, #92]	; (8000834 <MX_GPIO_Init+0xd0>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2120      	movs	r1, #32
 80007ee:	4812      	ldr	r0, [pc, #72]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007f0:	f000 fd3c 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	480c      	ldr	r0, [pc, #48]	; (800083c <MX_GPIO_Init+0xd8>)
 800080c:	f000 fbaa 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000810:	2320      	movs	r3, #32
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_GPIO_Init+0xd4>)
 8000828:	f000 fb9c 	bl	8000f64 <HAL_GPIO_Init>

}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	; 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40020000 	.word	0x40020000
 800083c:	40020800 	.word	0x40020800

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>
	...

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <HAL_MspInit+0x4c>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	4a0f      	ldr	r2, [pc, #60]	; (8000898 <HAL_MspInit+0x4c>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000860:	6453      	str	r3, [r2, #68]	; 0x44
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	4a08      	ldr	r2, [pc, #32]	; (8000898 <HAL_MspInit+0x4c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6413      	str	r3, [r2, #64]	; 0x40
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800088a:	2007      	movs	r0, #7
 800088c:	f000 fa96 	bl	8000dbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	; 0x30
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a36      	ldr	r2, [pc, #216]	; (8000994 <HAL_UART_MspInit+0xf8>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d135      	bne.n	800092a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
 80008c2:	4b35      	ldr	r3, [pc, #212]	; (8000998 <HAL_UART_MspInit+0xfc>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	4a34      	ldr	r2, [pc, #208]	; (8000998 <HAL_UART_MspInit+0xfc>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	6453      	str	r3, [r2, #68]	; 0x44
 80008ce:	4b32      	ldr	r3, [pc, #200]	; (8000998 <HAL_UART_MspInit+0xfc>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	61bb      	str	r3, [r7, #24]
 80008d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	4b2e      	ldr	r3, [pc, #184]	; (8000998 <HAL_UART_MspInit+0xfc>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a2d      	ldr	r2, [pc, #180]	; (8000998 <HAL_UART_MspInit+0xfc>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b2b      	ldr	r3, [pc, #172]	; (8000998 <HAL_UART_MspInit+0xfc>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000908:	2307      	movs	r3, #7
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4822      	ldr	r0, [pc, #136]	; (800099c <HAL_UART_MspInit+0x100>)
 8000914:	f000 fb26 	bl	8000f64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	2025      	movs	r0, #37	; 0x25
 800091e:	f000 fa58 	bl	8000dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000922:	2025      	movs	r0, #37	; 0x25
 8000924:	f000 fa71 	bl	8000e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000928:	e030      	b.n	800098c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <HAL_UART_MspInit+0x104>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d12b      	bne.n	800098c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_UART_MspInit+0xfc>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	4a16      	ldr	r2, [pc, #88]	; (8000998 <HAL_UART_MspInit+0xfc>)
 800093e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000942:	6413      	str	r3, [r2, #64]	; 0x40
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <HAL_UART_MspInit+0xfc>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_UART_MspInit+0xfc>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <HAL_UART_MspInit+0xfc>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	6313      	str	r3, [r2, #48]	; 0x30
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <HAL_UART_MspInit+0xfc>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800096c:	230c      	movs	r3, #12
 800096e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000978:	2303      	movs	r3, #3
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800097c:	2307      	movs	r3, #7
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <HAL_UART_MspInit+0x100>)
 8000988:	f000 faec 	bl	8000f64 <HAL_GPIO_Init>
}
 800098c:	bf00      	nop
 800098e:	3730      	adds	r7, #48	; 0x30
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40011000 	.word	0x40011000
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000
 80009a0:	40004400 	.word	0x40004400

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler+0x4>

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <MemManage_Handler+0x4>

080009b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 f8d0 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <USART1_IRQHandler+0x10>)
 80009fe:	f001 f955 	bl	8001cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000098 	.word	0x20000098

08000a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a14:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <_sbrk+0x5c>)
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <_sbrk+0x60>)
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d102      	bne.n	8000a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <_sbrk+0x64>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <_sbrk+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d207      	bcs.n	8000a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a3c:	f001 ff50 	bl	80028e0 <__errno>
 8000a40:	4603      	mov	r3, r0
 8000a42:	220c      	movs	r2, #12
 8000a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	e009      	b.n	8000a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a52:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <_sbrk+0x64>)
 8000a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20020000 	.word	0x20020000
 8000a6c:	00000400 	.word	0x00000400
 8000a70:	2000008c 	.word	0x2000008c
 8000a74:	20000138 	.word	0x20000138

08000a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <SystemInit+0x20>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <SystemInit+0x20>)
 8000a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aa2:	490e      	ldr	r1, [pc, #56]	; (8000adc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aa4:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ab8:	4c0b      	ldr	r4, [pc, #44]	; (8000ae8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ac6:	f7ff ffd7 	bl	8000a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aca:	f001 ff0f 	bl	80028ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ace:	f7ff fd5b 	bl	8000588 <main>
  bx  lr    
 8000ad2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ad4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000adc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ae0:	08003224 	.word	0x08003224
  ldr r2, =_sbss
 8000ae4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ae8:	20000134 	.word	0x20000134

08000aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC_IRQHandler>
	...

08000af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <HAL_Init+0x40>)
 8000afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <HAL_Init+0x40>)
 8000b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_Init+0x40>)
 8000b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 f94f 	bl	8000dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 f808 	bl	8000b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b24:	f7ff fe92 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023c00 	.word	0x40023c00

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_InitTick+0x54>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_InitTick+0x58>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f967 	bl	8000e26 <HAL_SYSTICK_Config>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00e      	b.n	8000b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d80a      	bhi.n	8000b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f000 f92f 	bl	8000dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b74:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <HAL_InitTick+0x5c>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000004 	.word	0x20000004

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	20000120 	.word	0x20000120

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000120 	.word	0x20000120

08000bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bdc:	f7ff ffee 	bl	8000bbc <HAL_GetTick>
 8000be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bec:	d005      	beq.n	8000bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_Delay+0x44>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bfa:	bf00      	nop
 8000bfc:	f7ff ffde 	bl	8000bbc <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d8f7      	bhi.n	8000bfc <HAL_Delay+0x28>
  {
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008

08000c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4e:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	60d3      	str	r3, [r2, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <__NVIC_GetPriorityGrouping+0x18>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 0307 	and.w	r3, r3, #7
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db0b      	blt.n	8000caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 021f 	and.w	r2, r3, #31
 8000c98:	4907      	ldr	r1, [pc, #28]	; (8000cb8 <__NVIC_EnableIRQ+0x38>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000e100 	.word	0xe000e100

08000cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db0a      	blt.n	8000ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	490c      	ldr	r1, [pc, #48]	; (8000d08 <__NVIC_SetPriority+0x4c>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce4:	e00a      	b.n	8000cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4908      	ldr	r1, [pc, #32]	; (8000d0c <__NVIC_SetPriority+0x50>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	761a      	strb	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
         );
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	; 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d88:	d301      	bcc.n	8000d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00f      	b.n	8000dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <SysTick_Config+0x40>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d96:	210f      	movs	r1, #15
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f7ff ff8e 	bl	8000cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <SysTick_Config+0x40>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da6:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <SysTick_Config+0x40>)
 8000da8:	2207      	movs	r2, #7
 8000daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	e000e010 	.word	0xe000e010

08000dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ff29 	bl	8000c1c <__NVIC_SetPriorityGrouping>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de4:	f7ff ff3e 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	6978      	ldr	r0, [r7, #20]
 8000df0:	f7ff ff8e 	bl	8000d10 <NVIC_EncodePriority>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff5d 	bl	8000cbc <__NVIC_SetPriority>
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff31 	bl	8000c80 <__NVIC_EnableIRQ>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ffa2 	bl	8000d78 <SysTick_Config>
 8000e34:	4603      	mov	r3, r0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b084      	sub	sp, #16
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff feb6 	bl	8000bbc <HAL_GetTick>
 8000e50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d008      	beq.n	8000e70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e052      	b.n	8000f16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0216 	bic.w	r2, r2, #22
 8000e7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	695a      	ldr	r2, [r3, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d103      	bne.n	8000ea0 <HAL_DMA_Abort+0x62>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d007      	beq.n	8000eb0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 0208 	bic.w	r2, r2, #8
 8000eae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0201 	bic.w	r2, r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ec0:	e013      	b.n	8000eea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ec2:	f7ff fe7b 	bl	8000bbc <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b05      	cmp	r3, #5
 8000ece:	d90c      	bls.n	8000eea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2220      	movs	r2, #32
 8000ed4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2203      	movs	r2, #3
 8000eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e015      	b.n	8000f16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1e4      	bne.n	8000ec2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000efc:	223f      	movs	r2, #63	; 0x3f
 8000efe:	409a      	lsls	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2201      	movs	r2, #1
 8000f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d004      	beq.n	8000f3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e00c      	b.n	8000f56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2205      	movs	r2, #5
 8000f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 0201 	bic.w	r2, r2, #1
 8000f52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	e159      	b.n	8001234 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	f040 8148 	bne.w	800122e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d005      	beq.n	8000fb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d130      	bne.n	8001018 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	091b      	lsrs	r3, r3, #4
 8001002:	f003 0201 	and.w	r2, r3, #1
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b03      	cmp	r3, #3
 8001022:	d017      	beq.n	8001054 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d123      	bne.n	80010a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	220f      	movs	r2, #15
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	08da      	lsrs	r2, r3, #3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3208      	adds	r2, #8
 80010a2:	69b9      	ldr	r1, [r7, #24]
 80010a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0203 	and.w	r2, r3, #3
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 80a2 	beq.w	800122e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b57      	ldr	r3, [pc, #348]	; (800124c <HAL_GPIO_Init+0x2e8>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a56      	ldr	r2, [pc, #344]	; (800124c <HAL_GPIO_Init+0x2e8>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b54      	ldr	r3, [pc, #336]	; (800124c <HAL_GPIO_Init+0x2e8>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001106:	4a52      	ldr	r2, [pc, #328]	; (8001250 <HAL_GPIO_Init+0x2ec>)
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a49      	ldr	r2, [pc, #292]	; (8001254 <HAL_GPIO_Init+0x2f0>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d019      	beq.n	8001166 <HAL_GPIO_Init+0x202>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a48      	ldr	r2, [pc, #288]	; (8001258 <HAL_GPIO_Init+0x2f4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0x1fe>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a47      	ldr	r2, [pc, #284]	; (800125c <HAL_GPIO_Init+0x2f8>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d00d      	beq.n	800115e <HAL_GPIO_Init+0x1fa>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a46      	ldr	r2, [pc, #280]	; (8001260 <HAL_GPIO_Init+0x2fc>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d007      	beq.n	800115a <HAL_GPIO_Init+0x1f6>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a45      	ldr	r2, [pc, #276]	; (8001264 <HAL_GPIO_Init+0x300>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_GPIO_Init+0x1f2>
 8001152:	2304      	movs	r3, #4
 8001154:	e008      	b.n	8001168 <HAL_GPIO_Init+0x204>
 8001156:	2307      	movs	r3, #7
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x204>
 800115a:	2303      	movs	r3, #3
 800115c:	e004      	b.n	8001168 <HAL_GPIO_Init+0x204>
 800115e:	2302      	movs	r3, #2
 8001160:	e002      	b.n	8001168 <HAL_GPIO_Init+0x204>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_GPIO_Init+0x204>
 8001166:	2300      	movs	r3, #0
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	f002 0203 	and.w	r2, r2, #3
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	4093      	lsls	r3, r2
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001178:	4935      	ldr	r1, [pc, #212]	; (8001250 <HAL_GPIO_Init+0x2ec>)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001186:	4b38      	ldr	r3, [pc, #224]	; (8001268 <HAL_GPIO_Init+0x304>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011aa:	4a2f      	ldr	r2, [pc, #188]	; (8001268 <HAL_GPIO_Init+0x304>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011b0:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <HAL_GPIO_Init+0x304>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d4:	4a24      	ldr	r2, [pc, #144]	; (8001268 <HAL_GPIO_Init+0x304>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011da:	4b23      	ldr	r3, [pc, #140]	; (8001268 <HAL_GPIO_Init+0x304>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011fe:	4a1a      	ldr	r2, [pc, #104]	; (8001268 <HAL_GPIO_Init+0x304>)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <HAL_GPIO_Init+0x304>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_GPIO_Init+0x304>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3301      	adds	r3, #1
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	2b0f      	cmp	r3, #15
 8001238:	f67f aea2 	bls.w	8000f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3724      	adds	r7, #36	; 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40013800 	.word	0x40013800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400
 800125c:	40020800 	.word	0x40020800
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40021000 	.word	0x40021000
 8001268:	40013c00 	.word	0x40013c00

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001288:	e003      	b.n	8001292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	041a      	lsls	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e264      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d075      	beq.n	80013aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012be:	4ba3      	ldr	r3, [pc, #652]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d00c      	beq.n	80012e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ca:	4ba0      	ldr	r3, [pc, #640]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d112      	bne.n	80012fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d6:	4b9d      	ldr	r3, [pc, #628]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012e2:	d10b      	bne.n	80012fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	4b99      	ldr	r3, [pc, #612]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d05b      	beq.n	80013a8 <HAL_RCC_OscConfig+0x108>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d157      	bne.n	80013a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e23f      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001304:	d106      	bne.n	8001314 <HAL_RCC_OscConfig+0x74>
 8001306:	4b91      	ldr	r3, [pc, #580]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a90      	ldr	r2, [pc, #576]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800130c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e01d      	b.n	8001350 <HAL_RCC_OscConfig+0xb0>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x98>
 800131e:	4b8b      	ldr	r3, [pc, #556]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a8a      	ldr	r2, [pc, #552]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b88      	ldr	r3, [pc, #544]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a87      	ldr	r2, [pc, #540]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e00b      	b.n	8001350 <HAL_RCC_OscConfig+0xb0>
 8001338:	4b84      	ldr	r3, [pc, #528]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a83      	ldr	r2, [pc, #524]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800133e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b81      	ldr	r3, [pc, #516]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a80      	ldr	r2, [pc, #512]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800134a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800134e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d013      	beq.n	8001380 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fc30 	bl	8000bbc <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001360:	f7ff fc2c 	bl	8000bbc <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b64      	cmp	r3, #100	; 0x64
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e204      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	4b76      	ldr	r3, [pc, #472]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0xc0>
 800137e:	e014      	b.n	80013aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fc1c 	bl	8000bbc <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fc18 	bl	8000bbc <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e1f0      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139a:	4b6c      	ldr	r3, [pc, #432]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0xe8>
 80013a6:	e000      	b.n	80013aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d063      	beq.n	800147e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013b6:	4b65      	ldr	r3, [pc, #404]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00b      	beq.n	80013da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c2:	4b62      	ldr	r3, [pc, #392]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d11c      	bne.n	8001408 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ce:	4b5f      	ldr	r3, [pc, #380]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d116      	bne.n	8001408 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013da:	4b5c      	ldr	r3, [pc, #368]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d005      	beq.n	80013f2 <HAL_RCC_OscConfig+0x152>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d001      	beq.n	80013f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e1c4      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f2:	4b56      	ldr	r3, [pc, #344]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4952      	ldr	r1, [pc, #328]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001406:	e03a      	b.n	800147e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d020      	beq.n	8001452 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001410:	4b4f      	ldr	r3, [pc, #316]	; (8001550 <HAL_RCC_OscConfig+0x2b0>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001416:	f7ff fbd1 	bl	8000bbc <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141e:	f7ff fbcd 	bl	8000bbc <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e1a5      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001430:	4b46      	ldr	r3, [pc, #280]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143c:	4b43      	ldr	r3, [pc, #268]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4940      	ldr	r1, [pc, #256]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800144c:	4313      	orrs	r3, r2
 800144e:	600b      	str	r3, [r1, #0]
 8001450:	e015      	b.n	800147e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001452:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <HAL_RCC_OscConfig+0x2b0>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff fbb0 	bl	8000bbc <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001460:	f7ff fbac 	bl	8000bbc <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e184      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001472:	4b36      	ldr	r3, [pc, #216]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d030      	beq.n	80014ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d016      	beq.n	80014c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001492:	4b30      	ldr	r3, [pc, #192]	; (8001554 <HAL_RCC_OscConfig+0x2b4>)
 8001494:	2201      	movs	r2, #1
 8001496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001498:	f7ff fb90 	bl	8000bbc <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a0:	f7ff fb8c 	bl	8000bbc <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e164      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b2:	4b26      	ldr	r3, [pc, #152]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x200>
 80014be:	e015      	b.n	80014ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c0:	4b24      	ldr	r3, [pc, #144]	; (8001554 <HAL_RCC_OscConfig+0x2b4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fb79 	bl	8000bbc <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ce:	f7ff fb75 	bl	8000bbc <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e14d      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e0:	4b1a      	ldr	r3, [pc, #104]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 80014e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f0      	bne.n	80014ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 80a0 	beq.w	800163a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10f      	bne.n	800152a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <HAL_RCC_OscConfig+0x2ac>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001526:	2301      	movs	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_RCC_OscConfig+0x2b8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d121      	bne.n	800157a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_RCC_OscConfig+0x2b8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a07      	ldr	r2, [pc, #28]	; (8001558 <HAL_RCC_OscConfig+0x2b8>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001542:	f7ff fb3b 	bl	8000bbc <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001548:	e011      	b.n	800156e <HAL_RCC_OscConfig+0x2ce>
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	42470000 	.word	0x42470000
 8001554:	42470e80 	.word	0x42470e80
 8001558:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155c:	f7ff fb2e 	bl	8000bbc <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e106      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156e:	4b85      	ldr	r3, [pc, #532]	; (8001784 <HAL_RCC_OscConfig+0x4e4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d106      	bne.n	8001590 <HAL_RCC_OscConfig+0x2f0>
 8001582:	4b81      	ldr	r3, [pc, #516]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001586:	4a80      	ldr	r2, [pc, #512]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6713      	str	r3, [r2, #112]	; 0x70
 800158e:	e01c      	b.n	80015ca <HAL_RCC_OscConfig+0x32a>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b05      	cmp	r3, #5
 8001596:	d10c      	bne.n	80015b2 <HAL_RCC_OscConfig+0x312>
 8001598:	4b7b      	ldr	r3, [pc, #492]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159c:	4a7a      	ldr	r2, [pc, #488]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6713      	str	r3, [r2, #112]	; 0x70
 80015a4:	4b78      	ldr	r3, [pc, #480]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	4a77      	ldr	r2, [pc, #476]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6713      	str	r3, [r2, #112]	; 0x70
 80015b0:	e00b      	b.n	80015ca <HAL_RCC_OscConfig+0x32a>
 80015b2:	4b75      	ldr	r3, [pc, #468]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	4a74      	ldr	r2, [pc, #464]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6713      	str	r3, [r2, #112]	; 0x70
 80015be:	4b72      	ldr	r3, [pc, #456]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	4a71      	ldr	r2, [pc, #452]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015c4:	f023 0304 	bic.w	r3, r3, #4
 80015c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d015      	beq.n	80015fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d2:	f7ff faf3 	bl	8000bbc <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d8:	e00a      	b.n	80015f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015da:	f7ff faef 	bl	8000bbc <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e0c5      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	4b65      	ldr	r3, [pc, #404]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0ee      	beq.n	80015da <HAL_RCC_OscConfig+0x33a>
 80015fc:	e014      	b.n	8001628 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fe:	f7ff fadd 	bl	8000bbc <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001604:	e00a      	b.n	800161c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001606:	f7ff fad9 	bl	8000bbc <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f241 3288 	movw	r2, #5000	; 0x1388
 8001614:	4293      	cmp	r3, r2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e0af      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	4b5a      	ldr	r3, [pc, #360]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ee      	bne.n	8001606 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d105      	bne.n	800163a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162e:	4b56      	ldr	r3, [pc, #344]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a55      	ldr	r2, [pc, #340]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 8001634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 809b 	beq.w	800177a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001644:	4b50      	ldr	r3, [pc, #320]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b08      	cmp	r3, #8
 800164e:	d05c      	beq.n	800170a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d141      	bne.n	80016dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001658:	4b4c      	ldr	r3, [pc, #304]	; (800178c <HAL_RCC_OscConfig+0x4ec>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff faad 	bl	8000bbc <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001666:	f7ff faa9 	bl	8000bbc <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e081      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001678:	4b43      	ldr	r3, [pc, #268]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69da      	ldr	r2, [r3, #28]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	019b      	lsls	r3, r3, #6
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	085b      	lsrs	r3, r3, #1
 800169c:	3b01      	subs	r3, #1
 800169e:	041b      	lsls	r3, r3, #16
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	061b      	lsls	r3, r3, #24
 80016a8:	4937      	ldr	r1, [pc, #220]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ae:	4b37      	ldr	r3, [pc, #220]	; (800178c <HAL_RCC_OscConfig+0x4ec>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fa82 	bl	8000bbc <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff fa7e 	bl	8000bbc <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e056      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ce:	4b2e      	ldr	r3, [pc, #184]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x41c>
 80016da:	e04e      	b.n	800177a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016dc:	4b2b      	ldr	r3, [pc, #172]	; (800178c <HAL_RCC_OscConfig+0x4ec>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff fa6b 	bl	8000bbc <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ea:	f7ff fa67 	bl	8000bbc <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e03f      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fc:	4b22      	ldr	r3, [pc, #136]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x44a>
 8001708:	e037      	b.n	800177a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e032      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <HAL_RCC_OscConfig+0x4e8>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d028      	beq.n	8001776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d121      	bne.n	8001776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d11a      	bne.n	8001776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001746:	4013      	ands	r3, r2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800174c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800174e:	4293      	cmp	r3, r2
 8001750:	d111      	bne.n	8001776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	085b      	lsrs	r3, r3, #1
 800175e:	3b01      	subs	r3, #1
 8001760:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d107      	bne.n	8001776 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d001      	beq.n	800177a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40007000 	.word	0x40007000
 8001788:	40023800 	.word	0x40023800
 800178c:	42470060 	.word	0x42470060

08001790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0cc      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a4:	4b68      	ldr	r3, [pc, #416]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d90c      	bls.n	80017cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b2:	4b65      	ldr	r3, [pc, #404]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ba:	4b63      	ldr	r3, [pc, #396]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0b8      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d020      	beq.n	800181a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e4:	4b59      	ldr	r3, [pc, #356]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4a58      	ldr	r2, [pc, #352]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017fc:	4b53      	ldr	r3, [pc, #332]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4a52      	ldr	r2, [pc, #328]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001806:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001808:	4b50      	ldr	r3, [pc, #320]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	494d      	ldr	r1, [pc, #308]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	4313      	orrs	r3, r2
 8001818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d044      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d107      	bne.n	800183e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	4b47      	ldr	r3, [pc, #284]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d119      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e07f      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d003      	beq.n	800184e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184a:	2b03      	cmp	r3, #3
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184e:	4b3f      	ldr	r3, [pc, #252]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e06f      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185e:	4b3b      	ldr	r3, [pc, #236]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e067      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800186e:	4b37      	ldr	r3, [pc, #220]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f023 0203 	bic.w	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4934      	ldr	r1, [pc, #208]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	4313      	orrs	r3, r2
 800187e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001880:	f7ff f99c 	bl	8000bbc <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	e00a      	b.n	800189e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001888:	f7ff f998 	bl	8000bbc <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	; 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e04f      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	4b2b      	ldr	r3, [pc, #172]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 020c 	and.w	r2, r3, #12
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d1eb      	bne.n	8001888 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b0:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d20c      	bcs.n	80018d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e032      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	4916      	ldr	r1, [pc, #88]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d009      	beq.n	8001916 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	490e      	ldr	r1, [pc, #56]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001916:	f000 f821 	bl	800195c <HAL_RCC_GetSysClockFreq>
 800191a:	4602      	mov	r2, r0
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	490a      	ldr	r1, [pc, #40]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	5ccb      	ldrb	r3, [r1, r3]
 800192a:	fa22 f303 	lsr.w	r3, r2, r3
 800192e:	4a09      	ldr	r2, [pc, #36]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_RCC_ClockConfig+0x1c8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff f8fc 	bl	8000b34 <HAL_InitTick>

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023c00 	.word	0x40023c00
 800194c:	40023800 	.word	0x40023800
 8001950:	080031c8 	.word	0x080031c8
 8001954:	20000000 	.word	0x20000000
 8001958:	20000004 	.word	0x20000004

0800195c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800195c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	2300      	movs	r3, #0
 800196e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001974:	4b67      	ldr	r3, [pc, #412]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b08      	cmp	r3, #8
 800197e:	d00d      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x40>
 8001980:	2b08      	cmp	r3, #8
 8001982:	f200 80bd 	bhi.w	8001b00 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <HAL_RCC_GetSysClockFreq+0x34>
 800198a:	2b04      	cmp	r3, #4
 800198c:	d003      	beq.n	8001996 <HAL_RCC_GetSysClockFreq+0x3a>
 800198e:	e0b7      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001990:	4b61      	ldr	r3, [pc, #388]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001992:	60bb      	str	r3, [r7, #8]
       break;
 8001994:	e0b7      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001996:	4b61      	ldr	r3, [pc, #388]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001998:	60bb      	str	r3, [r7, #8]
      break;
 800199a:	e0b4      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800199c:	4b5d      	ldr	r3, [pc, #372]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019a6:	4b5b      	ldr	r3, [pc, #364]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d04d      	beq.n	8001a4e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b2:	4b58      	ldr	r3, [pc, #352]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	099b      	lsrs	r3, r3, #6
 80019b8:	461a      	mov	r2, r3
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019c2:	f04f 0100 	mov.w	r1, #0
 80019c6:	ea02 0800 	and.w	r8, r2, r0
 80019ca:	ea03 0901 	and.w	r9, r3, r1
 80019ce:	4640      	mov	r0, r8
 80019d0:	4649      	mov	r1, r9
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	014b      	lsls	r3, r1, #5
 80019dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019e0:	0142      	lsls	r2, r0, #5
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	ebb0 0008 	subs.w	r0, r0, r8
 80019ea:	eb61 0109 	sbc.w	r1, r1, r9
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	018b      	lsls	r3, r1, #6
 80019f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019fc:	0182      	lsls	r2, r0, #6
 80019fe:	1a12      	subs	r2, r2, r0
 8001a00:	eb63 0301 	sbc.w	r3, r3, r1
 8001a04:	f04f 0000 	mov.w	r0, #0
 8001a08:	f04f 0100 	mov.w	r1, #0
 8001a0c:	00d9      	lsls	r1, r3, #3
 8001a0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a12:	00d0      	lsls	r0, r2, #3
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	eb12 0208 	adds.w	r2, r2, r8
 8001a1c:	eb43 0309 	adc.w	r3, r3, r9
 8001a20:	f04f 0000 	mov.w	r0, #0
 8001a24:	f04f 0100 	mov.w	r1, #0
 8001a28:	0259      	lsls	r1, r3, #9
 8001a2a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a2e:	0250      	lsls	r0, r2, #9
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	f7fe fc26 	bl	8000290 <__aeabi_uldivmod>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4613      	mov	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	e04a      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4e:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	099b      	lsrs	r3, r3, #6
 8001a54:	461a      	mov	r2, r3
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a5e:	f04f 0100 	mov.w	r1, #0
 8001a62:	ea02 0400 	and.w	r4, r2, r0
 8001a66:	ea03 0501 	and.w	r5, r3, r1
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	014b      	lsls	r3, r1, #5
 8001a78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a7c:	0142      	lsls	r2, r0, #5
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	1b00      	subs	r0, r0, r4
 8001a84:	eb61 0105 	sbc.w	r1, r1, r5
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	018b      	lsls	r3, r1, #6
 8001a92:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a96:	0182      	lsls	r2, r0, #6
 8001a98:	1a12      	subs	r2, r2, r0
 8001a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a9e:	f04f 0000 	mov.w	r0, #0
 8001aa2:	f04f 0100 	mov.w	r1, #0
 8001aa6:	00d9      	lsls	r1, r3, #3
 8001aa8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aac:	00d0      	lsls	r0, r2, #3
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	1912      	adds	r2, r2, r4
 8001ab4:	eb45 0303 	adc.w	r3, r5, r3
 8001ab8:	f04f 0000 	mov.w	r0, #0
 8001abc:	f04f 0100 	mov.w	r1, #0
 8001ac0:	0299      	lsls	r1, r3, #10
 8001ac2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ac6:	0290      	lsls	r0, r2, #10
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	f7fe fbda 	bl	8000290 <__aeabi_uldivmod>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	0c1b      	lsrs	r3, r3, #16
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	3301      	adds	r3, #1
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afc:	60bb      	str	r3, [r7, #8]
      break;
 8001afe:	e002      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b02:	60bb      	str	r3, [r7, #8]
      break;
 8001b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b06:	68bb      	ldr	r3, [r7, #8]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	00f42400 	.word	0x00f42400
 8001b1c:	007a1200 	.word	0x007a1200

08001b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000000 	.word	0x20000000

08001b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b3c:	f7ff fff0 	bl	8001b20 <HAL_RCC_GetHCLKFreq>
 8001b40:	4602      	mov	r2, r0
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	0a9b      	lsrs	r3, r3, #10
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	4903      	ldr	r1, [pc, #12]	; (8001b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b4e:	5ccb      	ldrb	r3, [r1, r3]
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	080031d8 	.word	0x080031d8

08001b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b64:	f7ff ffdc 	bl	8001b20 <HAL_RCC_GetHCLKFreq>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	0b5b      	lsrs	r3, r3, #13
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	4903      	ldr	r1, [pc, #12]	; (8001b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b76:	5ccb      	ldrb	r3, [r1, r3]
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40023800 	.word	0x40023800
 8001b84:	080031d8 	.word	0x080031d8

08001b88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e03f      	b.n	8001c1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d106      	bne.n	8001bb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7fe fe74 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2224      	movs	r2, #36	; 0x24
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 fcbf 	bl	8002550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	691a      	ldr	r2, [r3, #16]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001be0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2220      	movs	r2, #32
 8001c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b085      	sub	sp, #20
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b20      	cmp	r3, #32
 8001c3a:	d130      	bne.n	8001c9e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <HAL_UART_Transmit_IT+0x26>
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e029      	b.n	8001ca0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_UART_Transmit_IT+0x38>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e022      	b.n	8001ca0 <HAL_UART_Transmit_IT+0x7e>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	88fa      	ldrh	r2, [r7, #6]
 8001c6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	88fa      	ldrh	r2, [r7, #6]
 8001c72:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2221      	movs	r2, #33	; 0x21
 8001c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c98:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001c9e:	2302      	movs	r3, #2
  }
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b0ba      	sub	sp, #232	; 0xe8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10f      	bne.n	8001d12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cf6:	f003 0320 	and.w	r3, r3, #32
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <HAL_UART_IRQHandler+0x66>
 8001cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d02:	f003 0320 	and.w	r3, r3, #32
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fb65 	bl	80023da <UART_Receive_IT>
      return;
 8001d10:	e256      	b.n	80021c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 80de 	beq.w	8001ed8 <HAL_UART_IRQHandler+0x22c>
 8001d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d106      	bne.n	8001d36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80d1 	beq.w	8001ed8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00b      	beq.n	8001d5a <HAL_UART_IRQHandler+0xae>
 8001d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f043 0201 	orr.w	r2, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00b      	beq.n	8001d7e <HAL_UART_IRQHandler+0xd2>
 8001d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f043 0202 	orr.w	r2, r3, #2
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HAL_UART_IRQHandler+0xf6>
 8001d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f043 0204 	orr.w	r2, r3, #4
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d011      	beq.n	8001dd2 <HAL_UART_IRQHandler+0x126>
 8001dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001db2:	f003 0320 	and.w	r3, r3, #32
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d105      	bne.n	8001dc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d005      	beq.n	8001dd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f043 0208 	orr.w	r2, r3, #8
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 81ed 	beq.w	80021b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001de0:	f003 0320 	and.w	r3, r3, #32
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HAL_UART_IRQHandler+0x14e>
 8001de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 faf0 	bl	80023da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e04:	2b40      	cmp	r3, #64	; 0x40
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d103      	bne.n	8001e26 <HAL_UART_IRQHandler+0x17a>
 8001e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d04f      	beq.n	8001ec6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f9f8 	bl	800221c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e36:	2b40      	cmp	r3, #64	; 0x40
 8001e38:	d141      	bne.n	8001ebe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3314      	adds	r3, #20
 8001e40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e48:	e853 3f00 	ldrex	r3, [r3]
 8001e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3314      	adds	r3, #20
 8001e62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001e66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001e72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001e76:	e841 2300 	strex	r3, r2, [r1]
 8001e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1d9      	bne.n	8001e3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d013      	beq.n	8001eb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e92:	4a7d      	ldr	r2, [pc, #500]	; (8002088 <HAL_UART_IRQHandler+0x3dc>)
 8001e94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff f83f 	bl	8000f1e <HAL_DMA_Abort_IT>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d016      	beq.n	8001ed4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eb4:	e00e      	b.n	8001ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f99a 	bl	80021f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ebc:	e00a      	b.n	8001ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f996 	bl	80021f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ec4:	e006      	b.n	8001ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f992 	bl	80021f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001ed2:	e170      	b.n	80021b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed4:	bf00      	nop
    return;
 8001ed6:	e16e      	b.n	80021b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	f040 814a 	bne.w	8002176 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8143 	beq.w	8002176 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 813c 	beq.w	8002176 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1e:	2b40      	cmp	r3, #64	; 0x40
 8001f20:	f040 80b4 	bne.w	800208c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 8140 	beq.w	80021ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001f42:	429a      	cmp	r2, r3
 8001f44:	f080 8139 	bcs.w	80021ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001f4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f5a:	f000 8088 	beq.w	800206e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	330c      	adds	r3, #12
 8001f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f6c:	e853 3f00 	ldrex	r3, [r3]
 8001f70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	330c      	adds	r3, #12
 8001f86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001f8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001f96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f9a:	e841 2300 	strex	r3, r2, [r1]
 8001f9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1d9      	bne.n	8001f5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3314      	adds	r3, #20
 8001fb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fb4:	e853 3f00 	ldrex	r3, [r3]
 8001fb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	3314      	adds	r3, #20
 8001fca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001fce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001fd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001fda:	e841 2300 	strex	r3, r2, [r1]
 8001fde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1e1      	bne.n	8001faa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	3314      	adds	r3, #20
 8001fec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ff0:	e853 3f00 	ldrex	r3, [r3]
 8001ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3314      	adds	r3, #20
 8002006:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800200a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800200c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800200e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002010:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002012:	e841 2300 	strex	r3, r2, [r1]
 8002016:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1e3      	bne.n	8001fe6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2220      	movs	r2, #32
 8002022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	330c      	adds	r3, #12
 8002032:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002036:	e853 3f00 	ldrex	r3, [r3]
 800203a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800203c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800203e:	f023 0310 	bic.w	r3, r3, #16
 8002042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	330c      	adds	r3, #12
 800204c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002050:	65ba      	str	r2, [r7, #88]	; 0x58
 8002052:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002054:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002056:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002058:	e841 2300 	strex	r3, r2, [r1]
 800205c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800205e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1e3      	bne.n	800202c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fee8 	bl	8000e3e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002076:	b29b      	uxth	r3, r3
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	b29b      	uxth	r3, r3
 800207c:	4619      	mov	r1, r3
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8c0 	bl	8002204 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002084:	e099      	b.n	80021ba <HAL_UART_IRQHandler+0x50e>
 8002086:	bf00      	nop
 8002088:	080022e3 	.word	0x080022e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002094:	b29b      	uxth	r3, r3
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 808b 	beq.w	80021be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80020a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 8086 	beq.w	80021be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	330c      	adds	r3, #12
 80020b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020bc:	e853 3f00 	ldrex	r3, [r3]
 80020c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80020c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80020c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	330c      	adds	r3, #12
 80020d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80020d6:	647a      	str	r2, [r7, #68]	; 0x44
 80020d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80020dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020de:	e841 2300 	strex	r3, r2, [r1]
 80020e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80020e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1e3      	bne.n	80020b2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	3314      	adds	r3, #20
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	e853 3f00 	ldrex	r3, [r3]
 80020f8:	623b      	str	r3, [r7, #32]
   return(result);
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3314      	adds	r3, #20
 800210a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800210e:	633a      	str	r2, [r7, #48]	; 0x30
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002112:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002116:	e841 2300 	strex	r3, r2, [r1]
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1e3      	bne.n	80020ea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2220      	movs	r2, #32
 8002126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	330c      	adds	r3, #12
 8002136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	e853 3f00 	ldrex	r3, [r3]
 800213e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 0310 	bic.w	r3, r3, #16
 8002146:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	330c      	adds	r3, #12
 8002150:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002154:	61fa      	str	r2, [r7, #28]
 8002156:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002158:	69b9      	ldr	r1, [r7, #24]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	e841 2300 	strex	r3, r2, [r1]
 8002160:	617b      	str	r3, [r7, #20]
   return(result);
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1e3      	bne.n	8002130 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002168:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800216c:	4619      	mov	r1, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f848 	bl	8002204 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002174:	e023      	b.n	80021be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800217a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217e:	2b00      	cmp	r3, #0
 8002180:	d009      	beq.n	8002196 <HAL_UART_IRQHandler+0x4ea>
 8002182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f8bb 	bl	800230a <UART_Transmit_IT>
    return;
 8002194:	e014      	b.n	80021c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00e      	beq.n	80021c0 <HAL_UART_IRQHandler+0x514>
 80021a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d008      	beq.n	80021c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f8fb 	bl	80023aa <UART_EndTransmit_IT>
    return;
 80021b4:	e004      	b.n	80021c0 <HAL_UART_IRQHandler+0x514>
    return;
 80021b6:	bf00      	nop
 80021b8:	e002      	b.n	80021c0 <HAL_UART_IRQHandler+0x514>
      return;
 80021ba:	bf00      	nop
 80021bc:	e000      	b.n	80021c0 <HAL_UART_IRQHandler+0x514>
      return;
 80021be:	bf00      	nop
  }
}
 80021c0:	37e8      	adds	r7, #232	; 0xe8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop

080021c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800221c:	b480      	push	{r7}
 800221e:	b095      	sub	sp, #84	; 0x54
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	330c      	adds	r3, #12
 800222a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222e:	e853 3f00 	ldrex	r3, [r3]
 8002232:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002236:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800223a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	330c      	adds	r3, #12
 8002242:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002244:	643a      	str	r2, [r7, #64]	; 0x40
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002248:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800224a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800224c:	e841 2300 	strex	r3, r2, [r1]
 8002250:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e5      	bne.n	8002224 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3314      	adds	r3, #20
 800225e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	e853 3f00 	ldrex	r3, [r3]
 8002266:	61fb      	str	r3, [r7, #28]
   return(result);
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3314      	adds	r3, #20
 8002276:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002278:	62fa      	str	r2, [r7, #44]	; 0x2c
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800227c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800227e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002280:	e841 2300 	strex	r3, r2, [r1]
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1e5      	bne.n	8002258 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	2b01      	cmp	r3, #1
 8002292:	d119      	bne.n	80022c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	330c      	adds	r3, #12
 800229a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	e853 3f00 	ldrex	r3, [r3]
 80022a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f023 0310 	bic.w	r3, r3, #16
 80022aa:	647b      	str	r3, [r7, #68]	; 0x44
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	330c      	adds	r3, #12
 80022b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022b4:	61ba      	str	r2, [r7, #24]
 80022b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b8:	6979      	ldr	r1, [r7, #20]
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	e841 2300 	strex	r3, r2, [r1]
 80022c0:	613b      	str	r3, [r7, #16]
   return(result);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1e5      	bne.n	8002294 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80022d6:	bf00      	nop
 80022d8:	3754      	adds	r7, #84	; 0x54
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f7ff ff77 	bl	80021f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800230a:	b480      	push	{r7}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b21      	cmp	r3, #33	; 0x21
 800231c:	d13e      	bne.n	800239c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002326:	d114      	bne.n	8002352 <UART_Transmit_IT+0x48>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d110      	bne.n	8002352 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002344:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	1c9a      	adds	r2, r3, #2
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	621a      	str	r2, [r3, #32]
 8002350:	e008      	b.n	8002364 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	1c59      	adds	r1, r3, #1
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6211      	str	r1, [r2, #32]
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002368:	b29b      	uxth	r3, r3
 800236a:	3b01      	subs	r3, #1
 800236c:	b29b      	uxth	r3, r3
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4619      	mov	r1, r3
 8002372:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10f      	bne.n	8002398 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002386:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002396:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	e000      	b.n	800239e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800239c:	2302      	movs	r3, #2
  }
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2220      	movs	r2, #32
 80023c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff fefc 	bl	80021c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b08c      	sub	sp, #48	; 0x30
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b22      	cmp	r3, #34	; 0x22
 80023ec:	f040 80ab 	bne.w	8002546 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f8:	d117      	bne.n	800242a <UART_Receive_IT+0x50>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d113      	bne.n	800242a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002402:	2300      	movs	r3, #0
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	b29b      	uxth	r3, r3
 8002414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002418:	b29a      	uxth	r2, r3
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	1c9a      	adds	r2, r3, #2
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	629a      	str	r2, [r3, #40]	; 0x28
 8002428:	e026      	b.n	8002478 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002430:	2300      	movs	r3, #0
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243c:	d007      	beq.n	800244e <UART_Receive_IT+0x74>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10a      	bne.n	800245c <UART_Receive_IT+0x82>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002458:	701a      	strb	r2, [r3, #0]
 800245a:	e008      	b.n	800246e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002468:	b2da      	uxtb	r2, r3
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29b      	uxth	r3, r3
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	4619      	mov	r1, r3
 8002486:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002488:	2b00      	cmp	r3, #0
 800248a:	d15a      	bne.n	8002542 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0220 	bic.w	r2, r2, #32
 800249a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0201 	bic.w	r2, r2, #1
 80024ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d135      	bne.n	8002538 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	330c      	adds	r3, #12
 80024d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	e853 3f00 	ldrex	r3, [r3]
 80024e0:	613b      	str	r3, [r7, #16]
   return(result);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f023 0310 	bic.w	r3, r3, #16
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	330c      	adds	r3, #12
 80024f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f2:	623a      	str	r2, [r7, #32]
 80024f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f6:	69f9      	ldr	r1, [r7, #28]
 80024f8:	6a3a      	ldr	r2, [r7, #32]
 80024fa:	e841 2300 	strex	r3, r2, [r1]
 80024fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1e5      	bne.n	80024d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b10      	cmp	r3, #16
 8002512:	d10a      	bne.n	800252a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800252e:	4619      	mov	r1, r3
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff fe67 	bl	8002204 <HAL_UARTEx_RxEventCallback>
 8002536:	e002      	b.n	800253e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff fe4f 	bl	80021dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e002      	b.n	8002548 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002546:	2302      	movs	r3, #2
  }
}
 8002548:	4618      	mov	r0, r3
 800254a:	3730      	adds	r7, #48	; 0x30
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002554:	b09f      	sub	sp, #124	; 0x7c
 8002556:	af00      	add	r7, sp, #0
 8002558:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800255a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002566:	68d9      	ldr	r1, [r3, #12]
 8002568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	ea40 0301 	orr.w	r3, r0, r1
 8002570:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	431a      	orrs	r2, r3
 800257c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	431a      	orrs	r2, r3
 8002582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	4313      	orrs	r3, r2
 8002588:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800258a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002594:	f021 010c 	bic.w	r1, r1, #12
 8002598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800259e:	430b      	orrs	r3, r1
 80025a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ae:	6999      	ldr	r1, [r3, #24]
 80025b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	ea40 0301 	orr.w	r3, r0, r1
 80025b8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	4bc5      	ldr	r3, [pc, #788]	; (80028d4 <UART_SetConfig+0x384>)
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d004      	beq.n	80025ce <UART_SetConfig+0x7e>
 80025c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4bc3      	ldr	r3, [pc, #780]	; (80028d8 <UART_SetConfig+0x388>)
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d103      	bne.n	80025d6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025ce:	f7ff fac7 	bl	8001b60 <HAL_RCC_GetPCLK2Freq>
 80025d2:	6778      	str	r0, [r7, #116]	; 0x74
 80025d4:	e002      	b.n	80025dc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025d6:	f7ff faaf 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
 80025da:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025e4:	f040 80b6 	bne.w	8002754 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ea:	461c      	mov	r4, r3
 80025ec:	f04f 0500 	mov.w	r5, #0
 80025f0:	4622      	mov	r2, r4
 80025f2:	462b      	mov	r3, r5
 80025f4:	1891      	adds	r1, r2, r2
 80025f6:	6439      	str	r1, [r7, #64]	; 0x40
 80025f8:	415b      	adcs	r3, r3
 80025fa:	647b      	str	r3, [r7, #68]	; 0x44
 80025fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002600:	1912      	adds	r2, r2, r4
 8002602:	eb45 0303 	adc.w	r3, r5, r3
 8002606:	f04f 0000 	mov.w	r0, #0
 800260a:	f04f 0100 	mov.w	r1, #0
 800260e:	00d9      	lsls	r1, r3, #3
 8002610:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002614:	00d0      	lsls	r0, r2, #3
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	1911      	adds	r1, r2, r4
 800261c:	6639      	str	r1, [r7, #96]	; 0x60
 800261e:	416b      	adcs	r3, r5
 8002620:	667b      	str	r3, [r7, #100]	; 0x64
 8002622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	461a      	mov	r2, r3
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	1891      	adds	r1, r2, r2
 800262e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002630:	415b      	adcs	r3, r3
 8002632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002634:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002638:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800263c:	f7fd fe28 	bl	8000290 <__aeabi_uldivmod>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4ba5      	ldr	r3, [pc, #660]	; (80028dc <UART_SetConfig+0x38c>)
 8002646:	fba3 2302 	umull	r2, r3, r3, r2
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	011e      	lsls	r6, r3, #4
 800264e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002650:	461c      	mov	r4, r3
 8002652:	f04f 0500 	mov.w	r5, #0
 8002656:	4622      	mov	r2, r4
 8002658:	462b      	mov	r3, r5
 800265a:	1891      	adds	r1, r2, r2
 800265c:	6339      	str	r1, [r7, #48]	; 0x30
 800265e:	415b      	adcs	r3, r3
 8002660:	637b      	str	r3, [r7, #52]	; 0x34
 8002662:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002666:	1912      	adds	r2, r2, r4
 8002668:	eb45 0303 	adc.w	r3, r5, r3
 800266c:	f04f 0000 	mov.w	r0, #0
 8002670:	f04f 0100 	mov.w	r1, #0
 8002674:	00d9      	lsls	r1, r3, #3
 8002676:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800267a:	00d0      	lsls	r0, r2, #3
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	1911      	adds	r1, r2, r4
 8002682:	65b9      	str	r1, [r7, #88]	; 0x58
 8002684:	416b      	adcs	r3, r5
 8002686:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	461a      	mov	r2, r3
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	1891      	adds	r1, r2, r2
 8002694:	62b9      	str	r1, [r7, #40]	; 0x28
 8002696:	415b      	adcs	r3, r3
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800269a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800269e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80026a2:	f7fd fdf5 	bl	8000290 <__aeabi_uldivmod>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4b8c      	ldr	r3, [pc, #560]	; (80028dc <UART_SetConfig+0x38c>)
 80026ac:	fba3 1302 	umull	r1, r3, r3, r2
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	2164      	movs	r1, #100	; 0x64
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	3332      	adds	r3, #50	; 0x32
 80026be:	4a87      	ldr	r2, [pc, #540]	; (80028dc <UART_SetConfig+0x38c>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026cc:	441e      	add	r6, r3
 80026ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d0:	4618      	mov	r0, r3
 80026d2:	f04f 0100 	mov.w	r1, #0
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	1894      	adds	r4, r2, r2
 80026dc:	623c      	str	r4, [r7, #32]
 80026de:	415b      	adcs	r3, r3
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
 80026e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026e6:	1812      	adds	r2, r2, r0
 80026e8:	eb41 0303 	adc.w	r3, r1, r3
 80026ec:	f04f 0400 	mov.w	r4, #0
 80026f0:	f04f 0500 	mov.w	r5, #0
 80026f4:	00dd      	lsls	r5, r3, #3
 80026f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026fa:	00d4      	lsls	r4, r2, #3
 80026fc:	4622      	mov	r2, r4
 80026fe:	462b      	mov	r3, r5
 8002700:	1814      	adds	r4, r2, r0
 8002702:	653c      	str	r4, [r7, #80]	; 0x50
 8002704:	414b      	adcs	r3, r1
 8002706:	657b      	str	r3, [r7, #84]	; 0x54
 8002708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	461a      	mov	r2, r3
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	1891      	adds	r1, r2, r2
 8002714:	61b9      	str	r1, [r7, #24]
 8002716:	415b      	adcs	r3, r3
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800271e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002722:	f7fd fdb5 	bl	8000290 <__aeabi_uldivmod>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4b6c      	ldr	r3, [pc, #432]	; (80028dc <UART_SetConfig+0x38c>)
 800272c:	fba3 1302 	umull	r1, r3, r3, r2
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	2164      	movs	r1, #100	; 0x64
 8002734:	fb01 f303 	mul.w	r3, r1, r3
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	3332      	adds	r3, #50	; 0x32
 800273e:	4a67      	ldr	r2, [pc, #412]	; (80028dc <UART_SetConfig+0x38c>)
 8002740:	fba2 2303 	umull	r2, r3, r2, r3
 8002744:	095b      	lsrs	r3, r3, #5
 8002746:	f003 0207 	and.w	r2, r3, #7
 800274a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4432      	add	r2, r6
 8002750:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002752:	e0b9      	b.n	80028c8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002754:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002756:	461c      	mov	r4, r3
 8002758:	f04f 0500 	mov.w	r5, #0
 800275c:	4622      	mov	r2, r4
 800275e:	462b      	mov	r3, r5
 8002760:	1891      	adds	r1, r2, r2
 8002762:	6139      	str	r1, [r7, #16]
 8002764:	415b      	adcs	r3, r3
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800276c:	1912      	adds	r2, r2, r4
 800276e:	eb45 0303 	adc.w	r3, r5, r3
 8002772:	f04f 0000 	mov.w	r0, #0
 8002776:	f04f 0100 	mov.w	r1, #0
 800277a:	00d9      	lsls	r1, r3, #3
 800277c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002780:	00d0      	lsls	r0, r2, #3
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	eb12 0804 	adds.w	r8, r2, r4
 800278a:	eb43 0905 	adc.w	r9, r3, r5
 800278e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4618      	mov	r0, r3
 8002794:	f04f 0100 	mov.w	r1, #0
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	008b      	lsls	r3, r1, #2
 80027a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027a6:	0082      	lsls	r2, r0, #2
 80027a8:	4640      	mov	r0, r8
 80027aa:	4649      	mov	r1, r9
 80027ac:	f7fd fd70 	bl	8000290 <__aeabi_uldivmod>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4b49      	ldr	r3, [pc, #292]	; (80028dc <UART_SetConfig+0x38c>)
 80027b6:	fba3 2302 	umull	r2, r3, r3, r2
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	011e      	lsls	r6, r3, #4
 80027be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c0:	4618      	mov	r0, r3
 80027c2:	f04f 0100 	mov.w	r1, #0
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	1894      	adds	r4, r2, r2
 80027cc:	60bc      	str	r4, [r7, #8]
 80027ce:	415b      	adcs	r3, r3
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027d6:	1812      	adds	r2, r2, r0
 80027d8:	eb41 0303 	adc.w	r3, r1, r3
 80027dc:	f04f 0400 	mov.w	r4, #0
 80027e0:	f04f 0500 	mov.w	r5, #0
 80027e4:	00dd      	lsls	r5, r3, #3
 80027e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80027ea:	00d4      	lsls	r4, r2, #3
 80027ec:	4622      	mov	r2, r4
 80027ee:	462b      	mov	r3, r5
 80027f0:	1814      	adds	r4, r2, r0
 80027f2:	64bc      	str	r4, [r7, #72]	; 0x48
 80027f4:	414b      	adcs	r3, r1
 80027f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f04f 0100 	mov.w	r1, #0
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	008b      	lsls	r3, r1, #2
 800280c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002810:	0082      	lsls	r2, r0, #2
 8002812:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002816:	f7fd fd3b 	bl	8000290 <__aeabi_uldivmod>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4b2f      	ldr	r3, [pc, #188]	; (80028dc <UART_SetConfig+0x38c>)
 8002820:	fba3 1302 	umull	r1, r3, r3, r2
 8002824:	095b      	lsrs	r3, r3, #5
 8002826:	2164      	movs	r1, #100	; 0x64
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	3332      	adds	r3, #50	; 0x32
 8002832:	4a2a      	ldr	r2, [pc, #168]	; (80028dc <UART_SetConfig+0x38c>)
 8002834:	fba2 2303 	umull	r2, r3, r2, r3
 8002838:	095b      	lsrs	r3, r3, #5
 800283a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800283e:	441e      	add	r6, r3
 8002840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002842:	4618      	mov	r0, r3
 8002844:	f04f 0100 	mov.w	r1, #0
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	1894      	adds	r4, r2, r2
 800284e:	603c      	str	r4, [r7, #0]
 8002850:	415b      	adcs	r3, r3
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002858:	1812      	adds	r2, r2, r0
 800285a:	eb41 0303 	adc.w	r3, r1, r3
 800285e:	f04f 0400 	mov.w	r4, #0
 8002862:	f04f 0500 	mov.w	r5, #0
 8002866:	00dd      	lsls	r5, r3, #3
 8002868:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800286c:	00d4      	lsls	r4, r2, #3
 800286e:	4622      	mov	r2, r4
 8002870:	462b      	mov	r3, r5
 8002872:	eb12 0a00 	adds.w	sl, r2, r0
 8002876:	eb43 0b01 	adc.w	fp, r3, r1
 800287a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4618      	mov	r0, r3
 8002880:	f04f 0100 	mov.w	r1, #0
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	008b      	lsls	r3, r1, #2
 800288e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002892:	0082      	lsls	r2, r0, #2
 8002894:	4650      	mov	r0, sl
 8002896:	4659      	mov	r1, fp
 8002898:	f7fd fcfa 	bl	8000290 <__aeabi_uldivmod>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <UART_SetConfig+0x38c>)
 80028a2:	fba3 1302 	umull	r1, r3, r3, r2
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	2164      	movs	r1, #100	; 0x64
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	3332      	adds	r3, #50	; 0x32
 80028b4:	4a09      	ldr	r2, [pc, #36]	; (80028dc <UART_SetConfig+0x38c>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	f003 020f 	and.w	r2, r3, #15
 80028c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4432      	add	r2, r6
 80028c6:	609a      	str	r2, [r3, #8]
}
 80028c8:	bf00      	nop
 80028ca:	377c      	adds	r7, #124	; 0x7c
 80028cc:	46bd      	mov	sp, r7
 80028ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028d2:	bf00      	nop
 80028d4:	40011000 	.word	0x40011000
 80028d8:	40011400 	.word	0x40011400
 80028dc:	51eb851f 	.word	0x51eb851f

080028e0 <__errno>:
 80028e0:	4b01      	ldr	r3, [pc, #4]	; (80028e8 <__errno+0x8>)
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	2000000c 	.word	0x2000000c

080028ec <__libc_init_array>:
 80028ec:	b570      	push	{r4, r5, r6, lr}
 80028ee:	4d0d      	ldr	r5, [pc, #52]	; (8002924 <__libc_init_array+0x38>)
 80028f0:	4c0d      	ldr	r4, [pc, #52]	; (8002928 <__libc_init_array+0x3c>)
 80028f2:	1b64      	subs	r4, r4, r5
 80028f4:	10a4      	asrs	r4, r4, #2
 80028f6:	2600      	movs	r6, #0
 80028f8:	42a6      	cmp	r6, r4
 80028fa:	d109      	bne.n	8002910 <__libc_init_array+0x24>
 80028fc:	4d0b      	ldr	r5, [pc, #44]	; (800292c <__libc_init_array+0x40>)
 80028fe:	4c0c      	ldr	r4, [pc, #48]	; (8002930 <__libc_init_array+0x44>)
 8002900:	f000 fc4e 	bl	80031a0 <_init>
 8002904:	1b64      	subs	r4, r4, r5
 8002906:	10a4      	asrs	r4, r4, #2
 8002908:	2600      	movs	r6, #0
 800290a:	42a6      	cmp	r6, r4
 800290c:	d105      	bne.n	800291a <__libc_init_array+0x2e>
 800290e:	bd70      	pop	{r4, r5, r6, pc}
 8002910:	f855 3b04 	ldr.w	r3, [r5], #4
 8002914:	4798      	blx	r3
 8002916:	3601      	adds	r6, #1
 8002918:	e7ee      	b.n	80028f8 <__libc_init_array+0xc>
 800291a:	f855 3b04 	ldr.w	r3, [r5], #4
 800291e:	4798      	blx	r3
 8002920:	3601      	adds	r6, #1
 8002922:	e7f2      	b.n	800290a <__libc_init_array+0x1e>
 8002924:	0800321c 	.word	0x0800321c
 8002928:	0800321c 	.word	0x0800321c
 800292c:	0800321c 	.word	0x0800321c
 8002930:	08003220 	.word	0x08003220

08002934 <memset>:
 8002934:	4402      	add	r2, r0
 8002936:	4603      	mov	r3, r0
 8002938:	4293      	cmp	r3, r2
 800293a:	d100      	bne.n	800293e <memset+0xa>
 800293c:	4770      	bx	lr
 800293e:	f803 1b01 	strb.w	r1, [r3], #1
 8002942:	e7f9      	b.n	8002938 <memset+0x4>

08002944 <siprintf>:
 8002944:	b40e      	push	{r1, r2, r3}
 8002946:	b500      	push	{lr}
 8002948:	b09c      	sub	sp, #112	; 0x70
 800294a:	ab1d      	add	r3, sp, #116	; 0x74
 800294c:	9002      	str	r0, [sp, #8]
 800294e:	9006      	str	r0, [sp, #24]
 8002950:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002954:	4809      	ldr	r0, [pc, #36]	; (800297c <siprintf+0x38>)
 8002956:	9107      	str	r1, [sp, #28]
 8002958:	9104      	str	r1, [sp, #16]
 800295a:	4909      	ldr	r1, [pc, #36]	; (8002980 <siprintf+0x3c>)
 800295c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002960:	9105      	str	r1, [sp, #20]
 8002962:	6800      	ldr	r0, [r0, #0]
 8002964:	9301      	str	r3, [sp, #4]
 8002966:	a902      	add	r1, sp, #8
 8002968:	f000 f868 	bl	8002a3c <_svfiprintf_r>
 800296c:	9b02      	ldr	r3, [sp, #8]
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	b01c      	add	sp, #112	; 0x70
 8002974:	f85d eb04 	ldr.w	lr, [sp], #4
 8002978:	b003      	add	sp, #12
 800297a:	4770      	bx	lr
 800297c:	2000000c 	.word	0x2000000c
 8002980:	ffff0208 	.word	0xffff0208

08002984 <__ssputs_r>:
 8002984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002988:	688e      	ldr	r6, [r1, #8]
 800298a:	429e      	cmp	r6, r3
 800298c:	4682      	mov	sl, r0
 800298e:	460c      	mov	r4, r1
 8002990:	4690      	mov	r8, r2
 8002992:	461f      	mov	r7, r3
 8002994:	d838      	bhi.n	8002a08 <__ssputs_r+0x84>
 8002996:	898a      	ldrh	r2, [r1, #12]
 8002998:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800299c:	d032      	beq.n	8002a04 <__ssputs_r+0x80>
 800299e:	6825      	ldr	r5, [r4, #0]
 80029a0:	6909      	ldr	r1, [r1, #16]
 80029a2:	eba5 0901 	sub.w	r9, r5, r1
 80029a6:	6965      	ldr	r5, [r4, #20]
 80029a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029b0:	3301      	adds	r3, #1
 80029b2:	444b      	add	r3, r9
 80029b4:	106d      	asrs	r5, r5, #1
 80029b6:	429d      	cmp	r5, r3
 80029b8:	bf38      	it	cc
 80029ba:	461d      	movcc	r5, r3
 80029bc:	0553      	lsls	r3, r2, #21
 80029be:	d531      	bpl.n	8002a24 <__ssputs_r+0xa0>
 80029c0:	4629      	mov	r1, r5
 80029c2:	f000 fb47 	bl	8003054 <_malloc_r>
 80029c6:	4606      	mov	r6, r0
 80029c8:	b950      	cbnz	r0, 80029e0 <__ssputs_r+0x5c>
 80029ca:	230c      	movs	r3, #12
 80029cc:	f8ca 3000 	str.w	r3, [sl]
 80029d0:	89a3      	ldrh	r3, [r4, #12]
 80029d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029d6:	81a3      	strh	r3, [r4, #12]
 80029d8:	f04f 30ff 	mov.w	r0, #4294967295
 80029dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029e0:	6921      	ldr	r1, [r4, #16]
 80029e2:	464a      	mov	r2, r9
 80029e4:	f000 fabe 	bl	8002f64 <memcpy>
 80029e8:	89a3      	ldrh	r3, [r4, #12]
 80029ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f2:	81a3      	strh	r3, [r4, #12]
 80029f4:	6126      	str	r6, [r4, #16]
 80029f6:	6165      	str	r5, [r4, #20]
 80029f8:	444e      	add	r6, r9
 80029fa:	eba5 0509 	sub.w	r5, r5, r9
 80029fe:	6026      	str	r6, [r4, #0]
 8002a00:	60a5      	str	r5, [r4, #8]
 8002a02:	463e      	mov	r6, r7
 8002a04:	42be      	cmp	r6, r7
 8002a06:	d900      	bls.n	8002a0a <__ssputs_r+0x86>
 8002a08:	463e      	mov	r6, r7
 8002a0a:	4632      	mov	r2, r6
 8002a0c:	6820      	ldr	r0, [r4, #0]
 8002a0e:	4641      	mov	r1, r8
 8002a10:	f000 fab6 	bl	8002f80 <memmove>
 8002a14:	68a3      	ldr	r3, [r4, #8]
 8002a16:	6822      	ldr	r2, [r4, #0]
 8002a18:	1b9b      	subs	r3, r3, r6
 8002a1a:	4432      	add	r2, r6
 8002a1c:	60a3      	str	r3, [r4, #8]
 8002a1e:	6022      	str	r2, [r4, #0]
 8002a20:	2000      	movs	r0, #0
 8002a22:	e7db      	b.n	80029dc <__ssputs_r+0x58>
 8002a24:	462a      	mov	r2, r5
 8002a26:	f000 fb6f 	bl	8003108 <_realloc_r>
 8002a2a:	4606      	mov	r6, r0
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	d1e1      	bne.n	80029f4 <__ssputs_r+0x70>
 8002a30:	6921      	ldr	r1, [r4, #16]
 8002a32:	4650      	mov	r0, sl
 8002a34:	f000 fabe 	bl	8002fb4 <_free_r>
 8002a38:	e7c7      	b.n	80029ca <__ssputs_r+0x46>
	...

08002a3c <_svfiprintf_r>:
 8002a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a40:	4698      	mov	r8, r3
 8002a42:	898b      	ldrh	r3, [r1, #12]
 8002a44:	061b      	lsls	r3, r3, #24
 8002a46:	b09d      	sub	sp, #116	; 0x74
 8002a48:	4607      	mov	r7, r0
 8002a4a:	460d      	mov	r5, r1
 8002a4c:	4614      	mov	r4, r2
 8002a4e:	d50e      	bpl.n	8002a6e <_svfiprintf_r+0x32>
 8002a50:	690b      	ldr	r3, [r1, #16]
 8002a52:	b963      	cbnz	r3, 8002a6e <_svfiprintf_r+0x32>
 8002a54:	2140      	movs	r1, #64	; 0x40
 8002a56:	f000 fafd 	bl	8003054 <_malloc_r>
 8002a5a:	6028      	str	r0, [r5, #0]
 8002a5c:	6128      	str	r0, [r5, #16]
 8002a5e:	b920      	cbnz	r0, 8002a6a <_svfiprintf_r+0x2e>
 8002a60:	230c      	movs	r3, #12
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	f04f 30ff 	mov.w	r0, #4294967295
 8002a68:	e0d1      	b.n	8002c0e <_svfiprintf_r+0x1d2>
 8002a6a:	2340      	movs	r3, #64	; 0x40
 8002a6c:	616b      	str	r3, [r5, #20]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	9309      	str	r3, [sp, #36]	; 0x24
 8002a72:	2320      	movs	r3, #32
 8002a74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a78:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a7c:	2330      	movs	r3, #48	; 0x30
 8002a7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002c28 <_svfiprintf_r+0x1ec>
 8002a82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a86:	f04f 0901 	mov.w	r9, #1
 8002a8a:	4623      	mov	r3, r4
 8002a8c:	469a      	mov	sl, r3
 8002a8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a92:	b10a      	cbz	r2, 8002a98 <_svfiprintf_r+0x5c>
 8002a94:	2a25      	cmp	r2, #37	; 0x25
 8002a96:	d1f9      	bne.n	8002a8c <_svfiprintf_r+0x50>
 8002a98:	ebba 0b04 	subs.w	fp, sl, r4
 8002a9c:	d00b      	beq.n	8002ab6 <_svfiprintf_r+0x7a>
 8002a9e:	465b      	mov	r3, fp
 8002aa0:	4622      	mov	r2, r4
 8002aa2:	4629      	mov	r1, r5
 8002aa4:	4638      	mov	r0, r7
 8002aa6:	f7ff ff6d 	bl	8002984 <__ssputs_r>
 8002aaa:	3001      	adds	r0, #1
 8002aac:	f000 80aa 	beq.w	8002c04 <_svfiprintf_r+0x1c8>
 8002ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ab2:	445a      	add	r2, fp
 8002ab4:	9209      	str	r2, [sp, #36]	; 0x24
 8002ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 80a2 	beq.w	8002c04 <_svfiprintf_r+0x1c8>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002aca:	f10a 0a01 	add.w	sl, sl, #1
 8002ace:	9304      	str	r3, [sp, #16]
 8002ad0:	9307      	str	r3, [sp, #28]
 8002ad2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ad6:	931a      	str	r3, [sp, #104]	; 0x68
 8002ad8:	4654      	mov	r4, sl
 8002ada:	2205      	movs	r2, #5
 8002adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ae0:	4851      	ldr	r0, [pc, #324]	; (8002c28 <_svfiprintf_r+0x1ec>)
 8002ae2:	f7fd fb85 	bl	80001f0 <memchr>
 8002ae6:	9a04      	ldr	r2, [sp, #16]
 8002ae8:	b9d8      	cbnz	r0, 8002b22 <_svfiprintf_r+0xe6>
 8002aea:	06d0      	lsls	r0, r2, #27
 8002aec:	bf44      	itt	mi
 8002aee:	2320      	movmi	r3, #32
 8002af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002af4:	0711      	lsls	r1, r2, #28
 8002af6:	bf44      	itt	mi
 8002af8:	232b      	movmi	r3, #43	; 0x2b
 8002afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002afe:	f89a 3000 	ldrb.w	r3, [sl]
 8002b02:	2b2a      	cmp	r3, #42	; 0x2a
 8002b04:	d015      	beq.n	8002b32 <_svfiprintf_r+0xf6>
 8002b06:	9a07      	ldr	r2, [sp, #28]
 8002b08:	4654      	mov	r4, sl
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f04f 0c0a 	mov.w	ip, #10
 8002b10:	4621      	mov	r1, r4
 8002b12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b16:	3b30      	subs	r3, #48	; 0x30
 8002b18:	2b09      	cmp	r3, #9
 8002b1a:	d94e      	bls.n	8002bba <_svfiprintf_r+0x17e>
 8002b1c:	b1b0      	cbz	r0, 8002b4c <_svfiprintf_r+0x110>
 8002b1e:	9207      	str	r2, [sp, #28]
 8002b20:	e014      	b.n	8002b4c <_svfiprintf_r+0x110>
 8002b22:	eba0 0308 	sub.w	r3, r0, r8
 8002b26:	fa09 f303 	lsl.w	r3, r9, r3
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	9304      	str	r3, [sp, #16]
 8002b2e:	46a2      	mov	sl, r4
 8002b30:	e7d2      	b.n	8002ad8 <_svfiprintf_r+0x9c>
 8002b32:	9b03      	ldr	r3, [sp, #12]
 8002b34:	1d19      	adds	r1, r3, #4
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	9103      	str	r1, [sp, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	bfbb      	ittet	lt
 8002b3e:	425b      	neglt	r3, r3
 8002b40:	f042 0202 	orrlt.w	r2, r2, #2
 8002b44:	9307      	strge	r3, [sp, #28]
 8002b46:	9307      	strlt	r3, [sp, #28]
 8002b48:	bfb8      	it	lt
 8002b4a:	9204      	strlt	r2, [sp, #16]
 8002b4c:	7823      	ldrb	r3, [r4, #0]
 8002b4e:	2b2e      	cmp	r3, #46	; 0x2e
 8002b50:	d10c      	bne.n	8002b6c <_svfiprintf_r+0x130>
 8002b52:	7863      	ldrb	r3, [r4, #1]
 8002b54:	2b2a      	cmp	r3, #42	; 0x2a
 8002b56:	d135      	bne.n	8002bc4 <_svfiprintf_r+0x188>
 8002b58:	9b03      	ldr	r3, [sp, #12]
 8002b5a:	1d1a      	adds	r2, r3, #4
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	9203      	str	r2, [sp, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bfb8      	it	lt
 8002b64:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b68:	3402      	adds	r4, #2
 8002b6a:	9305      	str	r3, [sp, #20]
 8002b6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002c38 <_svfiprintf_r+0x1fc>
 8002b70:	7821      	ldrb	r1, [r4, #0]
 8002b72:	2203      	movs	r2, #3
 8002b74:	4650      	mov	r0, sl
 8002b76:	f7fd fb3b 	bl	80001f0 <memchr>
 8002b7a:	b140      	cbz	r0, 8002b8e <_svfiprintf_r+0x152>
 8002b7c:	2340      	movs	r3, #64	; 0x40
 8002b7e:	eba0 000a 	sub.w	r0, r0, sl
 8002b82:	fa03 f000 	lsl.w	r0, r3, r0
 8002b86:	9b04      	ldr	r3, [sp, #16]
 8002b88:	4303      	orrs	r3, r0
 8002b8a:	3401      	adds	r4, #1
 8002b8c:	9304      	str	r3, [sp, #16]
 8002b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b92:	4826      	ldr	r0, [pc, #152]	; (8002c2c <_svfiprintf_r+0x1f0>)
 8002b94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b98:	2206      	movs	r2, #6
 8002b9a:	f7fd fb29 	bl	80001f0 <memchr>
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d038      	beq.n	8002c14 <_svfiprintf_r+0x1d8>
 8002ba2:	4b23      	ldr	r3, [pc, #140]	; (8002c30 <_svfiprintf_r+0x1f4>)
 8002ba4:	bb1b      	cbnz	r3, 8002bee <_svfiprintf_r+0x1b2>
 8002ba6:	9b03      	ldr	r3, [sp, #12]
 8002ba8:	3307      	adds	r3, #7
 8002baa:	f023 0307 	bic.w	r3, r3, #7
 8002bae:	3308      	adds	r3, #8
 8002bb0:	9303      	str	r3, [sp, #12]
 8002bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bb4:	4433      	add	r3, r6
 8002bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8002bb8:	e767      	b.n	8002a8a <_svfiprintf_r+0x4e>
 8002bba:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bbe:	460c      	mov	r4, r1
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	e7a5      	b.n	8002b10 <_svfiprintf_r+0xd4>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	3401      	adds	r4, #1
 8002bc8:	9305      	str	r3, [sp, #20]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	f04f 0c0a 	mov.w	ip, #10
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bd6:	3a30      	subs	r2, #48	; 0x30
 8002bd8:	2a09      	cmp	r2, #9
 8002bda:	d903      	bls.n	8002be4 <_svfiprintf_r+0x1a8>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0c5      	beq.n	8002b6c <_svfiprintf_r+0x130>
 8002be0:	9105      	str	r1, [sp, #20]
 8002be2:	e7c3      	b.n	8002b6c <_svfiprintf_r+0x130>
 8002be4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002be8:	4604      	mov	r4, r0
 8002bea:	2301      	movs	r3, #1
 8002bec:	e7f0      	b.n	8002bd0 <_svfiprintf_r+0x194>
 8002bee:	ab03      	add	r3, sp, #12
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	462a      	mov	r2, r5
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <_svfiprintf_r+0x1f8>)
 8002bf6:	a904      	add	r1, sp, #16
 8002bf8:	4638      	mov	r0, r7
 8002bfa:	f3af 8000 	nop.w
 8002bfe:	1c42      	adds	r2, r0, #1
 8002c00:	4606      	mov	r6, r0
 8002c02:	d1d6      	bne.n	8002bb2 <_svfiprintf_r+0x176>
 8002c04:	89ab      	ldrh	r3, [r5, #12]
 8002c06:	065b      	lsls	r3, r3, #25
 8002c08:	f53f af2c 	bmi.w	8002a64 <_svfiprintf_r+0x28>
 8002c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c0e:	b01d      	add	sp, #116	; 0x74
 8002c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c14:	ab03      	add	r3, sp, #12
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	462a      	mov	r2, r5
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <_svfiprintf_r+0x1f8>)
 8002c1c:	a904      	add	r1, sp, #16
 8002c1e:	4638      	mov	r0, r7
 8002c20:	f000 f87a 	bl	8002d18 <_printf_i>
 8002c24:	e7eb      	b.n	8002bfe <_svfiprintf_r+0x1c2>
 8002c26:	bf00      	nop
 8002c28:	080031e0 	.word	0x080031e0
 8002c2c:	080031ea 	.word	0x080031ea
 8002c30:	00000000 	.word	0x00000000
 8002c34:	08002985 	.word	0x08002985
 8002c38:	080031e6 	.word	0x080031e6

08002c3c <_printf_common>:
 8002c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c40:	4616      	mov	r6, r2
 8002c42:	4699      	mov	r9, r3
 8002c44:	688a      	ldr	r2, [r1, #8]
 8002c46:	690b      	ldr	r3, [r1, #16]
 8002c48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	bfb8      	it	lt
 8002c50:	4613      	movlt	r3, r2
 8002c52:	6033      	str	r3, [r6, #0]
 8002c54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c58:	4607      	mov	r7, r0
 8002c5a:	460c      	mov	r4, r1
 8002c5c:	b10a      	cbz	r2, 8002c62 <_printf_common+0x26>
 8002c5e:	3301      	adds	r3, #1
 8002c60:	6033      	str	r3, [r6, #0]
 8002c62:	6823      	ldr	r3, [r4, #0]
 8002c64:	0699      	lsls	r1, r3, #26
 8002c66:	bf42      	ittt	mi
 8002c68:	6833      	ldrmi	r3, [r6, #0]
 8002c6a:	3302      	addmi	r3, #2
 8002c6c:	6033      	strmi	r3, [r6, #0]
 8002c6e:	6825      	ldr	r5, [r4, #0]
 8002c70:	f015 0506 	ands.w	r5, r5, #6
 8002c74:	d106      	bne.n	8002c84 <_printf_common+0x48>
 8002c76:	f104 0a19 	add.w	sl, r4, #25
 8002c7a:	68e3      	ldr	r3, [r4, #12]
 8002c7c:	6832      	ldr	r2, [r6, #0]
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	42ab      	cmp	r3, r5
 8002c82:	dc26      	bgt.n	8002cd2 <_printf_common+0x96>
 8002c84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c88:	1e13      	subs	r3, r2, #0
 8002c8a:	6822      	ldr	r2, [r4, #0]
 8002c8c:	bf18      	it	ne
 8002c8e:	2301      	movne	r3, #1
 8002c90:	0692      	lsls	r2, r2, #26
 8002c92:	d42b      	bmi.n	8002cec <_printf_common+0xb0>
 8002c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c98:	4649      	mov	r1, r9
 8002c9a:	4638      	mov	r0, r7
 8002c9c:	47c0      	blx	r8
 8002c9e:	3001      	adds	r0, #1
 8002ca0:	d01e      	beq.n	8002ce0 <_printf_common+0xa4>
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	68e5      	ldr	r5, [r4, #12]
 8002ca6:	6832      	ldr	r2, [r6, #0]
 8002ca8:	f003 0306 	and.w	r3, r3, #6
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	bf08      	it	eq
 8002cb0:	1aad      	subeq	r5, r5, r2
 8002cb2:	68a3      	ldr	r3, [r4, #8]
 8002cb4:	6922      	ldr	r2, [r4, #16]
 8002cb6:	bf0c      	ite	eq
 8002cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cbc:	2500      	movne	r5, #0
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	bfc4      	itt	gt
 8002cc2:	1a9b      	subgt	r3, r3, r2
 8002cc4:	18ed      	addgt	r5, r5, r3
 8002cc6:	2600      	movs	r6, #0
 8002cc8:	341a      	adds	r4, #26
 8002cca:	42b5      	cmp	r5, r6
 8002ccc:	d11a      	bne.n	8002d04 <_printf_common+0xc8>
 8002cce:	2000      	movs	r0, #0
 8002cd0:	e008      	b.n	8002ce4 <_printf_common+0xa8>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	4652      	mov	r2, sl
 8002cd6:	4649      	mov	r1, r9
 8002cd8:	4638      	mov	r0, r7
 8002cda:	47c0      	blx	r8
 8002cdc:	3001      	adds	r0, #1
 8002cde:	d103      	bne.n	8002ce8 <_printf_common+0xac>
 8002ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ce8:	3501      	adds	r5, #1
 8002cea:	e7c6      	b.n	8002c7a <_printf_common+0x3e>
 8002cec:	18e1      	adds	r1, r4, r3
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	2030      	movs	r0, #48	; 0x30
 8002cf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cf6:	4422      	add	r2, r4
 8002cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d00:	3302      	adds	r3, #2
 8002d02:	e7c7      	b.n	8002c94 <_printf_common+0x58>
 8002d04:	2301      	movs	r3, #1
 8002d06:	4622      	mov	r2, r4
 8002d08:	4649      	mov	r1, r9
 8002d0a:	4638      	mov	r0, r7
 8002d0c:	47c0      	blx	r8
 8002d0e:	3001      	adds	r0, #1
 8002d10:	d0e6      	beq.n	8002ce0 <_printf_common+0xa4>
 8002d12:	3601      	adds	r6, #1
 8002d14:	e7d9      	b.n	8002cca <_printf_common+0x8e>
	...

08002d18 <_printf_i>:
 8002d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d1c:	460c      	mov	r4, r1
 8002d1e:	4691      	mov	r9, r2
 8002d20:	7e27      	ldrb	r7, [r4, #24]
 8002d22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002d24:	2f78      	cmp	r7, #120	; 0x78
 8002d26:	4680      	mov	r8, r0
 8002d28:	469a      	mov	sl, r3
 8002d2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d2e:	d807      	bhi.n	8002d40 <_printf_i+0x28>
 8002d30:	2f62      	cmp	r7, #98	; 0x62
 8002d32:	d80a      	bhi.n	8002d4a <_printf_i+0x32>
 8002d34:	2f00      	cmp	r7, #0
 8002d36:	f000 80d8 	beq.w	8002eea <_printf_i+0x1d2>
 8002d3a:	2f58      	cmp	r7, #88	; 0x58
 8002d3c:	f000 80a3 	beq.w	8002e86 <_printf_i+0x16e>
 8002d40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002d44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d48:	e03a      	b.n	8002dc0 <_printf_i+0xa8>
 8002d4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d4e:	2b15      	cmp	r3, #21
 8002d50:	d8f6      	bhi.n	8002d40 <_printf_i+0x28>
 8002d52:	a001      	add	r0, pc, #4	; (adr r0, 8002d58 <_printf_i+0x40>)
 8002d54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002d58:	08002db1 	.word	0x08002db1
 8002d5c:	08002dc5 	.word	0x08002dc5
 8002d60:	08002d41 	.word	0x08002d41
 8002d64:	08002d41 	.word	0x08002d41
 8002d68:	08002d41 	.word	0x08002d41
 8002d6c:	08002d41 	.word	0x08002d41
 8002d70:	08002dc5 	.word	0x08002dc5
 8002d74:	08002d41 	.word	0x08002d41
 8002d78:	08002d41 	.word	0x08002d41
 8002d7c:	08002d41 	.word	0x08002d41
 8002d80:	08002d41 	.word	0x08002d41
 8002d84:	08002ed1 	.word	0x08002ed1
 8002d88:	08002df5 	.word	0x08002df5
 8002d8c:	08002eb3 	.word	0x08002eb3
 8002d90:	08002d41 	.word	0x08002d41
 8002d94:	08002d41 	.word	0x08002d41
 8002d98:	08002ef3 	.word	0x08002ef3
 8002d9c:	08002d41 	.word	0x08002d41
 8002da0:	08002df5 	.word	0x08002df5
 8002da4:	08002d41 	.word	0x08002d41
 8002da8:	08002d41 	.word	0x08002d41
 8002dac:	08002ebb 	.word	0x08002ebb
 8002db0:	680b      	ldr	r3, [r1, #0]
 8002db2:	1d1a      	adds	r2, r3, #4
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	600a      	str	r2, [r1, #0]
 8002db8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0a3      	b.n	8002f0c <_printf_i+0x1f4>
 8002dc4:	6825      	ldr	r5, [r4, #0]
 8002dc6:	6808      	ldr	r0, [r1, #0]
 8002dc8:	062e      	lsls	r6, r5, #24
 8002dca:	f100 0304 	add.w	r3, r0, #4
 8002dce:	d50a      	bpl.n	8002de6 <_printf_i+0xce>
 8002dd0:	6805      	ldr	r5, [r0, #0]
 8002dd2:	600b      	str	r3, [r1, #0]
 8002dd4:	2d00      	cmp	r5, #0
 8002dd6:	da03      	bge.n	8002de0 <_printf_i+0xc8>
 8002dd8:	232d      	movs	r3, #45	; 0x2d
 8002dda:	426d      	negs	r5, r5
 8002ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002de0:	485e      	ldr	r0, [pc, #376]	; (8002f5c <_printf_i+0x244>)
 8002de2:	230a      	movs	r3, #10
 8002de4:	e019      	b.n	8002e1a <_printf_i+0x102>
 8002de6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002dea:	6805      	ldr	r5, [r0, #0]
 8002dec:	600b      	str	r3, [r1, #0]
 8002dee:	bf18      	it	ne
 8002df0:	b22d      	sxthne	r5, r5
 8002df2:	e7ef      	b.n	8002dd4 <_printf_i+0xbc>
 8002df4:	680b      	ldr	r3, [r1, #0]
 8002df6:	6825      	ldr	r5, [r4, #0]
 8002df8:	1d18      	adds	r0, r3, #4
 8002dfa:	6008      	str	r0, [r1, #0]
 8002dfc:	0628      	lsls	r0, r5, #24
 8002dfe:	d501      	bpl.n	8002e04 <_printf_i+0xec>
 8002e00:	681d      	ldr	r5, [r3, #0]
 8002e02:	e002      	b.n	8002e0a <_printf_i+0xf2>
 8002e04:	0669      	lsls	r1, r5, #25
 8002e06:	d5fb      	bpl.n	8002e00 <_printf_i+0xe8>
 8002e08:	881d      	ldrh	r5, [r3, #0]
 8002e0a:	4854      	ldr	r0, [pc, #336]	; (8002f5c <_printf_i+0x244>)
 8002e0c:	2f6f      	cmp	r7, #111	; 0x6f
 8002e0e:	bf0c      	ite	eq
 8002e10:	2308      	moveq	r3, #8
 8002e12:	230a      	movne	r3, #10
 8002e14:	2100      	movs	r1, #0
 8002e16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e1a:	6866      	ldr	r6, [r4, #4]
 8002e1c:	60a6      	str	r6, [r4, #8]
 8002e1e:	2e00      	cmp	r6, #0
 8002e20:	bfa2      	ittt	ge
 8002e22:	6821      	ldrge	r1, [r4, #0]
 8002e24:	f021 0104 	bicge.w	r1, r1, #4
 8002e28:	6021      	strge	r1, [r4, #0]
 8002e2a:	b90d      	cbnz	r5, 8002e30 <_printf_i+0x118>
 8002e2c:	2e00      	cmp	r6, #0
 8002e2e:	d04d      	beq.n	8002ecc <_printf_i+0x1b4>
 8002e30:	4616      	mov	r6, r2
 8002e32:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e36:	fb03 5711 	mls	r7, r3, r1, r5
 8002e3a:	5dc7      	ldrb	r7, [r0, r7]
 8002e3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e40:	462f      	mov	r7, r5
 8002e42:	42bb      	cmp	r3, r7
 8002e44:	460d      	mov	r5, r1
 8002e46:	d9f4      	bls.n	8002e32 <_printf_i+0x11a>
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d10b      	bne.n	8002e64 <_printf_i+0x14c>
 8002e4c:	6823      	ldr	r3, [r4, #0]
 8002e4e:	07df      	lsls	r7, r3, #31
 8002e50:	d508      	bpl.n	8002e64 <_printf_i+0x14c>
 8002e52:	6923      	ldr	r3, [r4, #16]
 8002e54:	6861      	ldr	r1, [r4, #4]
 8002e56:	4299      	cmp	r1, r3
 8002e58:	bfde      	ittt	le
 8002e5a:	2330      	movle	r3, #48	; 0x30
 8002e5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e64:	1b92      	subs	r2, r2, r6
 8002e66:	6122      	str	r2, [r4, #16]
 8002e68:	f8cd a000 	str.w	sl, [sp]
 8002e6c:	464b      	mov	r3, r9
 8002e6e:	aa03      	add	r2, sp, #12
 8002e70:	4621      	mov	r1, r4
 8002e72:	4640      	mov	r0, r8
 8002e74:	f7ff fee2 	bl	8002c3c <_printf_common>
 8002e78:	3001      	adds	r0, #1
 8002e7a:	d14c      	bne.n	8002f16 <_printf_i+0x1fe>
 8002e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e80:	b004      	add	sp, #16
 8002e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e86:	4835      	ldr	r0, [pc, #212]	; (8002f5c <_printf_i+0x244>)
 8002e88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	680e      	ldr	r6, [r1, #0]
 8002e90:	061f      	lsls	r7, r3, #24
 8002e92:	f856 5b04 	ldr.w	r5, [r6], #4
 8002e96:	600e      	str	r6, [r1, #0]
 8002e98:	d514      	bpl.n	8002ec4 <_printf_i+0x1ac>
 8002e9a:	07d9      	lsls	r1, r3, #31
 8002e9c:	bf44      	itt	mi
 8002e9e:	f043 0320 	orrmi.w	r3, r3, #32
 8002ea2:	6023      	strmi	r3, [r4, #0]
 8002ea4:	b91d      	cbnz	r5, 8002eae <_printf_i+0x196>
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	f023 0320 	bic.w	r3, r3, #32
 8002eac:	6023      	str	r3, [r4, #0]
 8002eae:	2310      	movs	r3, #16
 8002eb0:	e7b0      	b.n	8002e14 <_printf_i+0xfc>
 8002eb2:	6823      	ldr	r3, [r4, #0]
 8002eb4:	f043 0320 	orr.w	r3, r3, #32
 8002eb8:	6023      	str	r3, [r4, #0]
 8002eba:	2378      	movs	r3, #120	; 0x78
 8002ebc:	4828      	ldr	r0, [pc, #160]	; (8002f60 <_printf_i+0x248>)
 8002ebe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ec2:	e7e3      	b.n	8002e8c <_printf_i+0x174>
 8002ec4:	065e      	lsls	r6, r3, #25
 8002ec6:	bf48      	it	mi
 8002ec8:	b2ad      	uxthmi	r5, r5
 8002eca:	e7e6      	b.n	8002e9a <_printf_i+0x182>
 8002ecc:	4616      	mov	r6, r2
 8002ece:	e7bb      	b.n	8002e48 <_printf_i+0x130>
 8002ed0:	680b      	ldr	r3, [r1, #0]
 8002ed2:	6826      	ldr	r6, [r4, #0]
 8002ed4:	6960      	ldr	r0, [r4, #20]
 8002ed6:	1d1d      	adds	r5, r3, #4
 8002ed8:	600d      	str	r5, [r1, #0]
 8002eda:	0635      	lsls	r5, r6, #24
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	d501      	bpl.n	8002ee4 <_printf_i+0x1cc>
 8002ee0:	6018      	str	r0, [r3, #0]
 8002ee2:	e002      	b.n	8002eea <_printf_i+0x1d2>
 8002ee4:	0671      	lsls	r1, r6, #25
 8002ee6:	d5fb      	bpl.n	8002ee0 <_printf_i+0x1c8>
 8002ee8:	8018      	strh	r0, [r3, #0]
 8002eea:	2300      	movs	r3, #0
 8002eec:	6123      	str	r3, [r4, #16]
 8002eee:	4616      	mov	r6, r2
 8002ef0:	e7ba      	b.n	8002e68 <_printf_i+0x150>
 8002ef2:	680b      	ldr	r3, [r1, #0]
 8002ef4:	1d1a      	adds	r2, r3, #4
 8002ef6:	600a      	str	r2, [r1, #0]
 8002ef8:	681e      	ldr	r6, [r3, #0]
 8002efa:	6862      	ldr	r2, [r4, #4]
 8002efc:	2100      	movs	r1, #0
 8002efe:	4630      	mov	r0, r6
 8002f00:	f7fd f976 	bl	80001f0 <memchr>
 8002f04:	b108      	cbz	r0, 8002f0a <_printf_i+0x1f2>
 8002f06:	1b80      	subs	r0, r0, r6
 8002f08:	6060      	str	r0, [r4, #4]
 8002f0a:	6863      	ldr	r3, [r4, #4]
 8002f0c:	6123      	str	r3, [r4, #16]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f14:	e7a8      	b.n	8002e68 <_printf_i+0x150>
 8002f16:	6923      	ldr	r3, [r4, #16]
 8002f18:	4632      	mov	r2, r6
 8002f1a:	4649      	mov	r1, r9
 8002f1c:	4640      	mov	r0, r8
 8002f1e:	47d0      	blx	sl
 8002f20:	3001      	adds	r0, #1
 8002f22:	d0ab      	beq.n	8002e7c <_printf_i+0x164>
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	079b      	lsls	r3, r3, #30
 8002f28:	d413      	bmi.n	8002f52 <_printf_i+0x23a>
 8002f2a:	68e0      	ldr	r0, [r4, #12]
 8002f2c:	9b03      	ldr	r3, [sp, #12]
 8002f2e:	4298      	cmp	r0, r3
 8002f30:	bfb8      	it	lt
 8002f32:	4618      	movlt	r0, r3
 8002f34:	e7a4      	b.n	8002e80 <_printf_i+0x168>
 8002f36:	2301      	movs	r3, #1
 8002f38:	4632      	mov	r2, r6
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	4640      	mov	r0, r8
 8002f3e:	47d0      	blx	sl
 8002f40:	3001      	adds	r0, #1
 8002f42:	d09b      	beq.n	8002e7c <_printf_i+0x164>
 8002f44:	3501      	adds	r5, #1
 8002f46:	68e3      	ldr	r3, [r4, #12]
 8002f48:	9903      	ldr	r1, [sp, #12]
 8002f4a:	1a5b      	subs	r3, r3, r1
 8002f4c:	42ab      	cmp	r3, r5
 8002f4e:	dcf2      	bgt.n	8002f36 <_printf_i+0x21e>
 8002f50:	e7eb      	b.n	8002f2a <_printf_i+0x212>
 8002f52:	2500      	movs	r5, #0
 8002f54:	f104 0619 	add.w	r6, r4, #25
 8002f58:	e7f5      	b.n	8002f46 <_printf_i+0x22e>
 8002f5a:	bf00      	nop
 8002f5c:	080031f1 	.word	0x080031f1
 8002f60:	08003202 	.word	0x08003202

08002f64 <memcpy>:
 8002f64:	440a      	add	r2, r1
 8002f66:	4291      	cmp	r1, r2
 8002f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f6c:	d100      	bne.n	8002f70 <memcpy+0xc>
 8002f6e:	4770      	bx	lr
 8002f70:	b510      	push	{r4, lr}
 8002f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f7a:	4291      	cmp	r1, r2
 8002f7c:	d1f9      	bne.n	8002f72 <memcpy+0xe>
 8002f7e:	bd10      	pop	{r4, pc}

08002f80 <memmove>:
 8002f80:	4288      	cmp	r0, r1
 8002f82:	b510      	push	{r4, lr}
 8002f84:	eb01 0402 	add.w	r4, r1, r2
 8002f88:	d902      	bls.n	8002f90 <memmove+0x10>
 8002f8a:	4284      	cmp	r4, r0
 8002f8c:	4623      	mov	r3, r4
 8002f8e:	d807      	bhi.n	8002fa0 <memmove+0x20>
 8002f90:	1e43      	subs	r3, r0, #1
 8002f92:	42a1      	cmp	r1, r4
 8002f94:	d008      	beq.n	8002fa8 <memmove+0x28>
 8002f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f9e:	e7f8      	b.n	8002f92 <memmove+0x12>
 8002fa0:	4402      	add	r2, r0
 8002fa2:	4601      	mov	r1, r0
 8002fa4:	428a      	cmp	r2, r1
 8002fa6:	d100      	bne.n	8002faa <memmove+0x2a>
 8002fa8:	bd10      	pop	{r4, pc}
 8002faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002fb2:	e7f7      	b.n	8002fa4 <memmove+0x24>

08002fb4 <_free_r>:
 8002fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fb6:	2900      	cmp	r1, #0
 8002fb8:	d048      	beq.n	800304c <_free_r+0x98>
 8002fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fbe:	9001      	str	r0, [sp, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f1a1 0404 	sub.w	r4, r1, #4
 8002fc6:	bfb8      	it	lt
 8002fc8:	18e4      	addlt	r4, r4, r3
 8002fca:	f000 f8d3 	bl	8003174 <__malloc_lock>
 8002fce:	4a20      	ldr	r2, [pc, #128]	; (8003050 <_free_r+0x9c>)
 8002fd0:	9801      	ldr	r0, [sp, #4]
 8002fd2:	6813      	ldr	r3, [r2, #0]
 8002fd4:	4615      	mov	r5, r2
 8002fd6:	b933      	cbnz	r3, 8002fe6 <_free_r+0x32>
 8002fd8:	6063      	str	r3, [r4, #4]
 8002fda:	6014      	str	r4, [r2, #0]
 8002fdc:	b003      	add	sp, #12
 8002fde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fe2:	f000 b8cd 	b.w	8003180 <__malloc_unlock>
 8002fe6:	42a3      	cmp	r3, r4
 8002fe8:	d90b      	bls.n	8003002 <_free_r+0x4e>
 8002fea:	6821      	ldr	r1, [r4, #0]
 8002fec:	1862      	adds	r2, r4, r1
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	bf04      	itt	eq
 8002ff2:	681a      	ldreq	r2, [r3, #0]
 8002ff4:	685b      	ldreq	r3, [r3, #4]
 8002ff6:	6063      	str	r3, [r4, #4]
 8002ff8:	bf04      	itt	eq
 8002ffa:	1852      	addeq	r2, r2, r1
 8002ffc:	6022      	streq	r2, [r4, #0]
 8002ffe:	602c      	str	r4, [r5, #0]
 8003000:	e7ec      	b.n	8002fdc <_free_r+0x28>
 8003002:	461a      	mov	r2, r3
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	b10b      	cbz	r3, 800300c <_free_r+0x58>
 8003008:	42a3      	cmp	r3, r4
 800300a:	d9fa      	bls.n	8003002 <_free_r+0x4e>
 800300c:	6811      	ldr	r1, [r2, #0]
 800300e:	1855      	adds	r5, r2, r1
 8003010:	42a5      	cmp	r5, r4
 8003012:	d10b      	bne.n	800302c <_free_r+0x78>
 8003014:	6824      	ldr	r4, [r4, #0]
 8003016:	4421      	add	r1, r4
 8003018:	1854      	adds	r4, r2, r1
 800301a:	42a3      	cmp	r3, r4
 800301c:	6011      	str	r1, [r2, #0]
 800301e:	d1dd      	bne.n	8002fdc <_free_r+0x28>
 8003020:	681c      	ldr	r4, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	6053      	str	r3, [r2, #4]
 8003026:	4421      	add	r1, r4
 8003028:	6011      	str	r1, [r2, #0]
 800302a:	e7d7      	b.n	8002fdc <_free_r+0x28>
 800302c:	d902      	bls.n	8003034 <_free_r+0x80>
 800302e:	230c      	movs	r3, #12
 8003030:	6003      	str	r3, [r0, #0]
 8003032:	e7d3      	b.n	8002fdc <_free_r+0x28>
 8003034:	6825      	ldr	r5, [r4, #0]
 8003036:	1961      	adds	r1, r4, r5
 8003038:	428b      	cmp	r3, r1
 800303a:	bf04      	itt	eq
 800303c:	6819      	ldreq	r1, [r3, #0]
 800303e:	685b      	ldreq	r3, [r3, #4]
 8003040:	6063      	str	r3, [r4, #4]
 8003042:	bf04      	itt	eq
 8003044:	1949      	addeq	r1, r1, r5
 8003046:	6021      	streq	r1, [r4, #0]
 8003048:	6054      	str	r4, [r2, #4]
 800304a:	e7c7      	b.n	8002fdc <_free_r+0x28>
 800304c:	b003      	add	sp, #12
 800304e:	bd30      	pop	{r4, r5, pc}
 8003050:	20000090 	.word	0x20000090

08003054 <_malloc_r>:
 8003054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003056:	1ccd      	adds	r5, r1, #3
 8003058:	f025 0503 	bic.w	r5, r5, #3
 800305c:	3508      	adds	r5, #8
 800305e:	2d0c      	cmp	r5, #12
 8003060:	bf38      	it	cc
 8003062:	250c      	movcc	r5, #12
 8003064:	2d00      	cmp	r5, #0
 8003066:	4606      	mov	r6, r0
 8003068:	db01      	blt.n	800306e <_malloc_r+0x1a>
 800306a:	42a9      	cmp	r1, r5
 800306c:	d903      	bls.n	8003076 <_malloc_r+0x22>
 800306e:	230c      	movs	r3, #12
 8003070:	6033      	str	r3, [r6, #0]
 8003072:	2000      	movs	r0, #0
 8003074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003076:	f000 f87d 	bl	8003174 <__malloc_lock>
 800307a:	4921      	ldr	r1, [pc, #132]	; (8003100 <_malloc_r+0xac>)
 800307c:	680a      	ldr	r2, [r1, #0]
 800307e:	4614      	mov	r4, r2
 8003080:	b99c      	cbnz	r4, 80030aa <_malloc_r+0x56>
 8003082:	4f20      	ldr	r7, [pc, #128]	; (8003104 <_malloc_r+0xb0>)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	b923      	cbnz	r3, 8003092 <_malloc_r+0x3e>
 8003088:	4621      	mov	r1, r4
 800308a:	4630      	mov	r0, r6
 800308c:	f000 f862 	bl	8003154 <_sbrk_r>
 8003090:	6038      	str	r0, [r7, #0]
 8003092:	4629      	mov	r1, r5
 8003094:	4630      	mov	r0, r6
 8003096:	f000 f85d 	bl	8003154 <_sbrk_r>
 800309a:	1c43      	adds	r3, r0, #1
 800309c:	d123      	bne.n	80030e6 <_malloc_r+0x92>
 800309e:	230c      	movs	r3, #12
 80030a0:	6033      	str	r3, [r6, #0]
 80030a2:	4630      	mov	r0, r6
 80030a4:	f000 f86c 	bl	8003180 <__malloc_unlock>
 80030a8:	e7e3      	b.n	8003072 <_malloc_r+0x1e>
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	1b5b      	subs	r3, r3, r5
 80030ae:	d417      	bmi.n	80030e0 <_malloc_r+0x8c>
 80030b0:	2b0b      	cmp	r3, #11
 80030b2:	d903      	bls.n	80030bc <_malloc_r+0x68>
 80030b4:	6023      	str	r3, [r4, #0]
 80030b6:	441c      	add	r4, r3
 80030b8:	6025      	str	r5, [r4, #0]
 80030ba:	e004      	b.n	80030c6 <_malloc_r+0x72>
 80030bc:	6863      	ldr	r3, [r4, #4]
 80030be:	42a2      	cmp	r2, r4
 80030c0:	bf0c      	ite	eq
 80030c2:	600b      	streq	r3, [r1, #0]
 80030c4:	6053      	strne	r3, [r2, #4]
 80030c6:	4630      	mov	r0, r6
 80030c8:	f000 f85a 	bl	8003180 <__malloc_unlock>
 80030cc:	f104 000b 	add.w	r0, r4, #11
 80030d0:	1d23      	adds	r3, r4, #4
 80030d2:	f020 0007 	bic.w	r0, r0, #7
 80030d6:	1ac2      	subs	r2, r0, r3
 80030d8:	d0cc      	beq.n	8003074 <_malloc_r+0x20>
 80030da:	1a1b      	subs	r3, r3, r0
 80030dc:	50a3      	str	r3, [r4, r2]
 80030de:	e7c9      	b.n	8003074 <_malloc_r+0x20>
 80030e0:	4622      	mov	r2, r4
 80030e2:	6864      	ldr	r4, [r4, #4]
 80030e4:	e7cc      	b.n	8003080 <_malloc_r+0x2c>
 80030e6:	1cc4      	adds	r4, r0, #3
 80030e8:	f024 0403 	bic.w	r4, r4, #3
 80030ec:	42a0      	cmp	r0, r4
 80030ee:	d0e3      	beq.n	80030b8 <_malloc_r+0x64>
 80030f0:	1a21      	subs	r1, r4, r0
 80030f2:	4630      	mov	r0, r6
 80030f4:	f000 f82e 	bl	8003154 <_sbrk_r>
 80030f8:	3001      	adds	r0, #1
 80030fa:	d1dd      	bne.n	80030b8 <_malloc_r+0x64>
 80030fc:	e7cf      	b.n	800309e <_malloc_r+0x4a>
 80030fe:	bf00      	nop
 8003100:	20000090 	.word	0x20000090
 8003104:	20000094 	.word	0x20000094

08003108 <_realloc_r>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	4607      	mov	r7, r0
 800310c:	4614      	mov	r4, r2
 800310e:	460e      	mov	r6, r1
 8003110:	b921      	cbnz	r1, 800311c <_realloc_r+0x14>
 8003112:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003116:	4611      	mov	r1, r2
 8003118:	f7ff bf9c 	b.w	8003054 <_malloc_r>
 800311c:	b922      	cbnz	r2, 8003128 <_realloc_r+0x20>
 800311e:	f7ff ff49 	bl	8002fb4 <_free_r>
 8003122:	4625      	mov	r5, r4
 8003124:	4628      	mov	r0, r5
 8003126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003128:	f000 f830 	bl	800318c <_malloc_usable_size_r>
 800312c:	42a0      	cmp	r0, r4
 800312e:	d20f      	bcs.n	8003150 <_realloc_r+0x48>
 8003130:	4621      	mov	r1, r4
 8003132:	4638      	mov	r0, r7
 8003134:	f7ff ff8e 	bl	8003054 <_malloc_r>
 8003138:	4605      	mov	r5, r0
 800313a:	2800      	cmp	r0, #0
 800313c:	d0f2      	beq.n	8003124 <_realloc_r+0x1c>
 800313e:	4631      	mov	r1, r6
 8003140:	4622      	mov	r2, r4
 8003142:	f7ff ff0f 	bl	8002f64 <memcpy>
 8003146:	4631      	mov	r1, r6
 8003148:	4638      	mov	r0, r7
 800314a:	f7ff ff33 	bl	8002fb4 <_free_r>
 800314e:	e7e9      	b.n	8003124 <_realloc_r+0x1c>
 8003150:	4635      	mov	r5, r6
 8003152:	e7e7      	b.n	8003124 <_realloc_r+0x1c>

08003154 <_sbrk_r>:
 8003154:	b538      	push	{r3, r4, r5, lr}
 8003156:	4d06      	ldr	r5, [pc, #24]	; (8003170 <_sbrk_r+0x1c>)
 8003158:	2300      	movs	r3, #0
 800315a:	4604      	mov	r4, r0
 800315c:	4608      	mov	r0, r1
 800315e:	602b      	str	r3, [r5, #0]
 8003160:	f7fd fc54 	bl	8000a0c <_sbrk>
 8003164:	1c43      	adds	r3, r0, #1
 8003166:	d102      	bne.n	800316e <_sbrk_r+0x1a>
 8003168:	682b      	ldr	r3, [r5, #0]
 800316a:	b103      	cbz	r3, 800316e <_sbrk_r+0x1a>
 800316c:	6023      	str	r3, [r4, #0]
 800316e:	bd38      	pop	{r3, r4, r5, pc}
 8003170:	20000124 	.word	0x20000124

08003174 <__malloc_lock>:
 8003174:	4801      	ldr	r0, [pc, #4]	; (800317c <__malloc_lock+0x8>)
 8003176:	f000 b811 	b.w	800319c <__retarget_lock_acquire_recursive>
 800317a:	bf00      	nop
 800317c:	2000012c 	.word	0x2000012c

08003180 <__malloc_unlock>:
 8003180:	4801      	ldr	r0, [pc, #4]	; (8003188 <__malloc_unlock+0x8>)
 8003182:	f000 b80c 	b.w	800319e <__retarget_lock_release_recursive>
 8003186:	bf00      	nop
 8003188:	2000012c 	.word	0x2000012c

0800318c <_malloc_usable_size_r>:
 800318c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003190:	1f18      	subs	r0, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	bfbc      	itt	lt
 8003196:	580b      	ldrlt	r3, [r1, r0]
 8003198:	18c0      	addlt	r0, r0, r3
 800319a:	4770      	bx	lr

0800319c <__retarget_lock_acquire_recursive>:
 800319c:	4770      	bx	lr

0800319e <__retarget_lock_release_recursive>:
 800319e:	4770      	bx	lr

080031a0 <_init>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	bf00      	nop
 80031a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a6:	bc08      	pop	{r3}
 80031a8:	469e      	mov	lr, r3
 80031aa:	4770      	bx	lr

080031ac <_fini>:
 80031ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ae:	bf00      	nop
 80031b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b2:	bc08      	pop	{r3}
 80031b4:	469e      	mov	lr, r3
 80031b6:	4770      	bx	lr
