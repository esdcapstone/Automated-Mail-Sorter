
Stepper_Motor_Interfacing_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005158  08005158  00015158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051ec  080051ec  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080051ec  080051ec  000151ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051f4  080051f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051f4  080051f4  000151f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051f8  080051f8  000151f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080051fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000010  0800520c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  0800520c  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f80e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cab  00000000  00000000  0002f84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00031500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00032180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000161c9  00000000  00000000  00032d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd59  00000000  00000000  00048f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d6b3  00000000  00000000  00056c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e433d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035ec  00000000  00000000  000e4390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005140 	.word	0x08005140

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08005140 	.word	0x08005140

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b96e 	b.w	8000cb8 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9d08      	ldr	r5, [sp, #32]
 80009fa:	4604      	mov	r4, r0
 80009fc:	468c      	mov	ip, r1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f040 8083 	bne.w	8000b0a <__udivmoddi4+0x116>
 8000a04:	428a      	cmp	r2, r1
 8000a06:	4617      	mov	r7, r2
 8000a08:	d947      	bls.n	8000a9a <__udivmoddi4+0xa6>
 8000a0a:	fab2 f282 	clz	r2, r2
 8000a0e:	b142      	cbz	r2, 8000a22 <__udivmoddi4+0x2e>
 8000a10:	f1c2 0020 	rsb	r0, r2, #32
 8000a14:	fa24 f000 	lsr.w	r0, r4, r0
 8000a18:	4091      	lsls	r1, r2
 8000a1a:	4097      	lsls	r7, r2
 8000a1c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a20:	4094      	lsls	r4, r2
 8000a22:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a26:	0c23      	lsrs	r3, r4, #16
 8000a28:	fbbc f6f8 	udiv	r6, ip, r8
 8000a2c:	fa1f fe87 	uxth.w	lr, r7
 8000a30:	fb08 c116 	mls	r1, r8, r6, ip
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f10e 	mul.w	r1, r6, lr
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d909      	bls.n	8000a54 <__udivmoddi4+0x60>
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a46:	f080 8119 	bcs.w	8000c7c <__udivmoddi4+0x288>
 8000a4a:	4299      	cmp	r1, r3
 8000a4c:	f240 8116 	bls.w	8000c7c <__udivmoddi4+0x288>
 8000a50:	3e02      	subs	r6, #2
 8000a52:	443b      	add	r3, r7
 8000a54:	1a5b      	subs	r3, r3, r1
 8000a56:	b2a4      	uxth	r4, r4
 8000a58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a5c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a68:	45a6      	cmp	lr, r4
 8000a6a:	d909      	bls.n	8000a80 <__udivmoddi4+0x8c>
 8000a6c:	193c      	adds	r4, r7, r4
 8000a6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a72:	f080 8105 	bcs.w	8000c80 <__udivmoddi4+0x28c>
 8000a76:	45a6      	cmp	lr, r4
 8000a78:	f240 8102 	bls.w	8000c80 <__udivmoddi4+0x28c>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	443c      	add	r4, r7
 8000a80:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a84:	eba4 040e 	sub.w	r4, r4, lr
 8000a88:	2600      	movs	r6, #0
 8000a8a:	b11d      	cbz	r5, 8000a94 <__udivmoddi4+0xa0>
 8000a8c:	40d4      	lsrs	r4, r2
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e9c5 4300 	strd	r4, r3, [r5]
 8000a94:	4631      	mov	r1, r6
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	b902      	cbnz	r2, 8000a9e <__udivmoddi4+0xaa>
 8000a9c:	deff      	udf	#255	; 0xff
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	2a00      	cmp	r2, #0
 8000aa4:	d150      	bne.n	8000b48 <__udivmoddi4+0x154>
 8000aa6:	1bcb      	subs	r3, r1, r7
 8000aa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aac:	fa1f f887 	uxth.w	r8, r7
 8000ab0:	2601      	movs	r6, #1
 8000ab2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ab6:	0c21      	lsrs	r1, r4, #16
 8000ab8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000abc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	d907      	bls.n	8000ad8 <__udivmoddi4+0xe4>
 8000ac8:	1879      	adds	r1, r7, r1
 8000aca:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ace:	d202      	bcs.n	8000ad6 <__udivmoddi4+0xe2>
 8000ad0:	428b      	cmp	r3, r1
 8000ad2:	f200 80e9 	bhi.w	8000ca8 <__udivmoddi4+0x2b4>
 8000ad6:	4684      	mov	ip, r0
 8000ad8:	1ac9      	subs	r1, r1, r3
 8000ada:	b2a3      	uxth	r3, r4
 8000adc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ae4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ae8:	fb08 f800 	mul.w	r8, r8, r0
 8000aec:	45a0      	cmp	r8, r4
 8000aee:	d907      	bls.n	8000b00 <__udivmoddi4+0x10c>
 8000af0:	193c      	adds	r4, r7, r4
 8000af2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x10a>
 8000af8:	45a0      	cmp	r8, r4
 8000afa:	f200 80d9 	bhi.w	8000cb0 <__udivmoddi4+0x2bc>
 8000afe:	4618      	mov	r0, r3
 8000b00:	eba4 0408 	sub.w	r4, r4, r8
 8000b04:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b08:	e7bf      	b.n	8000a8a <__udivmoddi4+0x96>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d909      	bls.n	8000b22 <__udivmoddi4+0x12e>
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	f000 80b1 	beq.w	8000c76 <__udivmoddi4+0x282>
 8000b14:	2600      	movs	r6, #0
 8000b16:	e9c5 0100 	strd	r0, r1, [r5]
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	4631      	mov	r1, r6
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	fab3 f683 	clz	r6, r3
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	d14a      	bne.n	8000bc0 <__udivmoddi4+0x1cc>
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d302      	bcc.n	8000b34 <__udivmoddi4+0x140>
 8000b2e:	4282      	cmp	r2, r0
 8000b30:	f200 80b8 	bhi.w	8000ca4 <__udivmoddi4+0x2b0>
 8000b34:	1a84      	subs	r4, r0, r2
 8000b36:	eb61 0103 	sbc.w	r1, r1, r3
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	468c      	mov	ip, r1
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	d0a8      	beq.n	8000a94 <__udivmoddi4+0xa0>
 8000b42:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b46:	e7a5      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000b48:	f1c2 0320 	rsb	r3, r2, #32
 8000b4c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b50:	4097      	lsls	r7, r2
 8000b52:	fa01 f002 	lsl.w	r0, r1, r2
 8000b56:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b5a:	40d9      	lsrs	r1, r3
 8000b5c:	4330      	orrs	r0, r6
 8000b5e:	0c03      	lsrs	r3, r0, #16
 8000b60:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b64:	fa1f f887 	uxth.w	r8, r7
 8000b68:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b70:	fb06 f108 	mul.w	r1, r6, r8
 8000b74:	4299      	cmp	r1, r3
 8000b76:	fa04 f402 	lsl.w	r4, r4, r2
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x19c>
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b82:	f080 808d 	bcs.w	8000ca0 <__udivmoddi4+0x2ac>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 808a 	bls.w	8000ca0 <__udivmoddi4+0x2ac>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	443b      	add	r3, r7
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b281      	uxth	r1, r0
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba0:	fb00 f308 	mul.w	r3, r0, r8
 8000ba4:	428b      	cmp	r3, r1
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x1c4>
 8000ba8:	1879      	adds	r1, r7, r1
 8000baa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bae:	d273      	bcs.n	8000c98 <__udivmoddi4+0x2a4>
 8000bb0:	428b      	cmp	r3, r1
 8000bb2:	d971      	bls.n	8000c98 <__udivmoddi4+0x2a4>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	4439      	add	r1, r7
 8000bb8:	1acb      	subs	r3, r1, r3
 8000bba:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bbe:	e778      	b.n	8000ab2 <__udivmoddi4+0xbe>
 8000bc0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bc4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bc8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bcc:	431c      	orrs	r4, r3
 8000bce:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bd2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bd6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bda:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bde:	431f      	orrs	r7, r3
 8000be0:	0c3b      	lsrs	r3, r7, #16
 8000be2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000be6:	fa1f f884 	uxth.w	r8, r4
 8000bea:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bee:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bf2:	fb09 fa08 	mul.w	sl, r9, r8
 8000bf6:	458a      	cmp	sl, r1
 8000bf8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bfc:	fa00 f306 	lsl.w	r3, r0, r6
 8000c00:	d908      	bls.n	8000c14 <__udivmoddi4+0x220>
 8000c02:	1861      	adds	r1, r4, r1
 8000c04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c08:	d248      	bcs.n	8000c9c <__udivmoddi4+0x2a8>
 8000c0a:	458a      	cmp	sl, r1
 8000c0c:	d946      	bls.n	8000c9c <__udivmoddi4+0x2a8>
 8000c0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c12:	4421      	add	r1, r4
 8000c14:	eba1 010a 	sub.w	r1, r1, sl
 8000c18:	b2bf      	uxth	r7, r7
 8000c1a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c1e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c22:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c26:	fb00 f808 	mul.w	r8, r0, r8
 8000c2a:	45b8      	cmp	r8, r7
 8000c2c:	d907      	bls.n	8000c3e <__udivmoddi4+0x24a>
 8000c2e:	19e7      	adds	r7, r4, r7
 8000c30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c34:	d22e      	bcs.n	8000c94 <__udivmoddi4+0x2a0>
 8000c36:	45b8      	cmp	r8, r7
 8000c38:	d92c      	bls.n	8000c94 <__udivmoddi4+0x2a0>
 8000c3a:	3802      	subs	r0, #2
 8000c3c:	4427      	add	r7, r4
 8000c3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c42:	eba7 0708 	sub.w	r7, r7, r8
 8000c46:	fba0 8902 	umull	r8, r9, r0, r2
 8000c4a:	454f      	cmp	r7, r9
 8000c4c:	46c6      	mov	lr, r8
 8000c4e:	4649      	mov	r1, r9
 8000c50:	d31a      	bcc.n	8000c88 <__udivmoddi4+0x294>
 8000c52:	d017      	beq.n	8000c84 <__udivmoddi4+0x290>
 8000c54:	b15d      	cbz	r5, 8000c6e <__udivmoddi4+0x27a>
 8000c56:	ebb3 020e 	subs.w	r2, r3, lr
 8000c5a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c5e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c62:	40f2      	lsrs	r2, r6
 8000c64:	ea4c 0202 	orr.w	r2, ip, r2
 8000c68:	40f7      	lsrs	r7, r6
 8000c6a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c6e:	2600      	movs	r6, #0
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	462e      	mov	r6, r5
 8000c78:	4628      	mov	r0, r5
 8000c7a:	e70b      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	e6e9      	b.n	8000a54 <__udivmoddi4+0x60>
 8000c80:	4618      	mov	r0, r3
 8000c82:	e6fd      	b.n	8000a80 <__udivmoddi4+0x8c>
 8000c84:	4543      	cmp	r3, r8
 8000c86:	d2e5      	bcs.n	8000c54 <__udivmoddi4+0x260>
 8000c88:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c8c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c90:	3801      	subs	r0, #1
 8000c92:	e7df      	b.n	8000c54 <__udivmoddi4+0x260>
 8000c94:	4608      	mov	r0, r1
 8000c96:	e7d2      	b.n	8000c3e <__udivmoddi4+0x24a>
 8000c98:	4660      	mov	r0, ip
 8000c9a:	e78d      	b.n	8000bb8 <__udivmoddi4+0x1c4>
 8000c9c:	4681      	mov	r9, r0
 8000c9e:	e7b9      	b.n	8000c14 <__udivmoddi4+0x220>
 8000ca0:	4666      	mov	r6, ip
 8000ca2:	e775      	b.n	8000b90 <__udivmoddi4+0x19c>
 8000ca4:	4630      	mov	r0, r6
 8000ca6:	e74a      	b.n	8000b3e <__udivmoddi4+0x14a>
 8000ca8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cac:	4439      	add	r1, r7
 8000cae:	e713      	b.n	8000ad8 <__udivmoddi4+0xe4>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	e724      	b.n	8000b00 <__udivmoddi4+0x10c>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_idiv0>:
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
	static uint32_t previousTime = 0;
	static uint32_t nowTime = 0;

	nowTime = HAL_GetTick();
 8000cc6:	f001 f8c1 	bl	8001e4c <HAL_GetTick>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a13      	ldr	r2, [pc, #76]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x60>)
 8000cce:	6013      	str	r3, [r2, #0]
	if((nowTime - previousTime) > 100){
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x60>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b64      	cmp	r3, #100	; 0x64
 8000cdc:	d919      	bls.n	8000d12 <HAL_GPIO_EXTI_Callback+0x56>
		previousTime = HAL_GetTick();
 8000cde:	f001 f8b5 	bl	8001e4c <HAL_GetTick>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x64>)
 8000ce6:	6013      	str	r3, [r2, #0]
		if(GPIO_Pin == B1_Pin){
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cee:	d110      	bne.n	8000d12 <HAL_GPIO_EXTI_Callback+0x56>
			retry = 0;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x68>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
			provinceFlag = -1;
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000cf8:	22ff      	movs	r2, #255	; 0xff
 8000cfa:	701a      	strb	r2, [r3, #0]
			provinceRetry = 0;
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_GPIO_EXTI_Callback+0x70>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
			if(startProgram != 1){
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d04:	f993 3000 	ldrsb.w	r3, [r3]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d002      	beq.n	8000d12 <HAL_GPIO_EXTI_Callback+0x56>
				startProgram = 0;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000134 	.word	0x20000134
 8000d20:	20000138 	.word	0x20000138
 8000d24:	20000132 	.word	0x20000132
 8000d28:	20000001 	.word	0x20000001
 8000d2c:	20000133 	.word	0x20000133
 8000d30:	20000000 	.word	0x20000000

08000d34 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	static uint8_t count = 0;
	if(htim == STEPPERMOTOR_TIMx){
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a2b      	ldr	r2, [pc, #172]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d110      	bne.n	8000d66 <HAL_TIM_PeriodElapsedCallback+0x32>
		HAL_GPIO_TogglePin(STEP_GPIO_Port, STEP_Pin);											// toggling the step pin to create square wave
 8000d44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d48:	4829      	ldr	r0, [pc, #164]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000d4a:	f001 fc08 	bl	800255e <HAL_GPIO_TogglePin>
		numOfSteps--;
 8000d4e:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	4a27      	ldr	r2, [pc, #156]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000d56:	6013      	str	r3, [r2, #0]
		if(numOfSteps <= 0){
 8000d58:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	dc40      	bgt.n	8000de2 <HAL_TIM_PeriodElapsedCallback+0xae>
			stepperMotorStop();
 8000d60:	f000 f87e 	bl	8000e60 <stepperMotorStop>
				}
			}
			HAL_TIM_Base_Stop_IT(TIMEOUT_TIMx);
		}
	}
}
 8000d64:	e03d      	b.n	8000de2 <HAL_TIM_PeriodElapsedCallback+0xae>
	else if(htim == TIMEOUT_TIMx){
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a23      	ldr	r2, [pc, #140]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d139      	bne.n	8000de2 <HAL_TIM_PeriodElapsedCallback+0xae>
		count++;
 8000d6e:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d78:	701a      	strb	r2, [r3, #0]
		if(count >= TIMEOUT_DURATION){
 8000d7a:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d92f      	bls.n	8000de2 <HAL_TIM_PeriodElapsedCallback+0xae>
			count = 0;
 8000d82:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
			startProgram *= (-1);
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000d8a:	f993 3000 	ldrsb.w	r3, [r3]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	425b      	negs	r3, r3
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	b25a      	sxtb	r2, r3
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000d98:	701a      	strb	r2, [r3, #0]
			if(rcvdAck == 1){
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d10f      	bne.n	8000dc2 <HAL_TIM_PeriodElapsedCallback+0x8e>
				retry = 0;
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
				rcvdAck = 0;
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
				startProgram += 1;
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000db0:	f993 3000 	ldrsb.w	r3, [r3]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	3301      	adds	r3, #1
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	b25a      	sxtb	r2, r3
 8000dbc:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000dbe:	701a      	strb	r2, [r3, #0]
 8000dc0:	e00c      	b.n	8000ddc <HAL_TIM_PeriodElapsedCallback+0xa8>
				retry++;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000dcc:	701a      	strb	r2, [r3, #0]
				if(retry > 3){
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d902      	bls.n	8000ddc <HAL_TIM_PeriodElapsedCallback+0xa8>
					startProgram = 5;
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000dd8:	2205      	movs	r2, #5
 8000dda:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(TIMEOUT_TIMx);
 8000ddc:	4806      	ldr	r0, [pc, #24]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000dde:	f002 f917 	bl	8003010 <HAL_TIM_Base_Stop_IT>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000214 	.word	0x20000214
 8000df0:	40020400 	.word	0x40020400
 8000df4:	2000002c 	.word	0x2000002c
 8000df8:	20000140 	.word	0x20000140
 8000dfc:	2000013c 	.word	0x2000013c
 8000e00:	20000000 	.word	0x20000000
 8000e04:	20000131 	.word	0x20000131
 8000e08:	20000132 	.word	0x20000132

08000e0c <stepperMotorSetup>:

void stepperMotorSetup(void){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(FR_GPIO_Port, FR_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2120      	movs	r1, #32
 8000e14:	480f      	ldr	r0, [pc, #60]	; (8000e54 <stepperMotorSetup+0x48>)
 8000e16:	f001 fb89 	bl	800252c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(PS_GPIO_Port, PS_Pin, GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e20:	480c      	ldr	r0, [pc, #48]	; (8000e54 <stepperMotorSetup+0x48>)
 8000e22:	f001 fb83 	bl	800252c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	2108      	movs	r1, #8
 8000e2a:	480a      	ldr	r0, [pc, #40]	; (8000e54 <stepperMotorSetup+0x48>)
 8000e2c:	f001 fb7e 	bl	800252c <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(MONI_GPIO_Port, MONI_Pin, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(VREF_GPIO_Port, VREF_Pin, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2110      	movs	r1, #16
 8000e34:	4808      	ldr	r0, [pc, #32]	; (8000e58 <stepperMotorSetup+0x4c>)
 8000e36:	f001 fb79 	bl	800252c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2110      	movs	r1, #16
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <stepperMotorSetup+0x48>)
 8000e40:	f001 fb74 	bl	800252c <HAL_GPIO_WritePin>
	  HAL_TIM_Base_Init(STEPPERMOTOR_TIMx);
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <stepperMotorSetup+0x50>)
 8000e46:	f002 f831 	bl	8002eac <HAL_TIM_Base_Init>
	  HAL_TIM_Base_Start_IT(STEPPERMOTOR_TIMx);
 8000e4a:	4804      	ldr	r0, [pc, #16]	; (8000e5c <stepperMotorSetup+0x50>)
 8000e4c:	f002 f87e 	bl	8002f4c <HAL_TIM_Base_Start_IT>
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40020800 	.word	0x40020800
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	20000214 	.word	0x20000214

08000e60 <stepperMotorStop>:

void stepperMotorStop(void){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(STEPPERMOTOR_TIMx);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <stepperMotorStop+0x10>)
 8000e66:	f002 f8d3 	bl	8003010 <HAL_TIM_Base_Stop_IT>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000214 	.word	0x20000214
 8000e74:	00000000 	.word	0x00000000

08000e78 <stepperMotionInDegreeC>:

void stepperMotionInDegreeC(int16_t angle){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	int32_t steps = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]

	steps = (int32_t)(angle / MICROSTEP_RESOLUTION);
 8000e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff faf6 	bl	800047c <__aeabi_i2d>
 8000e90:	a31a      	add	r3, pc, #104	; (adr r3, 8000efc <stepperMotionInDegreeC+0x84>)
 8000e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e96:	f7ff fc85 	bl	80007a4 <__aeabi_ddiv>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff fd67 	bl	8000974 <__aeabi_d2iz>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	60fb      	str	r3, [r7, #12]
	numOfSteps = steps * 2;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <stepperMotionInDegreeC+0x78>)
 8000eb0:	6013      	str	r3, [r2, #0]

	if(angle > 0){
 8000eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	dd05      	ble.n	8000ec6 <stepperMotionInDegreeC+0x4e>
		HAL_GPIO_WritePin(FR_GPIO_Port, FR_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <stepperMotionInDegreeC+0x7c>)
 8000ec0:	f001 fb34 	bl	800252c <HAL_GPIO_WritePin>
 8000ec4:	e00d      	b.n	8000ee2 <stepperMotionInDegreeC+0x6a>
	}
	else if(angle < 0){
 8000ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	da09      	bge.n	8000ee2 <stepperMotionInDegreeC+0x6a>
		HAL_GPIO_WritePin(FR_GPIO_Port, FR_Pin, GPIO_PIN_SET);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2120      	movs	r1, #32
 8000ed2:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <stepperMotionInDegreeC+0x7c>)
 8000ed4:	f001 fb2a 	bl	800252c <HAL_GPIO_WritePin>
		numOfSteps *= (-1);
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <stepperMotionInDegreeC+0x78>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	425b      	negs	r3, r3
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <stepperMotionInDegreeC+0x78>)
 8000ee0:	6013      	str	r3, [r2, #0]
	}
	HAL_TIM_Base_Start_IT(STEPPERMOTOR_TIMx);
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <stepperMotionInDegreeC+0x80>)
 8000ee4:	f002 f832 	bl	8002f4c <HAL_TIM_Base_Start_IT>
}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	2000002c 	.word	0x2000002c
 8000ef4:	40020800 	.word	0x40020800
 8000ef8:	20000214 	.word	0x20000214
 8000efc:	cccccccd 	.word	0xcccccccd
 8000f00:	3fcccccc 	.word	0x3fcccccc

08000f04 <runServoMotor>:

void runServoMotor(void){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	//htim1.Instance->CCR1 = 125;
	HAL_TIM_PWM_Start_IT(STAGING_SERVOMOTOR_TIMx, STAGING_MOTOR_TIM_CHANNEL);
 8000f08:	2104      	movs	r1, #4
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <runServoMotor+0x20>)
 8000f0c:	f002 f908 	bl	8003120 <HAL_TIM_PWM_Start_IT>
	HAL_Delay(STAGING_MOTOR_RUNTIME);
 8000f10:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f14:	f000 ffa6 	bl	8001e64 <HAL_Delay>
	HAL_TIM_PWM_Stop_IT(STAGING_SERVOMOTOR_TIMx, STAGING_MOTOR_TIM_CHANNEL);
 8000f18:	2104      	movs	r1, #4
 8000f1a:	4802      	ldr	r0, [pc, #8]	; (8000f24 <runServoMotor+0x20>)
 8000f1c:	f002 f9fe 	bl	800331c <HAL_TIM_PWM_Stop_IT>
	//htim1.Instance->CCR1 = 0;
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000188 	.word	0x20000188

08000f28 <provinceDelivery>:

void provinceDelivery(uint8_t province){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
	int16_t degrees = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	81fb      	strh	r3, [r7, #14]

	if(province == NO_PROVINCE){
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d103      	bne.n	8000f44 <provinceDelivery+0x1c>
		degrees = UNSORTED_MAILBOX;
 8000f3c:	f64f 7379 	movw	r3, #65401	; 0xff79
 8000f40:	81fb      	strh	r3, [r7, #14]
 8000f42:	e011      	b.n	8000f68 <provinceDelivery+0x40>
	}
	else if(province == ON_PROVINCE){
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d103      	bne.n	8000f52 <provinceDelivery+0x2a>
		degrees = ON_MAILBOX;
 8000f4a:	f64f 73a6 	movw	r3, #65446	; 0xffa6
 8000f4e:	81fb      	strh	r3, [r7, #14]
 8000f50:	e00a      	b.n	8000f68 <provinceDelivery+0x40>
	}
	else if(province == BC_PROVINCE){
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d102      	bne.n	8000f5e <provinceDelivery+0x36>
		degrees = BC_MAILBOX;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	81fb      	strh	r3, [r7, #14]
 8000f5c:	e004      	b.n	8000f68 <provinceDelivery+0x40>
	}
	else if(province == AB_PROVINCE){
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	d101      	bne.n	8000f68 <provinceDelivery+0x40>
		degrees = AB_MAILBOX;
 8000f64:	235a      	movs	r3, #90	; 0x5a
 8000f66:	81fb      	strh	r3, [r7, #14]
	}
	stepperMotionInDegreeC(degrees);
 8000f68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff83 	bl	8000e78 <stepperMotionInDegreeC>
	while(numOfSteps > 0);
 8000f72:	bf00      	nop
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <provinceDelivery+0x90>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	dcfb      	bgt.n	8000f74 <provinceDelivery+0x4c>
	HAL_Delay(500);
 8000f7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f80:	f000 ff70 	bl	8001e64 <HAL_Delay>
	runServoMotor();
 8000f84:	f7ff ffbe 	bl	8000f04 <runServoMotor>
	HAL_Delay(500);
 8000f88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f8c:	f000 ff6a 	bl	8001e64 <HAL_Delay>
	stepperMotionInDegreeC(degrees * (-1));
 8000f90:	89fb      	ldrh	r3, [r7, #14]
 8000f92:	425b      	negs	r3, r3
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff6d 	bl	8000e78 <stepperMotionInDegreeC>
	while(numOfSteps > 0);
 8000f9e:	bf00      	nop
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <provinceDelivery+0x90>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	dcfb      	bgt.n	8000fa0 <provinceDelivery+0x78>
	HAL_Delay(50);
 8000fa8:	2032      	movs	r0, #50	; 0x32
 8000faa:	f000 ff5b 	bl	8001e64 <HAL_Delay>
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000002c 	.word	0x2000002c

08000fbc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	static uint8_t bufferIndex = 0;

	if(huart->Instance == USART6){
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a61      	ldr	r2, [pc, #388]	; (8001150 <HAL_UART_RxCpltCallback+0x194>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	f040 80bb 	bne.w	8001146 <HAL_UART_RxCpltCallback+0x18a>
		if((rxByte != '\n')){
 8000fd0:	4b60      	ldr	r3, [pc, #384]	; (8001154 <HAL_UART_RxCpltCallback+0x198>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b0a      	cmp	r3, #10
 8000fd6:	d00d      	beq.n	8000ff4 <HAL_UART_RxCpltCallback+0x38>
			rxBuffer[bufferIndex] = rxByte;
 8000fd8:	4b5f      	ldr	r3, [pc, #380]	; (8001158 <HAL_UART_RxCpltCallback+0x19c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b5d      	ldr	r3, [pc, #372]	; (8001154 <HAL_UART_RxCpltCallback+0x198>)
 8000fe0:	7819      	ldrb	r1, [r3, #0]
 8000fe2:	4b5e      	ldr	r3, [pc, #376]	; (800115c <HAL_UART_RxCpltCallback+0x1a0>)
 8000fe4:	5499      	strb	r1, [r3, r2]
			bufferIndex++;
 8000fe6:	4b5c      	ldr	r3, [pc, #368]	; (8001158 <HAL_UART_RxCpltCallback+0x19c>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	3301      	adds	r3, #1
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b5a      	ldr	r3, [pc, #360]	; (8001158 <HAL_UART_RxCpltCallback+0x19c>)
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e0a3      	b.n	800113c <HAL_UART_RxCpltCallback+0x180>
		}
		else{
			if(startProgram == -1){
 8000ff4:	4b5a      	ldr	r3, [pc, #360]	; (8001160 <HAL_UART_RxCpltCallback+0x1a4>)
 8000ff6:	f993 3000 	ldrsb.w	r3, [r3]
 8000ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffe:	d10a      	bne.n	8001016 <HAL_UART_RxCpltCallback+0x5a>
				if(strncmp((const char *)rxBuffer, (const char *)"ACK:OK", (size_t)6) == 0){
 8001000:	2206      	movs	r2, #6
 8001002:	4958      	ldr	r1, [pc, #352]	; (8001164 <HAL_UART_RxCpltCallback+0x1a8>)
 8001004:	4855      	ldr	r0, [pc, #340]	; (800115c <HAL_UART_RxCpltCallback+0x1a0>)
 8001006:	f004 f889 	bl	800511c <strncmp>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <HAL_UART_RxCpltCallback+0x5a>
					rcvdAck = 1;
 8001010:	4b55      	ldr	r3, [pc, #340]	; (8001168 <HAL_UART_RxCpltCallback+0x1ac>)
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
				}
//				else if(strncmp((const char *)rxBuffer, (const char *)"ACK:ERR", (size_t)7) == 0){
//					rcvdAck = 0;
//				}
			}
			if(startProgram == -2){
 8001016:	4b52      	ldr	r3, [pc, #328]	; (8001160 <HAL_UART_RxCpltCallback+0x1a4>)
 8001018:	f993 3000 	ldrsb.w	r3, [r3]
 800101c:	f113 0f02 	cmn.w	r3, #2
 8001020:	d173      	bne.n	800110a <HAL_UART_RxCpltCallback+0x14e>
				if(strncmp((const char *)rxBuffer, (const char *)"PROVINCE:", (size_t)9) == 0){
 8001022:	2209      	movs	r2, #9
 8001024:	4951      	ldr	r1, [pc, #324]	; (800116c <HAL_UART_RxCpltCallback+0x1b0>)
 8001026:	484d      	ldr	r0, [pc, #308]	; (800115c <HAL_UART_RxCpltCallback+0x1a0>)
 8001028:	f004 f878 	bl	800511c <strncmp>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d15a      	bne.n	80010e8 <HAL_UART_RxCpltCallback+0x12c>
					rcvdAck = 1;
 8001032:	4b4d      	ldr	r3, [pc, #308]	; (8001168 <HAL_UART_RxCpltCallback+0x1ac>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
					if((strncmp((const char *)&rxBuffer[9], (const char *)"ON", 2) == 0)){
 8001038:	2202      	movs	r2, #2
 800103a:	494d      	ldr	r1, [pc, #308]	; (8001170 <HAL_UART_RxCpltCallback+0x1b4>)
 800103c:	484d      	ldr	r0, [pc, #308]	; (8001174 <HAL_UART_RxCpltCallback+0x1b8>)
 800103e:	f004 f86d 	bl	800511c <strncmp>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d103      	bne.n	8001050 <HAL_UART_RxCpltCallback+0x94>
						provinceFlag = ON_PROVINCE;
 8001048:	4b4b      	ldr	r3, [pc, #300]	; (8001178 <HAL_UART_RxCpltCallback+0x1bc>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
 800104e:	e034      	b.n	80010ba <HAL_UART_RxCpltCallback+0xfe>
					}
					else if((strncmp((const char *)&rxBuffer[9], (const char *)"BC", (size_t)2) == 0)){
 8001050:	2202      	movs	r2, #2
 8001052:	494a      	ldr	r1, [pc, #296]	; (800117c <HAL_UART_RxCpltCallback+0x1c0>)
 8001054:	4847      	ldr	r0, [pc, #284]	; (8001174 <HAL_UART_RxCpltCallback+0x1b8>)
 8001056:	f004 f861 	bl	800511c <strncmp>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d103      	bne.n	8001068 <HAL_UART_RxCpltCallback+0xac>
						provinceFlag = BC_PROVINCE;
 8001060:	4b45      	ldr	r3, [pc, #276]	; (8001178 <HAL_UART_RxCpltCallback+0x1bc>)
 8001062:	2202      	movs	r2, #2
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	e028      	b.n	80010ba <HAL_UART_RxCpltCallback+0xfe>
					}
					else if((strncmp((const char *)&rxBuffer[9], (const char *)"AB", (size_t)2) == 0)){
 8001068:	2202      	movs	r2, #2
 800106a:	4945      	ldr	r1, [pc, #276]	; (8001180 <HAL_UART_RxCpltCallback+0x1c4>)
 800106c:	4841      	ldr	r0, [pc, #260]	; (8001174 <HAL_UART_RxCpltCallback+0x1b8>)
 800106e:	f004 f855 	bl	800511c <strncmp>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d103      	bne.n	8001080 <HAL_UART_RxCpltCallback+0xc4>
						provinceFlag = AB_PROVINCE;
 8001078:	4b3f      	ldr	r3, [pc, #252]	; (8001178 <HAL_UART_RxCpltCallback+0x1bc>)
 800107a:	2203      	movs	r2, #3
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	e01c      	b.n	80010ba <HAL_UART_RxCpltCallback+0xfe>
					}
					else if((strncmp((const char *)&rxBuffer[9], (const char *)"UN", (size_t)2) == 0)){
 8001080:	2202      	movs	r2, #2
 8001082:	4940      	ldr	r1, [pc, #256]	; (8001184 <HAL_UART_RxCpltCallback+0x1c8>)
 8001084:	483b      	ldr	r0, [pc, #236]	; (8001174 <HAL_UART_RxCpltCallback+0x1b8>)
 8001086:	f004 f849 	bl	800511c <strncmp>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d103      	bne.n	8001098 <HAL_UART_RxCpltCallback+0xdc>
						provinceFlag = NO_PROVINCE;
 8001090:	4b39      	ldr	r3, [pc, #228]	; (8001178 <HAL_UART_RxCpltCallback+0x1bc>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	e010      	b.n	80010ba <HAL_UART_RxCpltCallback+0xfe>
					}
					else{
						#if DEBUG_PROGRAM
						HAL_UART_Transmit(&huart2, (uint8_t *)"ACK:ERR\n", 8, 2000);
 8001098:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800109c:	2208      	movs	r2, #8
 800109e:	493a      	ldr	r1, [pc, #232]	; (8001188 <HAL_UART_RxCpltCallback+0x1cc>)
 80010a0:	483a      	ldr	r0, [pc, #232]	; (800118c <HAL_UART_RxCpltCallback+0x1d0>)
 80010a2:	f003 f894 	bl	80041ce <HAL_UART_Transmit>
						#endif
						HAL_UART_Transmit(huart, (uint8_t *)"ACK:ERR\n", 8, 2000);
 80010a6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010aa:	2208      	movs	r2, #8
 80010ac:	4936      	ldr	r1, [pc, #216]	; (8001188 <HAL_UART_RxCpltCallback+0x1cc>)
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f003 f88d 	bl	80041ce <HAL_UART_Transmit>
						rcvdAck = 0;
 80010b4:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <HAL_UART_RxCpltCallback+0x1ac>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
					}
					if(rcvdAck == 1){
 80010ba:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <HAL_UART_RxCpltCallback+0x1ac>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d123      	bne.n	800110a <HAL_UART_RxCpltCallback+0x14e>
						startProgram *= -1;
 80010c2:	4b27      	ldr	r3, [pc, #156]	; (8001160 <HAL_UART_RxCpltCallback+0x1a4>)
 80010c4:	f993 3000 	ldrsb.w	r3, [r3]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	425b      	negs	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	b25a      	sxtb	r2, r3
 80010d0:	4b23      	ldr	r3, [pc, #140]	; (8001160 <HAL_UART_RxCpltCallback+0x1a4>)
 80010d2:	701a      	strb	r2, [r3, #0]
						startProgram++;
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <HAL_UART_RxCpltCallback+0x1a4>)
 80010d6:	f993 3000 	ldrsb.w	r3, [r3]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	3301      	adds	r3, #1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	b25a      	sxtb	r2, r3
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <HAL_UART_RxCpltCallback+0x1a4>)
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e010      	b.n	800110a <HAL_UART_RxCpltCallback+0x14e>
					}
				}
				else{
					rcvdAck = 0;
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <HAL_UART_RxCpltCallback+0x1ac>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
					#if DEBUG_PROGRAM
					HAL_UART_Transmit(&huart2, (uint8_t *)"ACK:ERR\n", 8, 2000);
 80010ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010f2:	2208      	movs	r2, #8
 80010f4:	4924      	ldr	r1, [pc, #144]	; (8001188 <HAL_UART_RxCpltCallback+0x1cc>)
 80010f6:	4825      	ldr	r0, [pc, #148]	; (800118c <HAL_UART_RxCpltCallback+0x1d0>)
 80010f8:	f003 f869 	bl	80041ce <HAL_UART_Transmit>
					#endif
					HAL_UART_Transmit(huart, (uint8_t *)"ACK:ERR\n", 8, 2000);
 80010fc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001100:	2208      	movs	r2, #8
 8001102:	4921      	ldr	r1, [pc, #132]	; (8001188 <HAL_UART_RxCpltCallback+0x1cc>)
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f003 f862 	bl	80041ce <HAL_UART_Transmit>
				}
			}
			#if DEBUG_PROGRAM
			HAL_UART_Transmit(&huart2, (uint8_t *)rxBuffer, bufferIndex, 2000);
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HAL_UART_RxCpltCallback+0x19c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b29a      	uxth	r2, r3
 8001110:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001114:	4911      	ldr	r1, [pc, #68]	; (800115c <HAL_UART_RxCpltCallback+0x1a0>)
 8001116:	481d      	ldr	r0, [pc, #116]	; (800118c <HAL_UART_RxCpltCallback+0x1d0>)
 8001118:	f003 f859 	bl	80041ce <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 2000);
 800111c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001120:	2202      	movs	r2, #2
 8001122:	491b      	ldr	r1, [pc, #108]	; (8001190 <HAL_UART_RxCpltCallback+0x1d4>)
 8001124:	4819      	ldr	r0, [pc, #100]	; (800118c <HAL_UART_RxCpltCallback+0x1d0>)
 8001126:	f003 f852 	bl	80041ce <HAL_UART_Transmit>
			#endif
			memset((char *)rxBuffer, '\0', (size_t)256 * sizeof(rxBuffer[0]));
 800112a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112e:	2100      	movs	r1, #0
 8001130:	480a      	ldr	r0, [pc, #40]	; (800115c <HAL_UART_RxCpltCallback+0x1a0>)
 8001132:	f003 ffeb 	bl	800510c <memset>
			bufferIndex = 0;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_UART_RxCpltCallback+0x19c>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(huart, &rxByte, 1);
 800113c:	2201      	movs	r2, #1
 800113e:	4905      	ldr	r1, [pc, #20]	; (8001154 <HAL_UART_RxCpltCallback+0x198>)
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f003 f8d6 	bl	80042f2 <HAL_UART_Receive_IT>
	}
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40011400 	.word	0x40011400
 8001154:	20000130 	.word	0x20000130
 8001158:	2000013d 	.word	0x2000013d
 800115c:	20000030 	.word	0x20000030
 8001160:	20000000 	.word	0x20000000
 8001164:	08005158 	.word	0x08005158
 8001168:	20000131 	.word	0x20000131
 800116c:	08005160 	.word	0x08005160
 8001170:	0800516c 	.word	0x0800516c
 8001174:	20000039 	.word	0x20000039
 8001178:	20000001 	.word	0x20000001
 800117c:	08005170 	.word	0x08005170
 8001180:	08005174 	.word	0x08005174
 8001184:	08005178 	.word	0x08005178
 8001188:	0800517c 	.word	0x0800517c
 800118c:	2000025c 	.word	0x2000025c
 8001190:	08005188 	.word	0x08005188

08001194 <conOneServoStart>:

void conOneServoStart(void){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
//	htim1.Instance->CCR2 = 25;
//	htim1.Instance->CCR3 = 25;
	__HAL_TIM_SET_COMPARE(STAGING_SERVOMOTOR_TIMx, CONVEYOR_1_SERVO_CHANNEL, 25);
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <conOneServoStart+0x84>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2219      	movs	r2, #25
 800119e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(STAGING_SERVOMOTOR_TIMx, STAGING_MOTOR_TIM_CHANNEL, 25);
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <conOneServoStart+0x84>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2219      	movs	r2, #25
 80011a6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start_IT(STAGING_SERVOMOTOR_TIMx);
 80011a8:	481b      	ldr	r0, [pc, #108]	; (8001218 <conOneServoStart+0x84>)
 80011aa:	f001 fecf 	bl	8002f4c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(STAGING_SERVOMOTOR_TIMx, CONVEYOR_1_SERVO_CHANNEL);
 80011ae:	2108      	movs	r1, #8
 80011b0:	4819      	ldr	r0, [pc, #100]	; (8001218 <conOneServoStart+0x84>)
 80011b2:	f001 ffb5 	bl	8003120 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(STAGING_SERVOMOTOR_TIMx, STAGING_MOTOR_TIM_CHANNEL);
 80011b6:	2104      	movs	r1, #4
 80011b8:	4817      	ldr	r0, [pc, #92]	; (8001218 <conOneServoStart+0x84>)
 80011ba:	f001 ffb1 	bl	8003120 <HAL_TIM_PWM_Start_IT>
	while(HAL_GPIO_ReadPin(IR_SENSOR_GPIO_Port, IR_SENSOR_Pin) == GPIO_PIN_SET);
 80011be:	bf00      	nop
 80011c0:	2102      	movs	r1, #2
 80011c2:	4816      	ldr	r0, [pc, #88]	; (800121c <conOneServoStart+0x88>)
 80011c4:	f001 f99a 	bl	80024fc <HAL_GPIO_ReadPin>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d0f8      	beq.n	80011c0 <conOneServoStart+0x2c>
	HAL_Delay(50);
 80011ce:	2032      	movs	r0, #50	; 0x32
 80011d0:	f000 fe48 	bl	8001e64 <HAL_Delay>
	while(HAL_GPIO_ReadPin(IR_SENSOR_GPIO_Port, IR_SENSOR_Pin) == GPIO_PIN_RESET);
 80011d4:	bf00      	nop
 80011d6:	2102      	movs	r1, #2
 80011d8:	4810      	ldr	r0, [pc, #64]	; (800121c <conOneServoStart+0x88>)
 80011da:	f001 f98f 	bl	80024fc <HAL_GPIO_ReadPin>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f8      	beq.n	80011d6 <conOneServoStart+0x42>
//	while(irSense != 1);
//	irSense = 0;
//	htim1.Instance->CCR3 = 0;
	__HAL_TIM_SET_COMPARE(STAGING_SERVOMOTOR_TIMx, CONVEYOR_1_SERVO_CHANNEL, 0);
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <conOneServoStart+0x84>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2200      	movs	r2, #0
 80011ea:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Stop_IT(STAGING_SERVOMOTOR_TIMx, CONVEYOR_1_SERVO_CHANNEL);
 80011ec:	2108      	movs	r1, #8
 80011ee:	480a      	ldr	r0, [pc, #40]	; (8001218 <conOneServoStart+0x84>)
 80011f0:	f002 f894 	bl	800331c <HAL_TIM_PWM_Stop_IT>
	HAL_Delay(1000);
 80011f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f8:	f000 fe34 	bl	8001e64 <HAL_Delay>
//	htim1.Instance->CCR2 = 0;
	__HAL_TIM_SET_COMPARE(STAGING_SERVOMOTOR_TIMx, CONVEYOR_1_SERVO_CHANNEL, 0);
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <conOneServoStart+0x84>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2200      	movs	r2, #0
 8001202:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Stop_IT(STAGING_SERVOMOTOR_TIMx, STAGING_MOTOR_TIM_CHANNEL);
 8001204:	2104      	movs	r1, #4
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <conOneServoStart+0x84>)
 8001208:	f002 f888 	bl	800331c <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_Base_Stop_IT(STAGING_SERVOMOTOR_TIMx);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <conOneServoStart+0x84>)
 800120e:	f001 feff 	bl	8003010 <HAL_TIM_Base_Stop_IT>
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000188 	.word	0x20000188
 800121c:	40020400 	.word	0x40020400

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001224:	f000 fdac 	bl	8001d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001228:	f000 f8fe 	bl	8001428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122c:	f000 fb02 	bl	8001834 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001230:	f000 faac 	bl	800178c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001234:	f000 fa10 	bl	8001658 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8001238:	f000 fad2 	bl	80017e0 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 800123c:	f000 f95e 	bl	80014fc <MX_TIM1_Init>
  MX_TIM3_Init();
 8001240:	f000 fa56 	bl	80016f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, &rxByte, 1);
 8001244:	2201      	movs	r2, #1
 8001246:	496a      	ldr	r1, [pc, #424]	; (80013f0 <main+0x1d0>)
 8001248:	486a      	ldr	r0, [pc, #424]	; (80013f4 <main+0x1d4>)
 800124a:	f003 f852 	bl	80042f2 <HAL_UART_Receive_IT>
  stepperMotorSetup();
 800124e:	f7ff fddd 	bl	8000e0c <stepperMotorSetup>
//  htim1.Instance->CCR2 = 0;
//  htim1.Instance->CCR3 = 0;
//  HAL_TIM_PWM_Start_IT(STAGING_SERVOMOTOR_TIMx, CONVEYOR_1_SERVO_CHANNEL);
//  HAL_TIM_PWM_Start_IT(STAGING_SERVOMOTOR_TIMx, STAGING_MOTOR_TIM_CHANNEL);
  HAL_Delay(250);
 8001252:	20fa      	movs	r0, #250	; 0xfa
 8001254:	f000 fe06 	bl	8001e64 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(startProgram == 0){
 8001258:	4b67      	ldr	r3, [pc, #412]	; (80013f8 <main+0x1d8>)
 800125a:	f993 3000 	ldrsb.w	r3, [r3]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10b      	bne.n	800127a <main+0x5a>
		  conOneServoStart();
 8001262:	f7ff ff97 	bl	8001194 <conOneServoStart>
		  startProgram++;
 8001266:	4b64      	ldr	r3, [pc, #400]	; (80013f8 <main+0x1d8>)
 8001268:	f993 3000 	ldrsb.w	r3, [r3]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	3301      	adds	r3, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	b25a      	sxtb	r2, r3
 8001274:	4b60      	ldr	r3, [pc, #384]	; (80013f8 <main+0x1d8>)
 8001276:	701a      	strb	r2, [r3, #0]
 8001278:	e084      	b.n	8001384 <main+0x164>
	  }
	  else if(startProgram == 1){
 800127a:	4b5f      	ldr	r3, [pc, #380]	; (80013f8 <main+0x1d8>)
 800127c:	f993 3000 	ldrsb.w	r3, [r3]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d11a      	bne.n	80012ba <main+0x9a>
		rcvdAck = 0;
 8001284:	4b5d      	ldr	r3, [pc, #372]	; (80013fc <main+0x1dc>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
		#if DEBUG_PROGRAM
		HAL_UART_Transmit(&huart2, (uint8_t *)"START\n", 6, 2000);
 800128a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800128e:	2206      	movs	r2, #6
 8001290:	495b      	ldr	r1, [pc, #364]	; (8001400 <main+0x1e0>)
 8001292:	485c      	ldr	r0, [pc, #368]	; (8001404 <main+0x1e4>)
 8001294:	f002 ff9b 	bl	80041ce <HAL_UART_Transmit>
		HAL_Delay(10);
 8001298:	200a      	movs	r0, #10
 800129a:	f000 fde3 	bl	8001e64 <HAL_Delay>
		#endif
		HAL_UART_Transmit(&huart6, (uint8_t *)"START\n", 6, 2000);
 800129e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012a2:	2206      	movs	r2, #6
 80012a4:	4956      	ldr	r1, [pc, #344]	; (8001400 <main+0x1e0>)
 80012a6:	4853      	ldr	r0, [pc, #332]	; (80013f4 <main+0x1d4>)
 80012a8:	f002 ff91 	bl	80041ce <HAL_UART_Transmit>
		startProgram = -1;
 80012ac:	4b52      	ldr	r3, [pc, #328]	; (80013f8 <main+0x1d8>)
 80012ae:	22ff      	movs	r2, #255	; 0xff
 80012b0:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(TIMEOUT_TIMx);
 80012b2:	4855      	ldr	r0, [pc, #340]	; (8001408 <main+0x1e8>)
 80012b4:	f001 fe4a 	bl	8002f4c <HAL_TIM_Base_Start_IT>
 80012b8:	e064      	b.n	8001384 <main+0x164>
	  }
	  else if(startProgram == 2){
 80012ba:	4b4f      	ldr	r3, [pc, #316]	; (80013f8 <main+0x1d8>)
 80012bc:	f993 3000 	ldrsb.w	r3, [r3]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d10a      	bne.n	80012da <main+0xba>
		#if DEBUG_PROGRAM
		HAL_UART_Transmit(&huart2, (uint8_t *)"Waiting for province\n", 21, 2000);
 80012c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012c8:	2215      	movs	r2, #21
 80012ca:	4950      	ldr	r1, [pc, #320]	; (800140c <main+0x1ec>)
 80012cc:	484d      	ldr	r0, [pc, #308]	; (8001404 <main+0x1e4>)
 80012ce:	f002 ff7e 	bl	80041ce <HAL_UART_Transmit>
		#endif
		startProgram = -2;
 80012d2:	4b49      	ldr	r3, [pc, #292]	; (80013f8 <main+0x1d8>)
 80012d4:	22fe      	movs	r2, #254	; 0xfe
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	e054      	b.n	8001384 <main+0x164>
	  }
	  else if(startProgram == 3){
 80012da:	4b47      	ldr	r3, [pc, #284]	; (80013f8 <main+0x1d8>)
 80012dc:	f993 3000 	ldrsb.w	r3, [r3]
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d14f      	bne.n	8001384 <main+0x164>
		  if(provinceFlag == NO_PROVINCE){
 80012e4:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <main+0x1f0>)
 80012e6:	f993 3000 	ldrsb.w	r3, [r3]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d132      	bne.n	8001354 <main+0x134>
			  provinceRetry++;
 80012ee:	4b49      	ldr	r3, [pc, #292]	; (8001414 <main+0x1f4>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	3301      	adds	r3, #1
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b47      	ldr	r3, [pc, #284]	; (8001414 <main+0x1f4>)
 80012f8:	701a      	strb	r2, [r3, #0]
			  if(provinceRetry < 4){
 80012fa:	4b46      	ldr	r3, [pc, #280]	; (8001414 <main+0x1f4>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d824      	bhi.n	800134c <main+0x12c>
				#if DEBUG_PROGRAM
				HAL_UART_Transmit(&huart2, (uint8_t *)"ACK:OK\n", 7, 2000);
 8001302:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001306:	2207      	movs	r2, #7
 8001308:	4943      	ldr	r1, [pc, #268]	; (8001418 <main+0x1f8>)
 800130a:	483e      	ldr	r0, [pc, #248]	; (8001404 <main+0x1e4>)
 800130c:	f002 ff5f 	bl	80041ce <HAL_UART_Transmit>
				HAL_Delay(10);
 8001310:	200a      	movs	r0, #10
 8001312:	f000 fda7 	bl	8001e64 <HAL_Delay>
				#endif
				HAL_UART_Transmit(&huart6, (uint8_t *)"ACK:OK\n", 7, 2000);
 8001316:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800131a:	2207      	movs	r2, #7
 800131c:	493e      	ldr	r1, [pc, #248]	; (8001418 <main+0x1f8>)
 800131e:	4835      	ldr	r0, [pc, #212]	; (80013f4 <main+0x1d4>)
 8001320:	f002 ff55 	bl	80041ce <HAL_UART_Transmit>
				HAL_TIM_Base_Start_IT(STAGING_SERVOMOTOR_TIMx);
 8001324:	483d      	ldr	r0, [pc, #244]	; (800141c <main+0x1fc>)
 8001326:	f001 fe11 	bl	8002f4c <HAL_TIM_Base_Start_IT>
				HAL_TIM_PWM_Start_IT(STAGING_SERVOMOTOR_TIMx, STAGING_MOTOR_TIM_CHANNEL);
 800132a:	2104      	movs	r1, #4
 800132c:	483b      	ldr	r0, [pc, #236]	; (800141c <main+0x1fc>)
 800132e:	f001 fef7 	bl	8003120 <HAL_TIM_PWM_Start_IT>
				HAL_Delay(100);
 8001332:	2064      	movs	r0, #100	; 0x64
 8001334:	f000 fd96 	bl	8001e64 <HAL_Delay>
				HAL_TIM_PWM_Stop_IT(STAGING_SERVOMOTOR_TIMx, STAGING_MOTOR_TIM_CHANNEL);
 8001338:	2104      	movs	r1, #4
 800133a:	4838      	ldr	r0, [pc, #224]	; (800141c <main+0x1fc>)
 800133c:	f001 ffee 	bl	800331c <HAL_TIM_PWM_Stop_IT>
				HAL_TIM_Base_Stop_IT(STAGING_SERVOMOTOR_TIMx);
 8001340:	4836      	ldr	r0, [pc, #216]	; (800141c <main+0x1fc>)
 8001342:	f001 fe65 	bl	8003010 <HAL_TIM_Base_Stop_IT>
				provinceFlag = -1;
 8001346:	4b32      	ldr	r3, [pc, #200]	; (8001410 <main+0x1f0>)
 8001348:	22ff      	movs	r2, #255	; 0xff
 800134a:	701a      	strb	r2, [r3, #0]
			  }
			  startProgram = 1;
 800134c:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <main+0x1d8>)
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	e013      	b.n	800137c <main+0x15c>
		  }
		  else{
			#if DEBUG_PROGRAM
			HAL_UART_Transmit(&huart2, (uint8_t *)"ACK:OK\n", 7, 2000);
 8001354:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001358:	2207      	movs	r2, #7
 800135a:	492f      	ldr	r1, [pc, #188]	; (8001418 <main+0x1f8>)
 800135c:	4829      	ldr	r0, [pc, #164]	; (8001404 <main+0x1e4>)
 800135e:	f002 ff36 	bl	80041ce <HAL_UART_Transmit>
			HAL_Delay(10);
 8001362:	200a      	movs	r0, #10
 8001364:	f000 fd7e 	bl	8001e64 <HAL_Delay>
			#endif
			HAL_UART_Transmit(&huart6, (uint8_t *)"ACK:OK\n", 7, 2000);
 8001368:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800136c:	2207      	movs	r2, #7
 800136e:	492a      	ldr	r1, [pc, #168]	; (8001418 <main+0x1f8>)
 8001370:	4820      	ldr	r0, [pc, #128]	; (80013f4 <main+0x1d4>)
 8001372:	f002 ff2c 	bl	80041ce <HAL_UART_Transmit>
			startProgram = 0;
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <main+0x1d8>)
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
		  }
		  HAL_Delay(2000);
 800137c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001380:	f000 fd70 	bl	8001e64 <HAL_Delay>
	  }

	  if((provinceFlag != -1)){
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <main+0x1f0>)
 8001386:	f993 3000 	ldrsb.w	r3, [r3]
 800138a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138e:	f43f af63 	beq.w	8001258 <main+0x38>
		  if(provinceFlag == NO_PROVINCE){
 8001392:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <main+0x1f0>)
 8001394:	f993 3000 	ldrsb.w	r3, [r3]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d113      	bne.n	80013c4 <main+0x1a4>
			provinceRetry = 0;
 800139c:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <main+0x1f4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
			#if DEBUG_PROGRAM
			HAL_UART_Transmit(&huart2, (uint8_t *)"ACK:UN-------------\n", 20, 2000);
 80013a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80013a6:	2214      	movs	r2, #20
 80013a8:	491d      	ldr	r1, [pc, #116]	; (8001420 <main+0x200>)
 80013aa:	4816      	ldr	r0, [pc, #88]	; (8001404 <main+0x1e4>)
 80013ac:	f002 ff0f 	bl	80041ce <HAL_UART_Transmit>
			HAL_Delay(10);
 80013b0:	200a      	movs	r0, #10
 80013b2:	f000 fd57 	bl	8001e64 <HAL_Delay>
			#endif
			HAL_UART_Transmit(&huart6, (uint8_t *)"ACK:UN\n", 7, 2000);
 80013b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80013ba:	2207      	movs	r2, #7
 80013bc:	4919      	ldr	r1, [pc, #100]	; (8001424 <main+0x204>)
 80013be:	480d      	ldr	r0, [pc, #52]	; (80013f4 <main+0x1d4>)
 80013c0:	f002 ff05 	bl	80041ce <HAL_UART_Transmit>
		  }
		provinceDelivery(provinceFlag);
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <main+0x1f0>)
 80013c6:	f993 3000 	ldrsb.w	r3, [r3]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fdab 	bl	8000f28 <provinceDelivery>
		provinceFlag = -1;
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <main+0x1f0>)
 80013d4:	22ff      	movs	r2, #255	; 0xff
 80013d6:	701a      	strb	r2, [r3, #0]
		provinceRetry = 0;
 80013d8:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <main+0x1f4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
		startProgram = 0;
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <main+0x1d8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2000);
 80013e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013e8:	f000 fd3c 	bl	8001e64 <HAL_Delay>
	  if(startProgram == 0){
 80013ec:	e734      	b.n	8001258 <main+0x38>
 80013ee:	bf00      	nop
 80013f0:	20000130 	.word	0x20000130
 80013f4:	200001d0 	.word	0x200001d0
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20000131 	.word	0x20000131
 8001400:	0800518c 	.word	0x0800518c
 8001404:	2000025c 	.word	0x2000025c
 8001408:	20000140 	.word	0x20000140
 800140c:	08005194 	.word	0x08005194
 8001410:	20000001 	.word	0x20000001
 8001414:	20000133 	.word	0x20000133
 8001418:	080051ac 	.word	0x080051ac
 800141c:	20000188 	.word	0x20000188
 8001420:	080051b4 	.word	0x080051b4
 8001424:	080051cc 	.word	0x080051cc

08001428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b094      	sub	sp, #80	; 0x50
 800142c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142e:	f107 0320 	add.w	r3, r7, #32
 8001432:	2230      	movs	r2, #48	; 0x30
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f003 fe68 	bl	800510c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <SystemClock_Config+0xcc>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	4a27      	ldr	r2, [pc, #156]	; (80014f4 <SystemClock_Config+0xcc>)
 8001456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145a:	6413      	str	r3, [r2, #64]	; 0x40
 800145c:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <SystemClock_Config+0xcc>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <SystemClock_Config+0xd0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a21      	ldr	r2, [pc, #132]	; (80014f8 <SystemClock_Config+0xd0>)
 8001472:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <SystemClock_Config+0xd0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001484:	2302      	movs	r3, #2
 8001486:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001488:	2301      	movs	r3, #1
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800148c:	2310      	movs	r3, #16
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001490:	2302      	movs	r3, #2
 8001492:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001494:	2300      	movs	r3, #0
 8001496:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001498:	2308      	movs	r3, #8
 800149a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800149c:	2354      	movs	r3, #84	; 0x54
 800149e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014a4:	2304      	movs	r3, #4
 80014a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a8:	f107 0320 	add.w	r3, r7, #32
 80014ac:	4618      	mov	r0, r3
 80014ae:	f001 f889 	bl	80025c4 <HAL_RCC_OscConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014b8:	f000 fa6a 	bl	8001990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014bc:	230f      	movs	r3, #15
 80014be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c0:	2302      	movs	r3, #2
 80014c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	2102      	movs	r1, #2
 80014da:	4618      	mov	r0, r3
 80014dc:	f001 faea 	bl	8002ab4 <HAL_RCC_ClockConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014e6:	f000 fa53 	bl	8001990 <Error_Handler>
  }
}
 80014ea:	bf00      	nop
 80014ec:	3750      	adds	r7, #80	; 0x50
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40007000 	.word	0x40007000

080014fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b096      	sub	sp, #88	; 0x58
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001502:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
 800152a:	615a      	str	r2, [r3, #20]
 800152c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2220      	movs	r2, #32
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f003 fde9 	bl	800510c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800153a:	4b45      	ldr	r3, [pc, #276]	; (8001650 <MX_TIM1_Init+0x154>)
 800153c:	4a45      	ldr	r2, [pc, #276]	; (8001654 <MX_TIM1_Init+0x158>)
 800153e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1679;
 8001540:	4b43      	ldr	r3, [pc, #268]	; (8001650 <MX_TIM1_Init+0x154>)
 8001542:	f240 628f 	movw	r2, #1679	; 0x68f
 8001546:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b41      	ldr	r3, [pc, #260]	; (8001650 <MX_TIM1_Init+0x154>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800154e:	4b40      	ldr	r3, [pc, #256]	; (8001650 <MX_TIM1_Init+0x154>)
 8001550:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001554:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001556:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <MX_TIM1_Init+0x154>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800155c:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <MX_TIM1_Init+0x154>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001562:	4b3b      	ldr	r3, [pc, #236]	; (8001650 <MX_TIM1_Init+0x154>)
 8001564:	2280      	movs	r2, #128	; 0x80
 8001566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001568:	4839      	ldr	r0, [pc, #228]	; (8001650 <MX_TIM1_Init+0x154>)
 800156a:	f001 fc9f 	bl	8002eac <HAL_TIM_Base_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001574:	f000 fa0c 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800157e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001582:	4619      	mov	r1, r3
 8001584:	4832      	ldr	r0, [pc, #200]	; (8001650 <MX_TIM1_Init+0x154>)
 8001586:	f002 f945 	bl	8003814 <HAL_TIM_ConfigClockSource>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001590:	f000 f9fe 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001594:	482e      	ldr	r0, [pc, #184]	; (8001650 <MX_TIM1_Init+0x154>)
 8001596:	f001 fd6a 	bl	800306e <HAL_TIM_PWM_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80015a0:	f000 f9f6 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015a4:	2320      	movs	r3, #32
 80015a6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015b0:	4619      	mov	r1, r3
 80015b2:	4827      	ldr	r0, [pc, #156]	; (8001650 <MX_TIM1_Init+0x154>)
 80015b4:	f002 fcea 	bl	8003f8c <HAL_TIMEx_MasterConfigSynchronization>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80015be:	f000 f9e7 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80015c2:	2370      	movs	r3, #112	; 0x70
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25;
 80015c6:	2319      	movs	r3, #25
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80015ca:	2302      	movs	r3, #2
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015ce:	2300      	movs	r3, #0
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e2:	2204      	movs	r2, #4
 80015e4:	4619      	mov	r1, r3
 80015e6:	481a      	ldr	r0, [pc, #104]	; (8001650 <MX_TIM1_Init+0x154>)
 80015e8:	f002 f852 	bl	8003690 <HAL_TIM_PWM_ConfigChannel>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80015f2:	f000 f9cd 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fa:	2208      	movs	r2, #8
 80015fc:	4619      	mov	r1, r3
 80015fe:	4814      	ldr	r0, [pc, #80]	; (8001650 <MX_TIM1_Init+0x154>)
 8001600:	f002 f846 	bl	8003690 <HAL_TIM_PWM_ConfigChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800160a:	f000 f9c1 	bl	8001990 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001626:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	4619      	mov	r1, r3
 8001630:	4807      	ldr	r0, [pc, #28]	; (8001650 <MX_TIM1_Init+0x154>)
 8001632:	f002 fd19 	bl	8004068 <HAL_TIMEx_ConfigBreakDeadTime>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800163c:	f000 f9a8 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <MX_TIM1_Init+0x154>)
 8001642:	f000 fa35 	bl	8001ab0 <HAL_TIM_MspPostInit>

}
 8001646:	bf00      	nop
 8001648:	3758      	adds	r7, #88	; 0x58
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000188 	.word	0x20000188
 8001654:	40010000 	.word	0x40010000

08001658 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165e:	f107 0308 	add.w	r3, r7, #8
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166c:	463b      	mov	r3, r7
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <MX_TIM2_Init+0x94>)
 8001676:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800167a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = FREQUENCY_TIM;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MX_TIM2_Init+0x94>)
 800167e:	22a7      	movs	r2, #167	; 0xa7
 8001680:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MX_TIM2_Init+0x94>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = COUNTER_PERIOD;
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <MX_TIM2_Init+0x94>)
 800168a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800168e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001690:	4b16      	ldr	r3, [pc, #88]	; (80016ec <MX_TIM2_Init+0x94>)
 8001692:	2200      	movs	r2, #0
 8001694:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <MX_TIM2_Init+0x94>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800169c:	4813      	ldr	r0, [pc, #76]	; (80016ec <MX_TIM2_Init+0x94>)
 800169e:	f001 fc05 	bl	8002eac <HAL_TIM_Base_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016a8:	f000 f972 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	4619      	mov	r1, r3
 80016b8:	480c      	ldr	r0, [pc, #48]	; (80016ec <MX_TIM2_Init+0x94>)
 80016ba:	f002 f8ab 	bl	8003814 <HAL_TIM_ConfigClockSource>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016c4:	f000 f964 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016c8:	2320      	movs	r3, #32
 80016ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d0:	463b      	mov	r3, r7
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_TIM2_Init+0x94>)
 80016d6:	f002 fc59 	bl	8003f8c <HAL_TIMEx_MasterConfigSynchronization>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016e0:	f000 f956 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000214 	.word	0x20000214

080016f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001704:	463b      	mov	r3, r7
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <MX_TIM3_Init+0x94>)
 800170e:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <MX_TIM3_Init+0x98>)
 8001710:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <MX_TIM3_Init+0x94>)
 8001714:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001718:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_TIM3_Init+0x94>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <MX_TIM3_Init+0x94>)
 8001722:	f242 7210 	movw	r2, #10000	; 0x2710
 8001726:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <MX_TIM3_Init+0x94>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <MX_TIM3_Init+0x94>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001734:	4813      	ldr	r0, [pc, #76]	; (8001784 <MX_TIM3_Init+0x94>)
 8001736:	f001 fbb9 	bl	8002eac <HAL_TIM_Base_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001740:	f000 f926 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001748:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	4619      	mov	r1, r3
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <MX_TIM3_Init+0x94>)
 8001752:	f002 f85f 	bl	8003814 <HAL_TIM_ConfigClockSource>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800175c:	f000 f918 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001760:	2320      	movs	r3, #32
 8001762:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001768:	463b      	mov	r3, r7
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_TIM3_Init+0x94>)
 800176e:	f002 fc0d 	bl	8003f8c <HAL_TIMEx_MasterConfigSynchronization>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001778:	f000 f90a 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800177c:	bf00      	nop
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000140 	.word	0x20000140
 8001788:	40000400 	.word	0x40000400

0800178c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <MX_USART2_UART_Init+0x50>)
 8001794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 8001798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800179c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017c4:	f002 fcb6 	bl	8004134 <HAL_UART_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017ce:	f000 f8df 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000025c 	.word	0x2000025c
 80017dc:	40004400 	.word	0x40004400

080017e0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_USART6_UART_Init+0x4c>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <MX_USART6_UART_Init+0x50>)
 80017e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <MX_USART6_UART_Init+0x4c>)
 80017ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_USART6_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_USART6_UART_Init+0x4c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <MX_USART6_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_USART6_UART_Init+0x4c>)
 8001806:	220c      	movs	r2, #12
 8001808:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <MX_USART6_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_USART6_UART_Init+0x4c>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_USART6_UART_Init+0x4c>)
 8001818:	f002 fc8c 	bl	8004134 <HAL_UART_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001822:	f000 f8b5 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200001d0 	.word	0x200001d0
 8001830:	40011400 	.word	0x40011400

08001834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <MX_GPIO_Init+0x14c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a4b      	ldr	r2, [pc, #300]	; (8001980 <MX_GPIO_Init+0x14c>)
 8001854:	f043 0304 	orr.w	r3, r3, #4
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b49      	ldr	r3, [pc, #292]	; (8001980 <MX_GPIO_Init+0x14c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b45      	ldr	r3, [pc, #276]	; (8001980 <MX_GPIO_Init+0x14c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a44      	ldr	r2, [pc, #272]	; (8001980 <MX_GPIO_Init+0x14c>)
 8001870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b42      	ldr	r3, [pc, #264]	; (8001980 <MX_GPIO_Init+0x14c>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	4b3e      	ldr	r3, [pc, #248]	; (8001980 <MX_GPIO_Init+0x14c>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a3d      	ldr	r2, [pc, #244]	; (8001980 <MX_GPIO_Init+0x14c>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b3b      	ldr	r3, [pc, #236]	; (8001980 <MX_GPIO_Init+0x14c>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b37      	ldr	r3, [pc, #220]	; (8001980 <MX_GPIO_Init+0x14c>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a36      	ldr	r2, [pc, #216]	; (8001980 <MX_GPIO_Init+0x14c>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b34      	ldr	r3, [pc, #208]	; (8001980 <MX_GPIO_Init+0x14c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RST_Pin|OE_Pin|FR_Pin|PS_Pin
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 714e 	mov.w	r1, #824	; 0x338
 80018c0:	4830      	ldr	r0, [pc, #192]	; (8001984 <MX_GPIO_Init+0x150>)
 80018c2:	f000 fe33 	bl	800252c <HAL_GPIO_WritePin>
                          |MONI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VREF_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2130      	movs	r1, #48	; 0x30
 80018ca:	482f      	ldr	r0, [pc, #188]	; (8001988 <MX_GPIO_Init+0x154>)
 80018cc:	f000 fe2e 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d6:	482d      	ldr	r0, [pc, #180]	; (800198c <MX_GPIO_Init+0x158>)
 80018d8:	f000 fe28 	bl	800252c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	4824      	ldr	r0, [pc, #144]	; (8001984 <MX_GPIO_Init+0x150>)
 80018f4:	f000 fc7e 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin OE_Pin FR_Pin PS_Pin
                           MONI_Pin */
  GPIO_InitStruct.Pin = RST_Pin|OE_Pin|FR_Pin|PS_Pin
 80018f8:	f44f 734e 	mov.w	r3, #824	; 0x338
 80018fc:	617b      	str	r3, [r7, #20]
                          |MONI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	481c      	ldr	r0, [pc, #112]	; (8001984 <MX_GPIO_Init+0x150>)
 8001912:	f000 fc6f 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VREF_Pin LD2_Pin */
  GPIO_InitStruct.Pin = VREF_Pin|LD2_Pin;
 8001916:	2330      	movs	r3, #48	; 0x30
 8001918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191a:	2301      	movs	r3, #1
 800191c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	4816      	ldr	r0, [pc, #88]	; (8001988 <MX_GPIO_Init+0x154>)
 800192e:	f000 fc61 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_SENSOR_Pin */
  GPIO_InitStruct.Pin = IR_SENSOR_Pin;
 8001932:	2302      	movs	r3, #2
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_SENSOR_GPIO_Port, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	4811      	ldr	r0, [pc, #68]	; (800198c <MX_GPIO_Init+0x158>)
 8001946:	f000 fc55 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP_Pin */
  GPIO_InitStruct.Pin = STEP_Pin;
 800194a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800194e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001950:	2301      	movs	r3, #1
 8001952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STEP_GPIO_Port, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	480a      	ldr	r0, [pc, #40]	; (800198c <MX_GPIO_Init+0x158>)
 8001964:	f000 fc46 	bl	80021f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001968:	2200      	movs	r2, #0
 800196a:	2100      	movs	r1, #0
 800196c:	2028      	movs	r0, #40	; 0x28
 800196e:	f000 fb78 	bl	8002062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001972:	2028      	movs	r0, #40	; 0x28
 8001974:	f000 fb91 	bl	800209a <HAL_NVIC_EnableIRQ>

}
 8001978:	bf00      	nop
 800197a:	3728      	adds	r7, #40	; 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40023800 	.word	0x40023800
 8001984:	40020800 	.word	0x40020800
 8001988:	40020000 	.word	0x40020000
 800198c:	40020400 	.word	0x40020400

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001994:	b672      	cpsid	i
}
 8001996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001998:	e7fe      	b.n	8001998 <Error_Handler+0x8>
	...

0800199c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_MspInit+0x4c>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	4a0f      	ldr	r2, [pc, #60]	; (80019e8 <HAL_MspInit+0x4c>)
 80019ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b0:	6453      	str	r3, [r2, #68]	; 0x44
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <HAL_MspInit+0x4c>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_MspInit+0x4c>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <HAL_MspInit+0x4c>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_MspInit+0x4c>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019da:	2007      	movs	r0, #7
 80019dc:	f000 fb36 	bl	800204c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800

080019ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a2a      	ldr	r2, [pc, #168]	; (8001aa4 <HAL_TIM_Base_MspInit+0xb8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d116      	bne.n	8001a2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	4b29      	ldr	r3, [pc, #164]	; (8001aa8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	4a28      	ldr	r2, [pc, #160]	; (8001aa8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0e:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2019      	movs	r0, #25
 8001a20:	f000 fb1f 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a24:	2019      	movs	r0, #25
 8001a26:	f000 fb38 	bl	800209a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a2a:	e036      	b.n	8001a9a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a34:	d116      	bne.n	8001a64 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a1a      	ldr	r2, [pc, #104]	; (8001aa8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	201c      	movs	r0, #28
 8001a58:	f000 fb03 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a5c:	201c      	movs	r0, #28
 8001a5e:	f000 fb1c 	bl	800209a <HAL_NVIC_EnableIRQ>
}
 8001a62:	e01a      	b.n	8001a9a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a10      	ldr	r2, [pc, #64]	; (8001aac <HAL_TIM_Base_MspInit+0xc0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d115      	bne.n	8001a9a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a0c      	ldr	r2, [pc, #48]	; (8001aa8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	201d      	movs	r0, #29
 8001a90:	f000 fae7 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a94:	201d      	movs	r0, #29
 8001a96:	f000 fb00 	bl	800209a <HAL_NVIC_EnableIRQ>
}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40010000 	.word	0x40010000
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40000400 	.word	0x40000400

08001ab0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <HAL_TIM_MspPostInit+0x68>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d11e      	bne.n	8001b10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_TIM_MspPostInit+0x6c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <HAL_TIM_MspPostInit+0x6c>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_TIM_MspPostInit+0x6c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001aee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001af2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b00:	2301      	movs	r3, #1
 8001b02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <HAL_TIM_MspPostInit+0x70>)
 8001b0c:	f000 fb72 	bl	80021f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b10:	bf00      	nop
 8001b12:	3720      	adds	r7, #32
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40010000 	.word	0x40010000
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020000 	.word	0x40020000

08001b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08c      	sub	sp, #48	; 0x30
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a3a      	ldr	r2, [pc, #232]	; (8001c2c <HAL_UART_MspInit+0x108>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d134      	bne.n	8001bb0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
 8001b4a:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <HAL_UART_MspInit+0x10c>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	4a38      	ldr	r2, [pc, #224]	; (8001c30 <HAL_UART_MspInit+0x10c>)
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b54:	6413      	str	r3, [r2, #64]	; 0x40
 8001b56:	4b36      	ldr	r3, [pc, #216]	; (8001c30 <HAL_UART_MspInit+0x10c>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	61bb      	str	r3, [r7, #24]
 8001b60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	4b32      	ldr	r3, [pc, #200]	; (8001c30 <HAL_UART_MspInit+0x10c>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a31      	ldr	r2, [pc, #196]	; (8001c30 <HAL_UART_MspInit+0x10c>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <HAL_UART_MspInit+0x10c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b7e:	230c      	movs	r3, #12
 8001b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b8e:	2307      	movs	r3, #7
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 031c 	add.w	r3, r7, #28
 8001b96:	4619      	mov	r1, r3
 8001b98:	4826      	ldr	r0, [pc, #152]	; (8001c34 <HAL_UART_MspInit+0x110>)
 8001b9a:	f000 fb2b 	bl	80021f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	2026      	movs	r0, #38	; 0x26
 8001ba4:	f000 fa5d 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ba8:	2026      	movs	r0, #38	; 0x26
 8001baa:	f000 fa76 	bl	800209a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001bae:	e038      	b.n	8001c22 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a20      	ldr	r2, [pc, #128]	; (8001c38 <HAL_UART_MspInit+0x114>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d133      	bne.n	8001c22 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_UART_MspInit+0x10c>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4a1b      	ldr	r2, [pc, #108]	; (8001c30 <HAL_UART_MspInit+0x10c>)
 8001bc4:	f043 0320 	orr.w	r3, r3, #32
 8001bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bca:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_UART_MspInit+0x10c>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f003 0320 	and.w	r3, r3, #32
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <HAL_UART_MspInit+0x10c>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <HAL_UART_MspInit+0x10c>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_UART_MspInit+0x10c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bf2:	23c0      	movs	r3, #192	; 0xc0
 8001bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c02:	2308      	movs	r3, #8
 8001c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c06:	f107 031c 	add.w	r3, r7, #28
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480b      	ldr	r0, [pc, #44]	; (8001c3c <HAL_UART_MspInit+0x118>)
 8001c0e:	f000 faf1 	bl	80021f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2100      	movs	r1, #0
 8001c16:	2047      	movs	r0, #71	; 0x47
 8001c18:	f000 fa23 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001c1c:	2047      	movs	r0, #71	; 0x47
 8001c1e:	f000 fa3c 	bl	800209a <HAL_NVIC_EnableIRQ>
}
 8001c22:	bf00      	nop
 8001c24:	3730      	adds	r7, #48	; 0x30
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40004400 	.word	0x40004400
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020000 	.word	0x40020000
 8001c38:	40011400 	.word	0x40011400
 8001c3c:	40020800 	.word	0x40020800

08001c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <NMI_Handler+0x4>

08001c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4a:	e7fe      	b.n	8001c4a <HardFault_Handler+0x4>

08001c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <MemManage_Handler+0x4>

08001c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <BusFault_Handler+0x4>

08001c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <UsageFault_Handler+0x4>

08001c5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8c:	f000 f8ca 	bl	8001e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c9a:	f001 fbf1 	bl	8003480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000188 	.word	0x20000188

08001ca8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <TIM2_IRQHandler+0x10>)
 8001cae:	f001 fbe7 	bl	8003480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000214 	.word	0x20000214

08001cbc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <TIM3_IRQHandler+0x10>)
 8001cc2:	f001 fbdd 	bl	8003480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000140 	.word	0x20000140

08001cd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <USART2_IRQHandler+0x10>)
 8001cd6:	f002 fb3d 	bl	8004354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2000025c 	.word	0x2000025c

08001ce4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ce8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cec:	f000 fc52 	bl	8002594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <USART6_IRQHandler+0x10>)
 8001cfa:	f002 fb2b 	bl	8004354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200001d0 	.word	0x200001d0

08001d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <SystemInit+0x20>)
 8001d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <SystemInit+0x20>)
 8001d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d30:	480d      	ldr	r0, [pc, #52]	; (8001d68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d32:	490e      	ldr	r1, [pc, #56]	; (8001d6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d34:	4a0e      	ldr	r2, [pc, #56]	; (8001d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d38:	e002      	b.n	8001d40 <LoopCopyDataInit>

08001d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3e:	3304      	adds	r3, #4

08001d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d44:	d3f9      	bcc.n	8001d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d48:	4c0b      	ldr	r4, [pc, #44]	; (8001d78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d4c:	e001      	b.n	8001d52 <LoopFillZerobss>

08001d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d50:	3204      	adds	r2, #4

08001d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d54:	d3fb      	bcc.n	8001d4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d56:	f7ff ffd7 	bl	8001d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f003 f9b3 	bl	80050c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5e:	f7ff fa5f 	bl	8001220 <main>
  bx  lr    
 8001d62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d6c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001d70:	080051fc 	.word	0x080051fc
  ldr r2, =_sbss
 8001d74:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001d78:	200002a4 	.word	0x200002a4

08001d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC_IRQHandler>
	...

08001d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d84:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <HAL_Init+0x40>)
 8001d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_Init+0x40>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <HAL_Init+0x40>)
 8001d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <HAL_Init+0x40>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <HAL_Init+0x40>)
 8001da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da8:	2003      	movs	r0, #3
 8001daa:	f000 f94f 	bl	800204c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dae:	2000      	movs	r0, #0
 8001db0:	f000 f808 	bl	8001dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db4:	f7ff fdf2 	bl	800199c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023c00 	.word	0x40023c00

08001dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_InitTick+0x54>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_InitTick+0x58>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f967 	bl	80020b6 <HAL_SYSTICK_Config>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00e      	b.n	8001e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	d80a      	bhi.n	8001e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f000 f92f 	bl	8002062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e04:	4a06      	ldr	r2, [pc, #24]	; (8001e20 <HAL_InitTick+0x5c>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000004 	.word	0x20000004
 8001e1c:	2000000c 	.word	0x2000000c
 8001e20:	20000008 	.word	0x20000008

08001e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_IncTick+0x20>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_IncTick+0x24>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_IncTick+0x24>)
 8001e36:	6013      	str	r3, [r2, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	2000000c 	.word	0x2000000c
 8001e48:	200002a0 	.word	0x200002a0

08001e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_GetTick+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	200002a0 	.word	0x200002a0

08001e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff ffee 	bl	8001e4c <HAL_GetTick>
 8001e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7c:	d005      	beq.n	8001e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_Delay+0x44>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e8a:	bf00      	nop
 8001e8c:	f7ff ffde 	bl	8001e4c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d8f7      	bhi.n	8001e8c <HAL_Delay+0x28>
  {
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	2000000c 	.word	0x2000000c

08001eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ede:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	60d3      	str	r3, [r2, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <__NVIC_GetPriorityGrouping+0x18>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 0307 	and.w	r3, r3, #7
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db0b      	blt.n	8001f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	f003 021f 	and.w	r2, r3, #31
 8001f28:	4907      	ldr	r1, [pc, #28]	; (8001f48 <__NVIC_EnableIRQ+0x38>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	2001      	movs	r0, #1
 8001f32:	fa00 f202 	lsl.w	r2, r0, r2
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e100 	.word	0xe000e100

08001f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	db0a      	blt.n	8001f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	490c      	ldr	r1, [pc, #48]	; (8001f98 <__NVIC_SetPriority+0x4c>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f74:	e00a      	b.n	8001f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4908      	ldr	r1, [pc, #32]	; (8001f9c <__NVIC_SetPriority+0x50>)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3b04      	subs	r3, #4
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	761a      	strb	r2, [r3, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000e100 	.word	0xe000e100
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f1c3 0307 	rsb	r3, r3, #7
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	bf28      	it	cs
 8001fbe:	2304      	movcs	r3, #4
 8001fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d902      	bls.n	8001fd0 <NVIC_EncodePriority+0x30>
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3b03      	subs	r3, #3
 8001fce:	e000      	b.n	8001fd2 <NVIC_EncodePriority+0x32>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	43d9      	mvns	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	4313      	orrs	r3, r2
         );
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002018:	d301      	bcc.n	800201e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201a:	2301      	movs	r3, #1
 800201c:	e00f      	b.n	800203e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <SysTick_Config+0x40>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002026:	210f      	movs	r1, #15
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f7ff ff8e 	bl	8001f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <SysTick_Config+0x40>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <SysTick_Config+0x40>)
 8002038:	2207      	movs	r2, #7
 800203a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	e000e010 	.word	0xe000e010

0800204c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff29 	bl	8001eac <__NVIC_SetPriorityGrouping>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002074:	f7ff ff3e 	bl	8001ef4 <__NVIC_GetPriorityGrouping>
 8002078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	6978      	ldr	r0, [r7, #20]
 8002080:	f7ff ff8e 	bl	8001fa0 <NVIC_EncodePriority>
 8002084:	4602      	mov	r2, r0
 8002086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff5d 	bl	8001f4c <__NVIC_SetPriority>
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff31 	bl	8001f10 <__NVIC_EnableIRQ>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ffa2 	bl	8002008 <SysTick_Config>
 80020c4:	4603      	mov	r3, r0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020dc:	f7ff feb6 	bl	8001e4c <HAL_GetTick>
 80020e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d008      	beq.n	8002100 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2280      	movs	r2, #128	; 0x80
 80020f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e052      	b.n	80021a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0216 	bic.w	r2, r2, #22
 800210e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800211e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	2b00      	cmp	r3, #0
 8002126:	d103      	bne.n	8002130 <HAL_DMA_Abort+0x62>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212c:	2b00      	cmp	r3, #0
 800212e:	d007      	beq.n	8002140 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0208 	bic.w	r2, r2, #8
 800213e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002150:	e013      	b.n	800217a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002152:	f7ff fe7b 	bl	8001e4c <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b05      	cmp	r3, #5
 800215e:	d90c      	bls.n	800217a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2220      	movs	r2, #32
 8002164:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2203      	movs	r2, #3
 800216a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e015      	b.n	80021a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1e4      	bne.n	8002152 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218c:	223f      	movs	r2, #63	; 0x3f
 800218e:	409a      	lsls	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d004      	beq.n	80021cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e00c      	b.n	80021e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2205      	movs	r2, #5
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	e159      	b.n	80024c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002210:	2201      	movs	r2, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	429a      	cmp	r2, r3
 800222a:	f040 8148 	bne.w	80024be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d005      	beq.n	8002246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002242:	2b02      	cmp	r3, #2
 8002244:	d130      	bne.n	80022a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	2203      	movs	r2, #3
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800227c:	2201      	movs	r2, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 0201 	and.w	r2, r3, #1
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d017      	beq.n	80022e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d123      	bne.n	8002338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	08da      	lsrs	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3208      	adds	r2, #8
 80022f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	220f      	movs	r2, #15
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	08da      	lsrs	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3208      	adds	r2, #8
 8002332:	69b9      	ldr	r1, [r7, #24]
 8002334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2203      	movs	r2, #3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0203 	and.w	r2, r3, #3
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80a2 	beq.w	80024be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b57      	ldr	r3, [pc, #348]	; (80024dc <HAL_GPIO_Init+0x2e8>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	4a56      	ldr	r2, [pc, #344]	; (80024dc <HAL_GPIO_Init+0x2e8>)
 8002384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002388:	6453      	str	r3, [r2, #68]	; 0x44
 800238a:	4b54      	ldr	r3, [pc, #336]	; (80024dc <HAL_GPIO_Init+0x2e8>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002396:	4a52      	ldr	r2, [pc, #328]	; (80024e0 <HAL_GPIO_Init+0x2ec>)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	3302      	adds	r3, #2
 800239e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a49      	ldr	r2, [pc, #292]	; (80024e4 <HAL_GPIO_Init+0x2f0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d019      	beq.n	80023f6 <HAL_GPIO_Init+0x202>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a48      	ldr	r2, [pc, #288]	; (80024e8 <HAL_GPIO_Init+0x2f4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d013      	beq.n	80023f2 <HAL_GPIO_Init+0x1fe>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a47      	ldr	r2, [pc, #284]	; (80024ec <HAL_GPIO_Init+0x2f8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00d      	beq.n	80023ee <HAL_GPIO_Init+0x1fa>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a46      	ldr	r2, [pc, #280]	; (80024f0 <HAL_GPIO_Init+0x2fc>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d007      	beq.n	80023ea <HAL_GPIO_Init+0x1f6>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a45      	ldr	r2, [pc, #276]	; (80024f4 <HAL_GPIO_Init+0x300>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d101      	bne.n	80023e6 <HAL_GPIO_Init+0x1f2>
 80023e2:	2304      	movs	r3, #4
 80023e4:	e008      	b.n	80023f8 <HAL_GPIO_Init+0x204>
 80023e6:	2307      	movs	r3, #7
 80023e8:	e006      	b.n	80023f8 <HAL_GPIO_Init+0x204>
 80023ea:	2303      	movs	r3, #3
 80023ec:	e004      	b.n	80023f8 <HAL_GPIO_Init+0x204>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e002      	b.n	80023f8 <HAL_GPIO_Init+0x204>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_GPIO_Init+0x204>
 80023f6:	2300      	movs	r3, #0
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	f002 0203 	and.w	r2, r2, #3
 80023fe:	0092      	lsls	r2, r2, #2
 8002400:	4093      	lsls	r3, r2
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002408:	4935      	ldr	r1, [pc, #212]	; (80024e0 <HAL_GPIO_Init+0x2ec>)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	3302      	adds	r3, #2
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002416:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <HAL_GPIO_Init+0x304>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800243a:	4a2f      	ldr	r2, [pc, #188]	; (80024f8 <HAL_GPIO_Init+0x304>)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002440:	4b2d      	ldr	r3, [pc, #180]	; (80024f8 <HAL_GPIO_Init+0x304>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002464:	4a24      	ldr	r2, [pc, #144]	; (80024f8 <HAL_GPIO_Init+0x304>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246a:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <HAL_GPIO_Init+0x304>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800248e:	4a1a      	ldr	r2, [pc, #104]	; (80024f8 <HAL_GPIO_Init+0x304>)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002494:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <HAL_GPIO_Init+0x304>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024b8:	4a0f      	ldr	r2, [pc, #60]	; (80024f8 <HAL_GPIO_Init+0x304>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3301      	adds	r3, #1
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2b0f      	cmp	r3, #15
 80024c8:	f67f aea2 	bls.w	8002210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	3724      	adds	r7, #36	; 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40013800 	.word	0x40013800
 80024e4:	40020000 	.word	0x40020000
 80024e8:	40020400 	.word	0x40020400
 80024ec:	40020800 	.word	0x40020800
 80024f0:	40020c00 	.word	0x40020c00
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40013c00 	.word	0x40013c00

080024fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	887b      	ldrh	r3, [r7, #2]
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	e001      	b.n	800251e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800251e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
 8002538:	4613      	mov	r3, r2
 800253a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800253c:	787b      	ldrb	r3, [r7, #1]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002548:	e003      	b.n	8002552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800254a:	887b      	ldrh	r3, [r7, #2]
 800254c:	041a      	lsls	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	619a      	str	r2, [r3, #24]
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800255e:	b480      	push	{r7}
 8002560:	b085      	sub	sp, #20
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	460b      	mov	r3, r1
 8002568:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002570:	887a      	ldrh	r2, [r7, #2]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4013      	ands	r3, r2
 8002576:	041a      	lsls	r2, r3, #16
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	43d9      	mvns	r1, r3
 800257c:	887b      	ldrh	r3, [r7, #2]
 800257e:	400b      	ands	r3, r1
 8002580:	431a      	orrs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d006      	beq.n	80025b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025aa:	4a05      	ldr	r2, [pc, #20]	; (80025c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe fb82 	bl	8000cbc <HAL_GPIO_EXTI_Callback>
  }
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40013c00 	.word	0x40013c00

080025c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e264      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d075      	beq.n	80026ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025e2:	4ba3      	ldr	r3, [pc, #652]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d00c      	beq.n	8002608 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ee:	4ba0      	ldr	r3, [pc, #640]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d112      	bne.n	8002620 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025fa:	4b9d      	ldr	r3, [pc, #628]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002606:	d10b      	bne.n	8002620 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	4b99      	ldr	r3, [pc, #612]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d05b      	beq.n	80026cc <HAL_RCC_OscConfig+0x108>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d157      	bne.n	80026cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e23f      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002628:	d106      	bne.n	8002638 <HAL_RCC_OscConfig+0x74>
 800262a:	4b91      	ldr	r3, [pc, #580]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a90      	ldr	r2, [pc, #576]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e01d      	b.n	8002674 <HAL_RCC_OscConfig+0xb0>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0x98>
 8002642:	4b8b      	ldr	r3, [pc, #556]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a8a      	ldr	r2, [pc, #552]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b88      	ldr	r3, [pc, #544]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a87      	ldr	r2, [pc, #540]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0xb0>
 800265c:	4b84      	ldr	r3, [pc, #528]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a83      	ldr	r2, [pc, #524]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b81      	ldr	r3, [pc, #516]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a80      	ldr	r2, [pc, #512]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7ff fbe6 	bl	8001e4c <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002684:	f7ff fbe2 	bl	8001e4c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e204      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b76      	ldr	r3, [pc, #472]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0xc0>
 80026a2:	e014      	b.n	80026ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7ff fbd2 	bl	8001e4c <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ac:	f7ff fbce 	bl	8001e4c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1f0      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	4b6c      	ldr	r3, [pc, #432]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0xe8>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d063      	beq.n	80027a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026da:	4b65      	ldr	r3, [pc, #404]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026e6:	4b62      	ldr	r3, [pc, #392]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d11c      	bne.n	800272c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026f2:	4b5f      	ldr	r3, [pc, #380]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d116      	bne.n	800272c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fe:	4b5c      	ldr	r3, [pc, #368]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_RCC_OscConfig+0x152>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e1c4      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002716:	4b56      	ldr	r3, [pc, #344]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4952      	ldr	r1, [pc, #328]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	e03a      	b.n	80027a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d020      	beq.n	8002776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002734:	4b4f      	ldr	r3, [pc, #316]	; (8002874 <HAL_RCC_OscConfig+0x2b0>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7ff fb87 	bl	8001e4c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002742:	f7ff fb83 	bl	8001e4c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1a5      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002754:	4b46      	ldr	r3, [pc, #280]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	4b43      	ldr	r3, [pc, #268]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4940      	ldr	r1, [pc, #256]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002776:	4b3f      	ldr	r3, [pc, #252]	; (8002874 <HAL_RCC_OscConfig+0x2b0>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7ff fb66 	bl	8001e4c <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002784:	f7ff fb62 	bl	8001e4c <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e184      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	4b36      	ldr	r3, [pc, #216]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d030      	beq.n	8002810 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d016      	beq.n	80027e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b6:	4b30      	ldr	r3, [pc, #192]	; (8002878 <HAL_RCC_OscConfig+0x2b4>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7ff fb46 	bl	8001e4c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027c4:	f7ff fb42 	bl	8001e4c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e164      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d6:	4b26      	ldr	r3, [pc, #152]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x200>
 80027e2:	e015      	b.n	8002810 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e4:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_RCC_OscConfig+0x2b4>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ea:	f7ff fb2f 	bl	8001e4c <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f2:	f7ff fb2b 	bl	8001e4c <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e14d      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002804:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80a0 	beq.w	800295e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002822:	4b13      	ldr	r3, [pc, #76]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10f      	bne.n	800284e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283c:	6413      	str	r3, [r2, #64]	; 0x40
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800284a:	2301      	movs	r3, #1
 800284c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCC_OscConfig+0x2b8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d121      	bne.n	800289e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <HAL_RCC_OscConfig+0x2b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a07      	ldr	r2, [pc, #28]	; (800287c <HAL_RCC_OscConfig+0x2b8>)
 8002860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002866:	f7ff faf1 	bl	8001e4c <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286c:	e011      	b.n	8002892 <HAL_RCC_OscConfig+0x2ce>
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	42470000 	.word	0x42470000
 8002878:	42470e80 	.word	0x42470e80
 800287c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002880:	f7ff fae4 	bl	8001e4c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e106      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002892:	4b85      	ldr	r3, [pc, #532]	; (8002aa8 <HAL_RCC_OscConfig+0x4e4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d106      	bne.n	80028b4 <HAL_RCC_OscConfig+0x2f0>
 80028a6:	4b81      	ldr	r3, [pc, #516]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028aa:	4a80      	ldr	r2, [pc, #512]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6713      	str	r3, [r2, #112]	; 0x70
 80028b2:	e01c      	b.n	80028ee <HAL_RCC_OscConfig+0x32a>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d10c      	bne.n	80028d6 <HAL_RCC_OscConfig+0x312>
 80028bc:	4b7b      	ldr	r3, [pc, #492]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	4a7a      	ldr	r2, [pc, #488]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028c2:	f043 0304 	orr.w	r3, r3, #4
 80028c6:	6713      	str	r3, [r2, #112]	; 0x70
 80028c8:	4b78      	ldr	r3, [pc, #480]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	4a77      	ldr	r2, [pc, #476]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6713      	str	r3, [r2, #112]	; 0x70
 80028d4:	e00b      	b.n	80028ee <HAL_RCC_OscConfig+0x32a>
 80028d6:	4b75      	ldr	r3, [pc, #468]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	4a74      	ldr	r2, [pc, #464]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	6713      	str	r3, [r2, #112]	; 0x70
 80028e2:	4b72      	ldr	r3, [pc, #456]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	4a71      	ldr	r2, [pc, #452]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d015      	beq.n	8002922 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f6:	f7ff faa9 	bl	8001e4c <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7ff faa5 	bl	8001e4c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f241 3288 	movw	r2, #5000	; 0x1388
 800290c:	4293      	cmp	r3, r2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e0c5      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002914:	4b65      	ldr	r3, [pc, #404]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ee      	beq.n	80028fe <HAL_RCC_OscConfig+0x33a>
 8002920:	e014      	b.n	800294c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002922:	f7ff fa93 	bl	8001e4c <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7ff fa8f 	bl	8001e4c <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	; 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e0af      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002940:	4b5a      	ldr	r3, [pc, #360]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1ee      	bne.n	800292a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800294c:	7dfb      	ldrb	r3, [r7, #23]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d105      	bne.n	800295e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002952:	4b56      	ldr	r3, [pc, #344]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	4a55      	ldr	r2, [pc, #340]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 8002958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 809b 	beq.w	8002a9e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002968:	4b50      	ldr	r3, [pc, #320]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b08      	cmp	r3, #8
 8002972:	d05c      	beq.n	8002a2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d141      	bne.n	8002a00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297c:	4b4c      	ldr	r3, [pc, #304]	; (8002ab0 <HAL_RCC_OscConfig+0x4ec>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7ff fa63 	bl	8001e4c <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800298a:	f7ff fa5f 	bl	8001e4c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e081      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299c:	4b43      	ldr	r3, [pc, #268]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f0      	bne.n	800298a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69da      	ldr	r2, [r3, #28]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	019b      	lsls	r3, r3, #6
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	3b01      	subs	r3, #1
 80029c2:	041b      	lsls	r3, r3, #16
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ca:	061b      	lsls	r3, r3, #24
 80029cc:	4937      	ldr	r1, [pc, #220]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d2:	4b37      	ldr	r3, [pc, #220]	; (8002ab0 <HAL_RCC_OscConfig+0x4ec>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7ff fa38 	bl	8001e4c <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e0:	f7ff fa34 	bl	8001e4c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e056      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x41c>
 80029fe:	e04e      	b.n	8002a9e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <HAL_RCC_OscConfig+0x4ec>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7ff fa21 	bl	8001e4c <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7ff fa1d 	bl	8001e4c <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e03f      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a20:	4b22      	ldr	r3, [pc, #136]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f0      	bne.n	8002a0e <HAL_RCC_OscConfig+0x44a>
 8002a2c:	e037      	b.n	8002a9e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e032      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <HAL_RCC_OscConfig+0x4e8>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d028      	beq.n	8002a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d121      	bne.n	8002a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d11a      	bne.n	8002a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a70:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d111      	bne.n	8002a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	3b01      	subs	r3, #1
 8002a84:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40007000 	.word	0x40007000
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	42470060 	.word	0x42470060

08002ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0cc      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b68      	ldr	r3, [pc, #416]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d90c      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b65      	ldr	r3, [pc, #404]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b63      	ldr	r3, [pc, #396]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0b8      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b08:	4b59      	ldr	r3, [pc, #356]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4a58      	ldr	r2, [pc, #352]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b20:	4b53      	ldr	r3, [pc, #332]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a52      	ldr	r2, [pc, #328]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2c:	4b50      	ldr	r3, [pc, #320]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	494d      	ldr	r1, [pc, #308]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d044      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	4b47      	ldr	r3, [pc, #284]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d119      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e07f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d003      	beq.n	8002b72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d107      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b72:	4b3f      	ldr	r3, [pc, #252]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e06f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b82:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e067      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b92:	4b37      	ldr	r3, [pc, #220]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f023 0203 	bic.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4934      	ldr	r1, [pc, #208]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba4:	f7ff f952 	bl	8001e4c <HAL_GetTick>
 8002ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bac:	f7ff f94e 	bl	8001e4c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e04f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	4b2b      	ldr	r3, [pc, #172]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 020c 	and.w	r2, r3, #12
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d1eb      	bne.n	8002bac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b25      	ldr	r3, [pc, #148]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d20c      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b22      	ldr	r3, [pc, #136]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <HAL_RCC_ClockConfig+0x1b8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e032      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c08:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4916      	ldr	r1, [pc, #88]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c26:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	490e      	ldr	r1, [pc, #56]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c3a:	f000 f821 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	490a      	ldr	r1, [pc, #40]	; (8002c74 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	5ccb      	ldrb	r3, [r1, r3]
 8002c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c52:	4a09      	ldr	r2, [pc, #36]	; (8002c78 <HAL_RCC_ClockConfig+0x1c4>)
 8002c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_RCC_ClockConfig+0x1c8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff f8b2 	bl	8001dc4 <HAL_InitTick>

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40023c00 	.word	0x40023c00
 8002c70:	40023800 	.word	0x40023800
 8002c74:	080051d4 	.word	0x080051d4
 8002c78:	20000004 	.word	0x20000004
 8002c7c:	20000008 	.word	0x20000008

08002c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	2300      	movs	r3, #0
 8002c92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c98:	4b67      	ldr	r3, [pc, #412]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	f200 80bd 	bhi.w	8002e24 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d003      	beq.n	8002cba <HAL_RCC_GetSysClockFreq+0x3a>
 8002cb2:	e0b7      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cb4:	4b61      	ldr	r3, [pc, #388]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002cb6:	60bb      	str	r3, [r7, #8]
       break;
 8002cb8:	e0b7      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cba:	4b61      	ldr	r3, [pc, #388]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002cbc:	60bb      	str	r3, [r7, #8]
      break;
 8002cbe:	e0b4      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc0:	4b5d      	ldr	r3, [pc, #372]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cca:	4b5b      	ldr	r3, [pc, #364]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d04d      	beq.n	8002d72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd6:	4b58      	ldr	r3, [pc, #352]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	099b      	lsrs	r3, r3, #6
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ce6:	f04f 0100 	mov.w	r1, #0
 8002cea:	ea02 0800 	and.w	r8, r2, r0
 8002cee:	ea03 0901 	and.w	r9, r3, r1
 8002cf2:	4640      	mov	r0, r8
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	014b      	lsls	r3, r1, #5
 8002d00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d04:	0142      	lsls	r2, r0, #5
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	ebb0 0008 	subs.w	r0, r0, r8
 8002d0e:	eb61 0109 	sbc.w	r1, r1, r9
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	018b      	lsls	r3, r1, #6
 8002d1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d20:	0182      	lsls	r2, r0, #6
 8002d22:	1a12      	subs	r2, r2, r0
 8002d24:	eb63 0301 	sbc.w	r3, r3, r1
 8002d28:	f04f 0000 	mov.w	r0, #0
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	00d9      	lsls	r1, r3, #3
 8002d32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d36:	00d0      	lsls	r0, r2, #3
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	eb12 0208 	adds.w	r2, r2, r8
 8002d40:	eb43 0309 	adc.w	r3, r3, r9
 8002d44:	f04f 0000 	mov.w	r0, #0
 8002d48:	f04f 0100 	mov.w	r1, #0
 8002d4c:	0259      	lsls	r1, r3, #9
 8002d4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d52:	0250      	lsls	r0, r2, #9
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	f7fd fe2e 	bl	80009c4 <__aeabi_uldivmod>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	e04a      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d72:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	099b      	lsrs	r3, r3, #6
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d82:	f04f 0100 	mov.w	r1, #0
 8002d86:	ea02 0400 	and.w	r4, r2, r0
 8002d8a:	ea03 0501 	and.w	r5, r3, r1
 8002d8e:	4620      	mov	r0, r4
 8002d90:	4629      	mov	r1, r5
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	014b      	lsls	r3, r1, #5
 8002d9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002da0:	0142      	lsls	r2, r0, #5
 8002da2:	4610      	mov	r0, r2
 8002da4:	4619      	mov	r1, r3
 8002da6:	1b00      	subs	r0, r0, r4
 8002da8:	eb61 0105 	sbc.w	r1, r1, r5
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	018b      	lsls	r3, r1, #6
 8002db6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002dba:	0182      	lsls	r2, r0, #6
 8002dbc:	1a12      	subs	r2, r2, r0
 8002dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8002dc2:	f04f 0000 	mov.w	r0, #0
 8002dc6:	f04f 0100 	mov.w	r1, #0
 8002dca:	00d9      	lsls	r1, r3, #3
 8002dcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dd0:	00d0      	lsls	r0, r2, #3
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	1912      	adds	r2, r2, r4
 8002dd8:	eb45 0303 	adc.w	r3, r5, r3
 8002ddc:	f04f 0000 	mov.w	r0, #0
 8002de0:	f04f 0100 	mov.w	r1, #0
 8002de4:	0299      	lsls	r1, r3, #10
 8002de6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002dea:	0290      	lsls	r0, r2, #10
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	461a      	mov	r2, r3
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	f7fd fde2 	bl	80009c4 <__aeabi_uldivmod>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4613      	mov	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	3301      	adds	r3, #1
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e20:	60bb      	str	r3, [r7, #8]
      break;
 8002e22:	e002      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e26:	60bb      	str	r3, [r7, #8]
      break;
 8002e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	00f42400 	.word	0x00f42400
 8002e40:	007a1200 	.word	0x007a1200

08002e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000004 	.word	0x20000004

08002e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e60:	f7ff fff0 	bl	8002e44 <HAL_RCC_GetHCLKFreq>
 8002e64:	4602      	mov	r2, r0
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	0a9b      	lsrs	r3, r3, #10
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	4903      	ldr	r1, [pc, #12]	; (8002e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e72:	5ccb      	ldrb	r3, [r1, r3]
 8002e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	080051e4 	.word	0x080051e4

08002e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e88:	f7ff ffdc 	bl	8002e44 <HAL_RCC_GetHCLKFreq>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	0b5b      	lsrs	r3, r3, #13
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	4903      	ldr	r1, [pc, #12]	; (8002ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e9a:	5ccb      	ldrb	r3, [r1, r3]
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	080051e4 	.word	0x080051e4

08002eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e041      	b.n	8002f42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe fd8a 	bl	80019ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f000 fd82 	bl	80039f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d001      	beq.n	8002f64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e044      	b.n	8002fee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a1e      	ldr	r2, [pc, #120]	; (8002ffc <HAL_TIM_Base_Start_IT+0xb0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d018      	beq.n	8002fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8e:	d013      	beq.n	8002fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1a      	ldr	r2, [pc, #104]	; (8003000 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00e      	beq.n	8002fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a19      	ldr	r2, [pc, #100]	; (8003004 <HAL_TIM_Base_Start_IT+0xb8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d009      	beq.n	8002fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a17      	ldr	r2, [pc, #92]	; (8003008 <HAL_TIM_Base_Start_IT+0xbc>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a16      	ldr	r2, [pc, #88]	; (800300c <HAL_TIM_Base_Start_IT+0xc0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d111      	bne.n	8002fdc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b06      	cmp	r3, #6
 8002fc8:	d010      	beq.n	8002fec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0201 	orr.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fda:	e007      	b.n	8002fec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40010000 	.word	0x40010000
 8003000:	40000400 	.word	0x40000400
 8003004:	40000800 	.word	0x40000800
 8003008:	40000c00 	.word	0x40000c00
 800300c:	40014000 	.word	0x40014000

08003010 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6a1a      	ldr	r2, [r3, #32]
 800302e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003032:	4013      	ands	r3, r2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10f      	bne.n	8003058 <HAL_TIM_Base_Stop_IT+0x48>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6a1a      	ldr	r2, [r3, #32]
 800303e:	f240 4344 	movw	r3, #1092	; 0x444
 8003042:	4013      	ands	r3, r2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d107      	bne.n	8003058 <HAL_TIM_Base_Stop_IT+0x48>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0201 	bic.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e041      	b.n	8003104 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d106      	bne.n	800309a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f839 	bl	800310c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2202      	movs	r2, #2
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3304      	adds	r3, #4
 80030aa:	4619      	mov	r1, r3
 80030ac:	4610      	mov	r0, r2
 80030ae:	f000 fca1 	bl	80039f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d109      	bne.n	8003148 <HAL_TIM_PWM_Start_IT+0x28>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	bf14      	ite	ne
 8003140:	2301      	movne	r3, #1
 8003142:	2300      	moveq	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	e022      	b.n	800318e <HAL_TIM_PWM_Start_IT+0x6e>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b04      	cmp	r3, #4
 800314c:	d109      	bne.n	8003162 <HAL_TIM_PWM_Start_IT+0x42>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b01      	cmp	r3, #1
 8003158:	bf14      	ite	ne
 800315a:	2301      	movne	r3, #1
 800315c:	2300      	moveq	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	e015      	b.n	800318e <HAL_TIM_PWM_Start_IT+0x6e>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d109      	bne.n	800317c <HAL_TIM_PWM_Start_IT+0x5c>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b01      	cmp	r3, #1
 8003172:	bf14      	ite	ne
 8003174:	2301      	movne	r3, #1
 8003176:	2300      	moveq	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	e008      	b.n	800318e <HAL_TIM_PWM_Start_IT+0x6e>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	bf14      	ite	ne
 8003188:	2301      	movne	r3, #1
 800318a:	2300      	moveq	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0b3      	b.n	80032fe <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d104      	bne.n	80031a6 <HAL_TIM_PWM_Start_IT+0x86>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031a4:	e013      	b.n	80031ce <HAL_TIM_PWM_Start_IT+0xae>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d104      	bne.n	80031b6 <HAL_TIM_PWM_Start_IT+0x96>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031b4:	e00b      	b.n	80031ce <HAL_TIM_PWM_Start_IT+0xae>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d104      	bne.n	80031c6 <HAL_TIM_PWM_Start_IT+0xa6>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031c4:	e003      	b.n	80031ce <HAL_TIM_PWM_Start_IT+0xae>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2202      	movs	r2, #2
 80031ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b0c      	cmp	r3, #12
 80031d2:	d841      	bhi.n	8003258 <HAL_TIM_PWM_Start_IT+0x138>
 80031d4:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <HAL_TIM_PWM_Start_IT+0xbc>)
 80031d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	08003211 	.word	0x08003211
 80031e0:	08003259 	.word	0x08003259
 80031e4:	08003259 	.word	0x08003259
 80031e8:	08003259 	.word	0x08003259
 80031ec:	08003223 	.word	0x08003223
 80031f0:	08003259 	.word	0x08003259
 80031f4:	08003259 	.word	0x08003259
 80031f8:	08003259 	.word	0x08003259
 80031fc:	08003235 	.word	0x08003235
 8003200:	08003259 	.word	0x08003259
 8003204:	08003259 	.word	0x08003259
 8003208:	08003259 	.word	0x08003259
 800320c:	08003247 	.word	0x08003247
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0202 	orr.w	r2, r2, #2
 800321e:	60da      	str	r2, [r3, #12]
      break;
 8003220:	e01d      	b.n	800325e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0204 	orr.w	r2, r2, #4
 8003230:	60da      	str	r2, [r3, #12]
      break;
 8003232:	e014      	b.n	800325e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0208 	orr.w	r2, r2, #8
 8003242:	60da      	str	r2, [r3, #12]
      break;
 8003244:	e00b      	b.n	800325e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0210 	orr.w	r2, r2, #16
 8003254:	60da      	str	r2, [r3, #12]
      break;
 8003256:	e002      	b.n	800325e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
      break;
 800325c:	bf00      	nop
  }

  if (status == HAL_OK)
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d14b      	bne.n	80032fc <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2201      	movs	r2, #1
 800326a:	6839      	ldr	r1, [r7, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fe67 	bl	8003f40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a24      	ldr	r2, [pc, #144]	; (8003308 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d107      	bne.n	800328c <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800328a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1d      	ldr	r2, [pc, #116]	; (8003308 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d018      	beq.n	80032c8 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329e:	d013      	beq.n	80032c8 <HAL_TIM_PWM_Start_IT+0x1a8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a19      	ldr	r2, [pc, #100]	; (800330c <HAL_TIM_PWM_Start_IT+0x1ec>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00e      	beq.n	80032c8 <HAL_TIM_PWM_Start_IT+0x1a8>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a18      	ldr	r2, [pc, #96]	; (8003310 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d009      	beq.n	80032c8 <HAL_TIM_PWM_Start_IT+0x1a8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a16      	ldr	r2, [pc, #88]	; (8003314 <HAL_TIM_PWM_Start_IT+0x1f4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d004      	beq.n	80032c8 <HAL_TIM_PWM_Start_IT+0x1a8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a15      	ldr	r2, [pc, #84]	; (8003318 <HAL_TIM_PWM_Start_IT+0x1f8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d111      	bne.n	80032ec <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b06      	cmp	r3, #6
 80032d8:	d010      	beq.n	80032fc <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0201 	orr.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ea:	e007      	b.n	80032fc <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40010000 	.word	0x40010000
 800330c:	40000400 	.word	0x40000400
 8003310:	40000800 	.word	0x40000800
 8003314:	40000c00 	.word	0x40000c00
 8003318:	40014000 	.word	0x40014000

0800331c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b0c      	cmp	r3, #12
 800332e:	d841      	bhi.n	80033b4 <HAL_TIM_PWM_Stop_IT+0x98>
 8003330:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	0800336d 	.word	0x0800336d
 800333c:	080033b5 	.word	0x080033b5
 8003340:	080033b5 	.word	0x080033b5
 8003344:	080033b5 	.word	0x080033b5
 8003348:	0800337f 	.word	0x0800337f
 800334c:	080033b5 	.word	0x080033b5
 8003350:	080033b5 	.word	0x080033b5
 8003354:	080033b5 	.word	0x080033b5
 8003358:	08003391 	.word	0x08003391
 800335c:	080033b5 	.word	0x080033b5
 8003360:	080033b5 	.word	0x080033b5
 8003364:	080033b5 	.word	0x080033b5
 8003368:	080033a3 	.word	0x080033a3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0202 	bic.w	r2, r2, #2
 800337a:	60da      	str	r2, [r3, #12]
      break;
 800337c:	e01d      	b.n	80033ba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0204 	bic.w	r2, r2, #4
 800338c:	60da      	str	r2, [r3, #12]
      break;
 800338e:	e014      	b.n	80033ba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0208 	bic.w	r2, r2, #8
 800339e:	60da      	str	r2, [r3, #12]
      break;
 80033a0:	e00b      	b.n	80033ba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0210 	bic.w	r2, r2, #16
 80033b0:	60da      	str	r2, [r3, #12]
      break;
 80033b2:	e002      	b.n	80033ba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	73fb      	strb	r3, [r7, #15]
      break;
 80033b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d157      	bne.n	8003470 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2200      	movs	r2, #0
 80033c6:	6839      	ldr	r1, [r7, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fdb9 	bl	8003f40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a2a      	ldr	r2, [pc, #168]	; (800347c <HAL_TIM_PWM_Stop_IT+0x160>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d117      	bne.n	8003408 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6a1a      	ldr	r2, [r3, #32]
 80033de:	f241 1311 	movw	r3, #4369	; 0x1111
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10f      	bne.n	8003408 <HAL_TIM_PWM_Stop_IT+0xec>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6a1a      	ldr	r2, [r3, #32]
 80033ee:	f240 4344 	movw	r3, #1092	; 0x444
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d107      	bne.n	8003408 <HAL_TIM_PWM_Stop_IT+0xec>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003406:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6a1a      	ldr	r2, [r3, #32]
 800340e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10f      	bne.n	8003438 <HAL_TIM_PWM_Stop_IT+0x11c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6a1a      	ldr	r2, [r3, #32]
 800341e:	f240 4344 	movw	r3, #1092	; 0x444
 8003422:	4013      	ands	r3, r2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d107      	bne.n	8003438 <HAL_TIM_PWM_Stop_IT+0x11c>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0201 	bic.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d104      	bne.n	8003448 <HAL_TIM_PWM_Stop_IT+0x12c>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003446:	e013      	b.n	8003470 <HAL_TIM_PWM_Stop_IT+0x154>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2b04      	cmp	r3, #4
 800344c:	d104      	bne.n	8003458 <HAL_TIM_PWM_Stop_IT+0x13c>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003456:	e00b      	b.n	8003470 <HAL_TIM_PWM_Stop_IT+0x154>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2b08      	cmp	r3, #8
 800345c:	d104      	bne.n	8003468 <HAL_TIM_PWM_Stop_IT+0x14c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003466:	e003      	b.n	8003470 <HAL_TIM_PWM_Stop_IT+0x154>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003470:	7bfb      	ldrb	r3, [r7, #15]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40010000 	.word	0x40010000

08003480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b02      	cmp	r3, #2
 8003494:	d122      	bne.n	80034dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d11b      	bne.n	80034dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0202 	mvn.w	r2, #2
 80034ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fa77 	bl	80039b6 <HAL_TIM_IC_CaptureCallback>
 80034c8:	e005      	b.n	80034d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fa69 	bl	80039a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 fa7a 	bl	80039ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d122      	bne.n	8003530 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d11b      	bne.n	8003530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0204 	mvn.w	r2, #4
 8003500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2202      	movs	r2, #2
 8003506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fa4d 	bl	80039b6 <HAL_TIM_IC_CaptureCallback>
 800351c:	e005      	b.n	800352a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fa3f 	bl	80039a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fa50 	bl	80039ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b08      	cmp	r3, #8
 800353c:	d122      	bne.n	8003584 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b08      	cmp	r3, #8
 800354a:	d11b      	bne.n	8003584 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0208 	mvn.w	r2, #8
 8003554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2204      	movs	r2, #4
 800355a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fa23 	bl	80039b6 <HAL_TIM_IC_CaptureCallback>
 8003570:	e005      	b.n	800357e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 fa15 	bl	80039a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 fa26 	bl	80039ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b10      	cmp	r3, #16
 8003590:	d122      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b10      	cmp	r3, #16
 800359e:	d11b      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0210 	mvn.w	r2, #16
 80035a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2208      	movs	r2, #8
 80035ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f9f9 	bl	80039b6 <HAL_TIM_IC_CaptureCallback>
 80035c4:	e005      	b.n	80035d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f9eb 	bl	80039a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f9fc 	bl	80039ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d10e      	bne.n	8003604 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d107      	bne.n	8003604 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0201 	mvn.w	r2, #1
 80035fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fd fb98 	bl	8000d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360e:	2b80      	cmp	r3, #128	; 0x80
 8003610:	d10e      	bne.n	8003630 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361c:	2b80      	cmp	r3, #128	; 0x80
 800361e:	d107      	bne.n	8003630 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fd78 	bl	8004120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b40      	cmp	r3, #64	; 0x40
 800363c:	d10e      	bne.n	800365c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003648:	2b40      	cmp	r3, #64	; 0x40
 800364a:	d107      	bne.n	800365c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f9c1 	bl	80039de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b20      	cmp	r3, #32
 8003668:	d10e      	bne.n	8003688 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0320 	and.w	r3, r3, #32
 8003674:	2b20      	cmp	r3, #32
 8003676:	d107      	bne.n	8003688 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0220 	mvn.w	r2, #32
 8003680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fd42 	bl	800410c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e0ae      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b0c      	cmp	r3, #12
 80036ba:	f200 809f 	bhi.w	80037fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036be:	a201      	add	r2, pc, #4	; (adr r2, 80036c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c4:	080036f9 	.word	0x080036f9
 80036c8:	080037fd 	.word	0x080037fd
 80036cc:	080037fd 	.word	0x080037fd
 80036d0:	080037fd 	.word	0x080037fd
 80036d4:	08003739 	.word	0x08003739
 80036d8:	080037fd 	.word	0x080037fd
 80036dc:	080037fd 	.word	0x080037fd
 80036e0:	080037fd 	.word	0x080037fd
 80036e4:	0800377b 	.word	0x0800377b
 80036e8:	080037fd 	.word	0x080037fd
 80036ec:	080037fd 	.word	0x080037fd
 80036f0:	080037fd 	.word	0x080037fd
 80036f4:	080037bb 	.word	0x080037bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f9f8 	bl	8003af4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0208 	orr.w	r2, r2, #8
 8003712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0204 	bic.w	r2, r2, #4
 8003722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6999      	ldr	r1, [r3, #24]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	619a      	str	r2, [r3, #24]
      break;
 8003736:	e064      	b.n	8003802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fa3e 	bl	8003bc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6999      	ldr	r1, [r3, #24]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	021a      	lsls	r2, r3, #8
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	619a      	str	r2, [r3, #24]
      break;
 8003778:	e043      	b.n	8003802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fa89 	bl	8003c98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0208 	orr.w	r2, r2, #8
 8003794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69da      	ldr	r2, [r3, #28]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0204 	bic.w	r2, r2, #4
 80037a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69d9      	ldr	r1, [r3, #28]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	61da      	str	r2, [r3, #28]
      break;
 80037b8:	e023      	b.n	8003802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 fad3 	bl	8003d6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69da      	ldr	r2, [r3, #28]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69da      	ldr	r2, [r3, #28]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69d9      	ldr	r1, [r3, #28]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	021a      	lsls	r2, r3, #8
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	61da      	str	r2, [r3, #28]
      break;
 80037fa:	e002      	b.n	8003802 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003800:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800380a:	7dfb      	ldrb	r3, [r7, #23]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_TIM_ConfigClockSource+0x1c>
 800382c:	2302      	movs	r3, #2
 800382e:	e0b4      	b.n	800399a <HAL_TIM_ConfigClockSource+0x186>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800384e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003856:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003868:	d03e      	beq.n	80038e8 <HAL_TIM_ConfigClockSource+0xd4>
 800386a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800386e:	f200 8087 	bhi.w	8003980 <HAL_TIM_ConfigClockSource+0x16c>
 8003872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003876:	f000 8086 	beq.w	8003986 <HAL_TIM_ConfigClockSource+0x172>
 800387a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387e:	d87f      	bhi.n	8003980 <HAL_TIM_ConfigClockSource+0x16c>
 8003880:	2b70      	cmp	r3, #112	; 0x70
 8003882:	d01a      	beq.n	80038ba <HAL_TIM_ConfigClockSource+0xa6>
 8003884:	2b70      	cmp	r3, #112	; 0x70
 8003886:	d87b      	bhi.n	8003980 <HAL_TIM_ConfigClockSource+0x16c>
 8003888:	2b60      	cmp	r3, #96	; 0x60
 800388a:	d050      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x11a>
 800388c:	2b60      	cmp	r3, #96	; 0x60
 800388e:	d877      	bhi.n	8003980 <HAL_TIM_ConfigClockSource+0x16c>
 8003890:	2b50      	cmp	r3, #80	; 0x50
 8003892:	d03c      	beq.n	800390e <HAL_TIM_ConfigClockSource+0xfa>
 8003894:	2b50      	cmp	r3, #80	; 0x50
 8003896:	d873      	bhi.n	8003980 <HAL_TIM_ConfigClockSource+0x16c>
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d058      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x13a>
 800389c:	2b40      	cmp	r3, #64	; 0x40
 800389e:	d86f      	bhi.n	8003980 <HAL_TIM_ConfigClockSource+0x16c>
 80038a0:	2b30      	cmp	r3, #48	; 0x30
 80038a2:	d064      	beq.n	800396e <HAL_TIM_ConfigClockSource+0x15a>
 80038a4:	2b30      	cmp	r3, #48	; 0x30
 80038a6:	d86b      	bhi.n	8003980 <HAL_TIM_ConfigClockSource+0x16c>
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d060      	beq.n	800396e <HAL_TIM_ConfigClockSource+0x15a>
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	d867      	bhi.n	8003980 <HAL_TIM_ConfigClockSource+0x16c>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d05c      	beq.n	800396e <HAL_TIM_ConfigClockSource+0x15a>
 80038b4:	2b10      	cmp	r3, #16
 80038b6:	d05a      	beq.n	800396e <HAL_TIM_ConfigClockSource+0x15a>
 80038b8:	e062      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	6899      	ldr	r1, [r3, #8]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f000 fb19 	bl	8003f00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	609a      	str	r2, [r3, #8]
      break;
 80038e6:	e04f      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6818      	ldr	r0, [r3, #0]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	6899      	ldr	r1, [r3, #8]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f000 fb02 	bl	8003f00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800390a:	609a      	str	r2, [r3, #8]
      break;
 800390c:	e03c      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6859      	ldr	r1, [r3, #4]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	461a      	mov	r2, r3
 800391c:	f000 fa76 	bl	8003e0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2150      	movs	r1, #80	; 0x50
 8003926:	4618      	mov	r0, r3
 8003928:	f000 facf 	bl	8003eca <TIM_ITRx_SetConfig>
      break;
 800392c:	e02c      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6859      	ldr	r1, [r3, #4]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	461a      	mov	r2, r3
 800393c:	f000 fa95 	bl	8003e6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2160      	movs	r1, #96	; 0x60
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fabf 	bl	8003eca <TIM_ITRx_SetConfig>
      break;
 800394c:	e01c      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6859      	ldr	r1, [r3, #4]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	461a      	mov	r2, r3
 800395c:	f000 fa56 	bl	8003e0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2140      	movs	r1, #64	; 0x40
 8003966:	4618      	mov	r0, r3
 8003968:	f000 faaf 	bl	8003eca <TIM_ITRx_SetConfig>
      break;
 800396c:	e00c      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4619      	mov	r1, r3
 8003978:	4610      	mov	r0, r2
 800397a:	f000 faa6 	bl	8003eca <TIM_ITRx_SetConfig>
      break;
 800397e:	e003      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
      break;
 8003984:	e000      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003986:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003998:	7bfb      	ldrb	r3, [r7, #15]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a34      	ldr	r2, [pc, #208]	; (8003ad8 <TIM_Base_SetConfig+0xe4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00f      	beq.n	8003a2c <TIM_Base_SetConfig+0x38>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a12:	d00b      	beq.n	8003a2c <TIM_Base_SetConfig+0x38>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a31      	ldr	r2, [pc, #196]	; (8003adc <TIM_Base_SetConfig+0xe8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d007      	beq.n	8003a2c <TIM_Base_SetConfig+0x38>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a30      	ldr	r2, [pc, #192]	; (8003ae0 <TIM_Base_SetConfig+0xec>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d003      	beq.n	8003a2c <TIM_Base_SetConfig+0x38>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a2f      	ldr	r2, [pc, #188]	; (8003ae4 <TIM_Base_SetConfig+0xf0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d108      	bne.n	8003a3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a25      	ldr	r2, [pc, #148]	; (8003ad8 <TIM_Base_SetConfig+0xe4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d01b      	beq.n	8003a7e <TIM_Base_SetConfig+0x8a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4c:	d017      	beq.n	8003a7e <TIM_Base_SetConfig+0x8a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a22      	ldr	r2, [pc, #136]	; (8003adc <TIM_Base_SetConfig+0xe8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d013      	beq.n	8003a7e <TIM_Base_SetConfig+0x8a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a21      	ldr	r2, [pc, #132]	; (8003ae0 <TIM_Base_SetConfig+0xec>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00f      	beq.n	8003a7e <TIM_Base_SetConfig+0x8a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a20      	ldr	r2, [pc, #128]	; (8003ae4 <TIM_Base_SetConfig+0xf0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00b      	beq.n	8003a7e <TIM_Base_SetConfig+0x8a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a1f      	ldr	r2, [pc, #124]	; (8003ae8 <TIM_Base_SetConfig+0xf4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d007      	beq.n	8003a7e <TIM_Base_SetConfig+0x8a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a1e      	ldr	r2, [pc, #120]	; (8003aec <TIM_Base_SetConfig+0xf8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d003      	beq.n	8003a7e <TIM_Base_SetConfig+0x8a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a1d      	ldr	r2, [pc, #116]	; (8003af0 <TIM_Base_SetConfig+0xfc>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d108      	bne.n	8003a90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a08      	ldr	r2, [pc, #32]	; (8003ad8 <TIM_Base_SetConfig+0xe4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d103      	bne.n	8003ac4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	615a      	str	r2, [r3, #20]
}
 8003aca:	bf00      	nop
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40010000 	.word	0x40010000
 8003adc:	40000400 	.word	0x40000400
 8003ae0:	40000800 	.word	0x40000800
 8003ae4:	40000c00 	.word	0x40000c00
 8003ae8:	40014000 	.word	0x40014000
 8003aec:	40014400 	.word	0x40014400
 8003af0:	40014800 	.word	0x40014800

08003af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	f023 0201 	bic.w	r2, r3, #1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0303 	bic.w	r3, r3, #3
 8003b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 0302 	bic.w	r3, r3, #2
 8003b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a1c      	ldr	r2, [pc, #112]	; (8003bbc <TIM_OC1_SetConfig+0xc8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10c      	bne.n	8003b6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f023 0308 	bic.w	r3, r3, #8
 8003b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f023 0304 	bic.w	r3, r3, #4
 8003b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a13      	ldr	r2, [pc, #76]	; (8003bbc <TIM_OC1_SetConfig+0xc8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d111      	bne.n	8003b96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	621a      	str	r2, [r3, #32]
}
 8003bb0:	bf00      	nop
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	40010000 	.word	0x40010000

08003bc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	f023 0210 	bic.w	r2, r3, #16
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	021b      	lsls	r3, r3, #8
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f023 0320 	bic.w	r3, r3, #32
 8003c0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a1e      	ldr	r2, [pc, #120]	; (8003c94 <TIM_OC2_SetConfig+0xd4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d10d      	bne.n	8003c3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a15      	ldr	r2, [pc, #84]	; (8003c94 <TIM_OC2_SetConfig+0xd4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d113      	bne.n	8003c6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	621a      	str	r2, [r3, #32]
}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40010000 	.word	0x40010000

08003c98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0303 	bic.w	r3, r3, #3
 8003cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a1d      	ldr	r2, [pc, #116]	; (8003d68 <TIM_OC3_SetConfig+0xd0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d10d      	bne.n	8003d12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a14      	ldr	r2, [pc, #80]	; (8003d68 <TIM_OC3_SetConfig+0xd0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d113      	bne.n	8003d42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	621a      	str	r2, [r3, #32]
}
 8003d5c:	bf00      	nop
 8003d5e:	371c      	adds	r7, #28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	40010000 	.word	0x40010000

08003d6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	031b      	lsls	r3, r3, #12
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a10      	ldr	r2, [pc, #64]	; (8003e08 <TIM_OC4_SetConfig+0x9c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d109      	bne.n	8003de0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	621a      	str	r2, [r3, #32]
}
 8003dfa:	bf00      	nop
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40010000 	.word	0x40010000

08003e0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	f023 0201 	bic.w	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f023 030a 	bic.w	r3, r3, #10
 8003e48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	621a      	str	r2, [r3, #32]
}
 8003e5e:	bf00      	nop
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b087      	sub	sp, #28
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	f023 0210 	bic.w	r2, r3, #16
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	031b      	lsls	r3, r3, #12
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ea6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	621a      	str	r2, [r3, #32]
}
 8003ebe:	bf00      	nop
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f043 0307 	orr.w	r3, r3, #7
 8003eec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	609a      	str	r2, [r3, #8]
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	021a      	lsls	r2, r3, #8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	609a      	str	r2, [r3, #8]
}
 8003f34:	bf00      	nop
 8003f36:	371c      	adds	r7, #28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	2201      	movs	r2, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a1a      	ldr	r2, [r3, #32]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	43db      	mvns	r3, r3
 8003f62:	401a      	ands	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a1a      	ldr	r2, [r3, #32]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	fa01 f303 	lsl.w	r3, r1, r3
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	621a      	str	r2, [r3, #32]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
	...

08003f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e050      	b.n	8004046 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1c      	ldr	r2, [pc, #112]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d018      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff0:	d013      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a18      	ldr	r2, [pc, #96]	; (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00e      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a16      	ldr	r2, [pc, #88]	; (800405c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d009      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a15      	ldr	r2, [pc, #84]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d004      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a13      	ldr	r2, [pc, #76]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d10c      	bne.n	8004034 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004020:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	4313      	orrs	r3, r2
 800402a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40010000 	.word	0x40010000
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800
 8004060:	40000c00 	.word	0x40000c00
 8004064:	40014000 	.word	0x40014000

08004068 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004080:	2302      	movs	r3, #2
 8004082:	e03d      	b.n	8004100 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e03f      	b.n	80041c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fd fce2 	bl	8001b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2224      	movs	r2, #36	; 0x24
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004176:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fddb 	bl	8004d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800418c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695a      	ldr	r2, [r3, #20]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800419c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b08a      	sub	sp, #40	; 0x28
 80041d2:	af02      	add	r7, sp, #8
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	603b      	str	r3, [r7, #0]
 80041da:	4613      	mov	r3, r2
 80041dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b20      	cmp	r3, #32
 80041ec:	d17c      	bne.n	80042e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <HAL_UART_Transmit+0x2c>
 80041f4:	88fb      	ldrh	r3, [r7, #6]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e075      	b.n	80042ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_UART_Transmit+0x3e>
 8004208:	2302      	movs	r3, #2
 800420a:	e06e      	b.n	80042ea <HAL_UART_Transmit+0x11c>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2221      	movs	r2, #33	; 0x21
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004222:	f7fd fe13 	bl	8001e4c <HAL_GetTick>
 8004226:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	88fa      	ldrh	r2, [r7, #6]
 800422c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	88fa      	ldrh	r2, [r7, #6]
 8004232:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423c:	d108      	bne.n	8004250 <HAL_UART_Transmit+0x82>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d104      	bne.n	8004250 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	61bb      	str	r3, [r7, #24]
 800424e:	e003      	b.n	8004258 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004254:	2300      	movs	r3, #0
 8004256:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004260:	e02a      	b.n	80042b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2200      	movs	r2, #0
 800426a:	2180      	movs	r1, #128	; 0x80
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 fb1f 	bl	80048b0 <UART_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e036      	b.n	80042ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10b      	bne.n	800429a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004290:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	3302      	adds	r3, #2
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	e007      	b.n	80042aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	781a      	ldrb	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	3301      	adds	r3, #1
 80042a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1cf      	bne.n	8004262 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2200      	movs	r2, #0
 80042ca:	2140      	movs	r1, #64	; 0x40
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 faef 	bl	80048b0 <UART_WaitOnFlagUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e006      	b.n	80042ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	e000      	b.n	80042ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042e8:	2302      	movs	r3, #2
  }
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3720      	adds	r7, #32
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	4613      	mov	r3, r2
 80042fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b20      	cmp	r3, #32
 800430a:	d11d      	bne.n	8004348 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_UART_Receive_IT+0x26>
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e016      	b.n	800434a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_UART_Receive_IT+0x38>
 8004326:	2302      	movs	r3, #2
 8004328:	e00f      	b.n	800434a <HAL_UART_Receive_IT+0x58>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004338:	88fb      	ldrh	r3, [r7, #6]
 800433a:	461a      	mov	r2, r3
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 fb24 	bl	800498c <UART_Start_Receive_IT>
 8004344:	4603      	mov	r3, r0
 8004346:	e000      	b.n	800434a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004348:	2302      	movs	r3, #2
  }
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b0ba      	sub	sp, #232	; 0xe8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800437a:	2300      	movs	r3, #0
 800437c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004380:	2300      	movs	r3, #0
 8004382:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10f      	bne.n	80043ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800439a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <HAL_UART_IRQHandler+0x66>
 80043a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fc03 	bl	8004bbe <UART_Receive_IT>
      return;
 80043b8:	e256      	b.n	8004868 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 80de 	beq.w	8004580 <HAL_UART_IRQHandler+0x22c>
 80043c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d106      	bne.n	80043de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80d1 	beq.w	8004580 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00b      	beq.n	8004402 <HAL_UART_IRQHandler+0xae>
 80043ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	f043 0201 	orr.w	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00b      	beq.n	8004426 <HAL_UART_IRQHandler+0xd2>
 800440e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d005      	beq.n	8004426 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f043 0202 	orr.w	r2, r3, #2
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00b      	beq.n	800444a <HAL_UART_IRQHandler+0xf6>
 8004432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f043 0204 	orr.w	r2, r3, #4
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800444a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d011      	beq.n	800447a <HAL_UART_IRQHandler+0x126>
 8004456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	d105      	bne.n	800446e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	f043 0208 	orr.w	r2, r3, #8
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 81ed 	beq.w	800485e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_UART_IRQHandler+0x14e>
 8004490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004494:	f003 0320 	and.w	r3, r3, #32
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fb8e 	bl	8004bbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	bf0c      	ite	eq
 80044b0:	2301      	moveq	r3, #1
 80044b2:	2300      	movne	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d103      	bne.n	80044ce <HAL_UART_IRQHandler+0x17a>
 80044c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d04f      	beq.n	800456e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fa96 	bl	8004a00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d141      	bne.n	8004566 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3314      	adds	r3, #20
 80044e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004500:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3314      	adds	r3, #20
 800450a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800450e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004512:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800451a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004526:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1d9      	bne.n	80044e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	2b00      	cmp	r3, #0
 8004534:	d013      	beq.n	800455e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	4a7d      	ldr	r2, [pc, #500]	; (8004730 <HAL_UART_IRQHandler+0x3dc>)
 800453c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	4618      	mov	r0, r3
 8004544:	f7fd fe33 	bl	80021ae <HAL_DMA_Abort_IT>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d016      	beq.n	800457c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004558:	4610      	mov	r0, r2
 800455a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455c:	e00e      	b.n	800457c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f990 	bl	8004884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004564:	e00a      	b.n	800457c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f98c 	bl	8004884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800456c:	e006      	b.n	800457c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f988 	bl	8004884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800457a:	e170      	b.n	800485e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457c:	bf00      	nop
    return;
 800457e:	e16e      	b.n	800485e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	2b01      	cmp	r3, #1
 8004586:	f040 814a 	bne.w	800481e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800458a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 8143 	beq.w	800481e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 813c 	beq.w	800481e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045a6:	2300      	movs	r3, #0
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	60bb      	str	r3, [r7, #8]
 80045ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b40      	cmp	r3, #64	; 0x40
 80045c8:	f040 80b4 	bne.w	8004734 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8140 	beq.w	8004862 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045ea:	429a      	cmp	r2, r3
 80045ec:	f080 8139 	bcs.w	8004862 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004602:	f000 8088 	beq.w	8004716 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	330c      	adds	r3, #12
 800460c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800461c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	330c      	adds	r3, #12
 800462e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004632:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800463e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800464a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1d9      	bne.n	8004606 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3314      	adds	r3, #20
 8004658:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800465c:	e853 3f00 	ldrex	r3, [r3]
 8004660:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3314      	adds	r3, #20
 8004672:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004676:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800467a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800467e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e1      	bne.n	8004652 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3314      	adds	r3, #20
 8004694:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800469e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3314      	adds	r3, #20
 80046ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e3      	bne.n	800468e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	330c      	adds	r3, #12
 80046da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046de:	e853 3f00 	ldrex	r3, [r3]
 80046e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e6:	f023 0310 	bic.w	r3, r3, #16
 80046ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	330c      	adds	r3, #12
 80046f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80046fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e3      	bne.n	80046d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004710:	4618      	mov	r0, r3
 8004712:	f7fd fcdc 	bl	80020ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800471e:	b29b      	uxth	r3, r3
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	b29b      	uxth	r3, r3
 8004724:	4619      	mov	r1, r3
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f8b6 	bl	8004898 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800472c:	e099      	b.n	8004862 <HAL_UART_IRQHandler+0x50e>
 800472e:	bf00      	nop
 8004730:	08004ac7 	.word	0x08004ac7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800473c:	b29b      	uxth	r3, r3
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 808b 	beq.w	8004866 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 8086 	beq.w	8004866 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800476a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004770:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	330c      	adds	r3, #12
 800477a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800477e:	647a      	str	r2, [r7, #68]	; 0x44
 8004780:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004782:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004784:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004786:	e841 2300 	strex	r3, r2, [r1]
 800478a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800478c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1e3      	bne.n	800475a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3314      	adds	r3, #20
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	e853 3f00 	ldrex	r3, [r3]
 80047a0:	623b      	str	r3, [r7, #32]
   return(result);
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	f023 0301 	bic.w	r3, r3, #1
 80047a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3314      	adds	r3, #20
 80047b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047b6:	633a      	str	r2, [r7, #48]	; 0x30
 80047b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047be:	e841 2300 	strex	r3, r2, [r1]
 80047c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e3      	bne.n	8004792 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	330c      	adds	r3, #12
 80047de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0310 	bic.w	r3, r3, #16
 80047ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	330c      	adds	r3, #12
 80047f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80047fc:	61fa      	str	r2, [r7, #28]
 80047fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	69b9      	ldr	r1, [r7, #24]
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	e841 2300 	strex	r3, r2, [r1]
 8004808:	617b      	str	r3, [r7, #20]
   return(result);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e3      	bne.n	80047d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004810:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004814:	4619      	mov	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f83e 	bl	8004898 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800481c:	e023      	b.n	8004866 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800481e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004826:	2b00      	cmp	r3, #0
 8004828:	d009      	beq.n	800483e <HAL_UART_IRQHandler+0x4ea>
 800482a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800482e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f959 	bl	8004aee <UART_Transmit_IT>
    return;
 800483c:	e014      	b.n	8004868 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800483e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00e      	beq.n	8004868 <HAL_UART_IRQHandler+0x514>
 800484a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800484e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d008      	beq.n	8004868 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f999 	bl	8004b8e <UART_EndTransmit_IT>
    return;
 800485c:	e004      	b.n	8004868 <HAL_UART_IRQHandler+0x514>
    return;
 800485e:	bf00      	nop
 8004860:	e002      	b.n	8004868 <HAL_UART_IRQHandler+0x514>
      return;
 8004862:	bf00      	nop
 8004864:	e000      	b.n	8004868 <HAL_UART_IRQHandler+0x514>
      return;
 8004866:	bf00      	nop
  }
}
 8004868:	37e8      	adds	r7, #232	; 0xe8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop

08004870 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b090      	sub	sp, #64	; 0x40
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048c0:	e050      	b.n	8004964 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c8:	d04c      	beq.n	8004964 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d007      	beq.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80048d0:	f7fd fabc 	bl	8001e4c <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048dc:	429a      	cmp	r2, r3
 80048de:	d241      	bcs.n	8004964 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	330c      	adds	r3, #12
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	e853 3f00 	ldrex	r3, [r3]
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	330c      	adds	r3, #12
 80048fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004900:	637a      	str	r2, [r7, #52]	; 0x34
 8004902:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004904:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004908:	e841 2300 	strex	r3, r2, [r1]
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e5      	bne.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3314      	adds	r3, #20
 800491a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	613b      	str	r3, [r7, #16]
   return(result);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	63bb      	str	r3, [r7, #56]	; 0x38
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3314      	adds	r3, #20
 8004932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004934:	623a      	str	r2, [r7, #32]
 8004936:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	69f9      	ldr	r1, [r7, #28]
 800493a:	6a3a      	ldr	r2, [r7, #32]
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	61bb      	str	r3, [r7, #24]
   return(result);
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e5      	bne.n	8004914 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e00f      	b.n	8004984 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	4013      	ands	r3, r2
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	429a      	cmp	r2, r3
 8004972:	bf0c      	ite	eq
 8004974:	2301      	moveq	r3, #1
 8004976:	2300      	movne	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	461a      	mov	r2, r3
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	429a      	cmp	r2, r3
 8004980:	d09f      	beq.n	80048c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3740      	adds	r7, #64	; 0x40
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	4613      	mov	r3, r2
 8004998:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	88fa      	ldrh	r2, [r7, #6]
 80049a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	88fa      	ldrh	r2, [r7, #6]
 80049aa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2222      	movs	r2, #34	; 0x22
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049d0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695a      	ldr	r2, [r3, #20]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0201 	orr.w	r2, r2, #1
 80049e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0220 	orr.w	r2, r2, #32
 80049f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b095      	sub	sp, #84	; 0x54
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	330c      	adds	r3, #12
 8004a0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a12:	e853 3f00 	ldrex	r3, [r3]
 8004a16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	330c      	adds	r3, #12
 8004a26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a28:	643a      	str	r2, [r7, #64]	; 0x40
 8004a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e5      	bne.n	8004a08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3314      	adds	r3, #20
 8004a42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f023 0301 	bic.w	r3, r3, #1
 8004a52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3314      	adds	r3, #20
 8004a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e5      	bne.n	8004a3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d119      	bne.n	8004aac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f023 0310 	bic.w	r3, r3, #16
 8004a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	330c      	adds	r3, #12
 8004a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a98:	61ba      	str	r2, [r7, #24]
 8004a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6979      	ldr	r1, [r7, #20]
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e5      	bne.n	8004a78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004aba:	bf00      	nop
 8004abc:	3754      	adds	r7, #84	; 0x54
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b084      	sub	sp, #16
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f7ff fecf 	bl	8004884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b085      	sub	sp, #20
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b21      	cmp	r3, #33	; 0x21
 8004b00:	d13e      	bne.n	8004b80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0a:	d114      	bne.n	8004b36 <UART_Transmit_IT+0x48>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d110      	bne.n	8004b36 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	1c9a      	adds	r2, r3, #2
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	621a      	str	r2, [r3, #32]
 8004b34:	e008      	b.n	8004b48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	1c59      	adds	r1, r3, #1
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6211      	str	r1, [r2, #32]
 8004b40:	781a      	ldrb	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	4619      	mov	r1, r3
 8004b56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10f      	bne.n	8004b7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	e000      	b.n	8004b82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b80:	2302      	movs	r3, #2
  }
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff fe5e 	bl	8004870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b08c      	sub	sp, #48	; 0x30
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b22      	cmp	r3, #34	; 0x22
 8004bd0:	f040 80ab 	bne.w	8004d2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bdc:	d117      	bne.n	8004c0e <UART_Receive_IT+0x50>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d113      	bne.n	8004c0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c06:	1c9a      	adds	r2, r3, #2
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c0c:	e026      	b.n	8004c5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c20:	d007      	beq.n	8004c32 <UART_Receive_IT+0x74>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <UART_Receive_IT+0x82>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d106      	bne.n	8004c40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3c:	701a      	strb	r2, [r3, #0]
 8004c3e:	e008      	b.n	8004c52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d15a      	bne.n	8004d26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0220 	bic.w	r2, r2, #32
 8004c7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695a      	ldr	r2, [r3, #20]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0201 	bic.w	r2, r2, #1
 8004c9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d135      	bne.n	8004d1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	330c      	adds	r3, #12
 8004cbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	e853 3f00 	ldrex	r3, [r3]
 8004cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f023 0310 	bic.w	r3, r3, #16
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	330c      	adds	r3, #12
 8004cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd6:	623a      	str	r2, [r7, #32]
 8004cd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cda:	69f9      	ldr	r1, [r7, #28]
 8004cdc:	6a3a      	ldr	r2, [r7, #32]
 8004cde:	e841 2300 	strex	r3, r2, [r1]
 8004ce2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1e5      	bne.n	8004cb6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b10      	cmp	r3, #16
 8004cf6:	d10a      	bne.n	8004d0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d12:	4619      	mov	r1, r3
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff fdbf 	bl	8004898 <HAL_UARTEx_RxEventCallback>
 8004d1a:	e002      	b.n	8004d22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7fc f94d 	bl	8000fbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e002      	b.n	8004d2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	e000      	b.n	8004d2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004d2a:	2302      	movs	r3, #2
  }
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3730      	adds	r7, #48	; 0x30
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d38:	b09f      	sub	sp, #124	; 0x7c
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4a:	68d9      	ldr	r1, [r3, #12]
 8004d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	ea40 0301 	orr.w	r3, r0, r1
 8004d54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	431a      	orrs	r2, r3
 8004d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d78:	f021 010c 	bic.w	r1, r1, #12
 8004d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d82:	430b      	orrs	r3, r1
 8004d84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d92:	6999      	ldr	r1, [r3, #24]
 8004d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	ea40 0301 	orr.w	r3, r0, r1
 8004d9c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4bc5      	ldr	r3, [pc, #788]	; (80050b8 <UART_SetConfig+0x384>)
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d004      	beq.n	8004db2 <UART_SetConfig+0x7e>
 8004da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	4bc3      	ldr	r3, [pc, #780]	; (80050bc <UART_SetConfig+0x388>)
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d103      	bne.n	8004dba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004db2:	f7fe f867 	bl	8002e84 <HAL_RCC_GetPCLK2Freq>
 8004db6:	6778      	str	r0, [r7, #116]	; 0x74
 8004db8:	e002      	b.n	8004dc0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dba:	f7fe f84f 	bl	8002e5c <HAL_RCC_GetPCLK1Freq>
 8004dbe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc8:	f040 80b6 	bne.w	8004f38 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dce:	461c      	mov	r4, r3
 8004dd0:	f04f 0500 	mov.w	r5, #0
 8004dd4:	4622      	mov	r2, r4
 8004dd6:	462b      	mov	r3, r5
 8004dd8:	1891      	adds	r1, r2, r2
 8004dda:	6439      	str	r1, [r7, #64]	; 0x40
 8004ddc:	415b      	adcs	r3, r3
 8004dde:	647b      	str	r3, [r7, #68]	; 0x44
 8004de0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004de4:	1912      	adds	r2, r2, r4
 8004de6:	eb45 0303 	adc.w	r3, r5, r3
 8004dea:	f04f 0000 	mov.w	r0, #0
 8004dee:	f04f 0100 	mov.w	r1, #0
 8004df2:	00d9      	lsls	r1, r3, #3
 8004df4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004df8:	00d0      	lsls	r0, r2, #3
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	1911      	adds	r1, r2, r4
 8004e00:	6639      	str	r1, [r7, #96]	; 0x60
 8004e02:	416b      	adcs	r3, r5
 8004e04:	667b      	str	r3, [r7, #100]	; 0x64
 8004e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	1891      	adds	r1, r2, r2
 8004e12:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e14:	415b      	adcs	r3, r3
 8004e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e1c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004e20:	f7fb fdd0 	bl	80009c4 <__aeabi_uldivmod>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4ba5      	ldr	r3, [pc, #660]	; (80050c0 <UART_SetConfig+0x38c>)
 8004e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	011e      	lsls	r6, r3, #4
 8004e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e34:	461c      	mov	r4, r3
 8004e36:	f04f 0500 	mov.w	r5, #0
 8004e3a:	4622      	mov	r2, r4
 8004e3c:	462b      	mov	r3, r5
 8004e3e:	1891      	adds	r1, r2, r2
 8004e40:	6339      	str	r1, [r7, #48]	; 0x30
 8004e42:	415b      	adcs	r3, r3
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34
 8004e46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004e4a:	1912      	adds	r2, r2, r4
 8004e4c:	eb45 0303 	adc.w	r3, r5, r3
 8004e50:	f04f 0000 	mov.w	r0, #0
 8004e54:	f04f 0100 	mov.w	r1, #0
 8004e58:	00d9      	lsls	r1, r3, #3
 8004e5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e5e:	00d0      	lsls	r0, r2, #3
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	1911      	adds	r1, r2, r4
 8004e66:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e68:	416b      	adcs	r3, r5
 8004e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	461a      	mov	r2, r3
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	1891      	adds	r1, r2, r2
 8004e78:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e7a:	415b      	adcs	r3, r3
 8004e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e82:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004e86:	f7fb fd9d 	bl	80009c4 <__aeabi_uldivmod>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4b8c      	ldr	r3, [pc, #560]	; (80050c0 <UART_SetConfig+0x38c>)
 8004e90:	fba3 1302 	umull	r1, r3, r3, r2
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	2164      	movs	r1, #100	; 0x64
 8004e98:	fb01 f303 	mul.w	r3, r1, r3
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	3332      	adds	r3, #50	; 0x32
 8004ea2:	4a87      	ldr	r2, [pc, #540]	; (80050c0 <UART_SetConfig+0x38c>)
 8004ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea8:	095b      	lsrs	r3, r3, #5
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004eb0:	441e      	add	r6, r3
 8004eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f04f 0100 	mov.w	r1, #0
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	1894      	adds	r4, r2, r2
 8004ec0:	623c      	str	r4, [r7, #32]
 8004ec2:	415b      	adcs	r3, r3
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004eca:	1812      	adds	r2, r2, r0
 8004ecc:	eb41 0303 	adc.w	r3, r1, r3
 8004ed0:	f04f 0400 	mov.w	r4, #0
 8004ed4:	f04f 0500 	mov.w	r5, #0
 8004ed8:	00dd      	lsls	r5, r3, #3
 8004eda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ede:	00d4      	lsls	r4, r2, #3
 8004ee0:	4622      	mov	r2, r4
 8004ee2:	462b      	mov	r3, r5
 8004ee4:	1814      	adds	r4, r2, r0
 8004ee6:	653c      	str	r4, [r7, #80]	; 0x50
 8004ee8:	414b      	adcs	r3, r1
 8004eea:	657b      	str	r3, [r7, #84]	; 0x54
 8004eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f04f 0300 	mov.w	r3, #0
 8004ef6:	1891      	adds	r1, r2, r2
 8004ef8:	61b9      	str	r1, [r7, #24]
 8004efa:	415b      	adcs	r3, r3
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f02:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004f06:	f7fb fd5d 	bl	80009c4 <__aeabi_uldivmod>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4b6c      	ldr	r3, [pc, #432]	; (80050c0 <UART_SetConfig+0x38c>)
 8004f10:	fba3 1302 	umull	r1, r3, r3, r2
 8004f14:	095b      	lsrs	r3, r3, #5
 8004f16:	2164      	movs	r1, #100	; 0x64
 8004f18:	fb01 f303 	mul.w	r3, r1, r3
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	3332      	adds	r3, #50	; 0x32
 8004f22:	4a67      	ldr	r2, [pc, #412]	; (80050c0 <UART_SetConfig+0x38c>)
 8004f24:	fba2 2303 	umull	r2, r3, r2, r3
 8004f28:	095b      	lsrs	r3, r3, #5
 8004f2a:	f003 0207 	and.w	r2, r3, #7
 8004f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4432      	add	r2, r6
 8004f34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f36:	e0b9      	b.n	80050ac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f3a:	461c      	mov	r4, r3
 8004f3c:	f04f 0500 	mov.w	r5, #0
 8004f40:	4622      	mov	r2, r4
 8004f42:	462b      	mov	r3, r5
 8004f44:	1891      	adds	r1, r2, r2
 8004f46:	6139      	str	r1, [r7, #16]
 8004f48:	415b      	adcs	r3, r3
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f50:	1912      	adds	r2, r2, r4
 8004f52:	eb45 0303 	adc.w	r3, r5, r3
 8004f56:	f04f 0000 	mov.w	r0, #0
 8004f5a:	f04f 0100 	mov.w	r1, #0
 8004f5e:	00d9      	lsls	r1, r3, #3
 8004f60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f64:	00d0      	lsls	r0, r2, #3
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	eb12 0804 	adds.w	r8, r2, r4
 8004f6e:	eb43 0905 	adc.w	r9, r3, r5
 8004f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f04f 0100 	mov.w	r1, #0
 8004f7c:	f04f 0200 	mov.w	r2, #0
 8004f80:	f04f 0300 	mov.w	r3, #0
 8004f84:	008b      	lsls	r3, r1, #2
 8004f86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f8a:	0082      	lsls	r2, r0, #2
 8004f8c:	4640      	mov	r0, r8
 8004f8e:	4649      	mov	r1, r9
 8004f90:	f7fb fd18 	bl	80009c4 <__aeabi_uldivmod>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4b49      	ldr	r3, [pc, #292]	; (80050c0 <UART_SetConfig+0x38c>)
 8004f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	011e      	lsls	r6, r3, #4
 8004fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f04f 0100 	mov.w	r1, #0
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	1894      	adds	r4, r2, r2
 8004fb0:	60bc      	str	r4, [r7, #8]
 8004fb2:	415b      	adcs	r3, r3
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fba:	1812      	adds	r2, r2, r0
 8004fbc:	eb41 0303 	adc.w	r3, r1, r3
 8004fc0:	f04f 0400 	mov.w	r4, #0
 8004fc4:	f04f 0500 	mov.w	r5, #0
 8004fc8:	00dd      	lsls	r5, r3, #3
 8004fca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fce:	00d4      	lsls	r4, r2, #3
 8004fd0:	4622      	mov	r2, r4
 8004fd2:	462b      	mov	r3, r5
 8004fd4:	1814      	adds	r4, r2, r0
 8004fd6:	64bc      	str	r4, [r7, #72]	; 0x48
 8004fd8:	414b      	adcs	r3, r1
 8004fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f04f 0100 	mov.w	r1, #0
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	008b      	lsls	r3, r1, #2
 8004ff0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ff4:	0082      	lsls	r2, r0, #2
 8004ff6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004ffa:	f7fb fce3 	bl	80009c4 <__aeabi_uldivmod>
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	4b2f      	ldr	r3, [pc, #188]	; (80050c0 <UART_SetConfig+0x38c>)
 8005004:	fba3 1302 	umull	r1, r3, r3, r2
 8005008:	095b      	lsrs	r3, r3, #5
 800500a:	2164      	movs	r1, #100	; 0x64
 800500c:	fb01 f303 	mul.w	r3, r1, r3
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	3332      	adds	r3, #50	; 0x32
 8005016:	4a2a      	ldr	r2, [pc, #168]	; (80050c0 <UART_SetConfig+0x38c>)
 8005018:	fba2 2303 	umull	r2, r3, r2, r3
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005022:	441e      	add	r6, r3
 8005024:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005026:	4618      	mov	r0, r3
 8005028:	f04f 0100 	mov.w	r1, #0
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	1894      	adds	r4, r2, r2
 8005032:	603c      	str	r4, [r7, #0]
 8005034:	415b      	adcs	r3, r3
 8005036:	607b      	str	r3, [r7, #4]
 8005038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800503c:	1812      	adds	r2, r2, r0
 800503e:	eb41 0303 	adc.w	r3, r1, r3
 8005042:	f04f 0400 	mov.w	r4, #0
 8005046:	f04f 0500 	mov.w	r5, #0
 800504a:	00dd      	lsls	r5, r3, #3
 800504c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005050:	00d4      	lsls	r4, r2, #3
 8005052:	4622      	mov	r2, r4
 8005054:	462b      	mov	r3, r5
 8005056:	eb12 0a00 	adds.w	sl, r2, r0
 800505a:	eb43 0b01 	adc.w	fp, r3, r1
 800505e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	4618      	mov	r0, r3
 8005064:	f04f 0100 	mov.w	r1, #0
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	008b      	lsls	r3, r1, #2
 8005072:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005076:	0082      	lsls	r2, r0, #2
 8005078:	4650      	mov	r0, sl
 800507a:	4659      	mov	r1, fp
 800507c:	f7fb fca2 	bl	80009c4 <__aeabi_uldivmod>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4b0e      	ldr	r3, [pc, #56]	; (80050c0 <UART_SetConfig+0x38c>)
 8005086:	fba3 1302 	umull	r1, r3, r3, r2
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	2164      	movs	r1, #100	; 0x64
 800508e:	fb01 f303 	mul.w	r3, r1, r3
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	3332      	adds	r3, #50	; 0x32
 8005098:	4a09      	ldr	r2, [pc, #36]	; (80050c0 <UART_SetConfig+0x38c>)
 800509a:	fba2 2303 	umull	r2, r3, r2, r3
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	f003 020f 	and.w	r2, r3, #15
 80050a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4432      	add	r2, r6
 80050aa:	609a      	str	r2, [r3, #8]
}
 80050ac:	bf00      	nop
 80050ae:	377c      	adds	r7, #124	; 0x7c
 80050b0:	46bd      	mov	sp, r7
 80050b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b6:	bf00      	nop
 80050b8:	40011000 	.word	0x40011000
 80050bc:	40011400 	.word	0x40011400
 80050c0:	51eb851f 	.word	0x51eb851f

080050c4 <__libc_init_array>:
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	4d0d      	ldr	r5, [pc, #52]	; (80050fc <__libc_init_array+0x38>)
 80050c8:	4c0d      	ldr	r4, [pc, #52]	; (8005100 <__libc_init_array+0x3c>)
 80050ca:	1b64      	subs	r4, r4, r5
 80050cc:	10a4      	asrs	r4, r4, #2
 80050ce:	2600      	movs	r6, #0
 80050d0:	42a6      	cmp	r6, r4
 80050d2:	d109      	bne.n	80050e8 <__libc_init_array+0x24>
 80050d4:	4d0b      	ldr	r5, [pc, #44]	; (8005104 <__libc_init_array+0x40>)
 80050d6:	4c0c      	ldr	r4, [pc, #48]	; (8005108 <__libc_init_array+0x44>)
 80050d8:	f000 f832 	bl	8005140 <_init>
 80050dc:	1b64      	subs	r4, r4, r5
 80050de:	10a4      	asrs	r4, r4, #2
 80050e0:	2600      	movs	r6, #0
 80050e2:	42a6      	cmp	r6, r4
 80050e4:	d105      	bne.n	80050f2 <__libc_init_array+0x2e>
 80050e6:	bd70      	pop	{r4, r5, r6, pc}
 80050e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ec:	4798      	blx	r3
 80050ee:	3601      	adds	r6, #1
 80050f0:	e7ee      	b.n	80050d0 <__libc_init_array+0xc>
 80050f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f6:	4798      	blx	r3
 80050f8:	3601      	adds	r6, #1
 80050fa:	e7f2      	b.n	80050e2 <__libc_init_array+0x1e>
 80050fc:	080051f4 	.word	0x080051f4
 8005100:	080051f4 	.word	0x080051f4
 8005104:	080051f4 	.word	0x080051f4
 8005108:	080051f8 	.word	0x080051f8

0800510c <memset>:
 800510c:	4402      	add	r2, r0
 800510e:	4603      	mov	r3, r0
 8005110:	4293      	cmp	r3, r2
 8005112:	d100      	bne.n	8005116 <memset+0xa>
 8005114:	4770      	bx	lr
 8005116:	f803 1b01 	strb.w	r1, [r3], #1
 800511a:	e7f9      	b.n	8005110 <memset+0x4>

0800511c <strncmp>:
 800511c:	b510      	push	{r4, lr}
 800511e:	b16a      	cbz	r2, 800513c <strncmp+0x20>
 8005120:	3901      	subs	r1, #1
 8005122:	1884      	adds	r4, r0, r2
 8005124:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005128:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800512c:	4293      	cmp	r3, r2
 800512e:	d103      	bne.n	8005138 <strncmp+0x1c>
 8005130:	42a0      	cmp	r0, r4
 8005132:	d001      	beq.n	8005138 <strncmp+0x1c>
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f5      	bne.n	8005124 <strncmp+0x8>
 8005138:	1a98      	subs	r0, r3, r2
 800513a:	bd10      	pop	{r4, pc}
 800513c:	4610      	mov	r0, r2
 800513e:	e7fc      	b.n	800513a <strncmp+0x1e>

08005140 <_init>:
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005142:	bf00      	nop
 8005144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005146:	bc08      	pop	{r3}
 8005148:	469e      	mov	lr, r3
 800514a:	4770      	bx	lr

0800514c <_fini>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	bf00      	nop
 8005150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005152:	bc08      	pop	{r3}
 8005154:	469e      	mov	lr, r3
 8005156:	4770      	bx	lr
